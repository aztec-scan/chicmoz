{"noir_version":"1.0.0-beta.5+0000000000000000000000000000000000000000","name":"SimpleLoggingUpdate","functions":[{"name":"add_to_counter_public","hash":"12894968658035840593","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10176877060487216746":{"error_kind":"string","string":"Function add_to_counter_public can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZnbbuM4DIbfJde9sCRSlOZVBkWRtukgQJAWmXaBRdF3XzLiLyddWOi4mJvwy8EfRIk6OH7fPO7u337d7Y9Pz783P36+b+5P+8Nh/+vu8Pywfd0/H/XT981kL1Ffw80mhhZiC6kFaoFbyC1IC6WFeg5JLaxBLUWDWexT00SN5NFE9jMz2e9MVTUWj7VFUlucNAaP0WPySB7ZY/YoHovH2iK7j93H7mP3sfvYfew+Np+2l82XNZpPbjZ58hg8Ro/JI3lkj9mjeCwe3SfuE/eJ+8R9or6k/Vf090n7rU4eg8foMXkkj+wxexSPxaP7wmTCahAAEZAABGBABgigAKpDgDnAHGAOMAcziwEDMkAABVAdrHAbBEAEJADMEWYrYpoMBFAA1cGKuUEAREACEIABMCeYE8wJZoKZYCaYCWaCmWC28qZoYOZkUADVwUq8gZnJIAISgAAMyAABFEB1sGJvYGY2iAAzW/1YwTdgQHaw2iYbZStutnSsuhskAAEYoJdzMNBmsOVeJkAAREACEIAB5rFuKQIogOpgs6lBAESAmS13m1ENGJABAiiA2iDatGpgQjZIAAIwIAMEUADVwWZTgwCAOcBss4mzAQMyQAAFUB1sNjXw7o0xAhLAuzeeV3sxsK+KAQEYkAHSCiCep8MZqgNNgACIgAQgAAMyAGaCmWBmmBlmhtlmwbnxNgv4/EkBVG+z1XyDAIgAbVieDAjAAG1YPm+UAigAmAVmgVlgFnSmoDMFnSnoTBFAAcB8nhfl4+Nmg03+7vW029kef7Hr61ngZXvaHV83P45vh8PN5p/t4e38o98v2+M5vm5P+q0mtDs+alTh0/6wM/q4ma+eli8VKdGvLrrcd0Hlrxp0na1ogK6wkZccceCYIlqhe9dFK+KVIS0bqE7iBqohd0O+7glaNhSyNbD1BGVaMgyzqBVZ6N63lEX+dhbyd7Pg0seiLI5FHRhYkIVuO2mpDWFQVJUTuaKq7Ztp6GljKY1RYes63RW6Quelwg6DuuSpYHIolsW+GBUm2zm8DSmnaUkxziTHOZOyOM3D92szfL84vz4mhVYsWNwNzHNl8bTieqGl62MYJBGIe2nKPKB6NLt2DMpbSkJdiRbI4gQZlKbkiOVKcl4szUjDTGrqqXDMK4b0ojvLtGY4+u6Tp/q96+NiOcQy6ASaAvqALhT/G87BklnivA2naXFmpEEeZSp9mdAbnEXFsDDz1NcJbX5aM0NTpt4bYc5Eb2Su25FGG0h2hZ7GuyGFcm2g0bGGem1LnTsjlk+9wcuOxOgLulju9Ebh2jBYMvXIjsrQQ3tddgzWTO6T9HLt/yNDxbqdA6/LIxY0Qu8n4jqHhD6oMsiEwt916N1uP61mKescIn3VkxrXOerUD4s1LjtGU436sOj/BXlxqtFgWLL0xUv0fmneTq/nGsloH+mGi/78vPpNXzz9Z17VFaFvh7onlXWK+Yykf0qsUqQ+1RTXtYLjNI+prFPkuSxKXZfIXJwprkskEc13hasSEcKACOU1gtrPWZVXJTEfeWtc14JeU1X4myl8Ftzq2+3D/nT1oODDVKf99v6w87dPb8eHi29f/33BN3jQ8HJ6ftg9vp12ZpqfNujLz6iHoxTCrf1NrG8l35TzG/3/4mfSxwQp0O2HNeU/","names":["add_to_counter_public"],"brillig_names":["add_to_counter_public"]},{"name":"constructor","hash":"5265696911767097218","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZndbhs5DIXfxde50A+pn7xKURRu6hYGDCdwkwUWRd59yRGPxt6FBO+kvek5iTsfKIqkRvGv3bfD17cfX47n788/d4+ffu2+Xo6n0/HHl9Pz0/71+HyW3/7aOf3Hp90jPex83j1mkdKkLhJcE98kNIm7xyJCTbhJapKblCZ1kSgU70S9aTCNpkLyUZRNk2k2Laa1KSlPQiZvGkyjKZmyqfKSaDYtpsqrDzt2pt40mEZTMhVekHg5mQovBNFiKrwg3ORMvWkwjabCi/J8YtNkmk2LaW2anak3DabR1HjZeNl4WXksWkxr0+JMvWkwjaZkyqbJ1HhFebKOUptWZ+pNg2k0JVM2TabZ1HjVeN45GA+jSK1SF2EIhmESTIYpMNWMdzAeBmQPsgfZK1mbQVukmWxGG6MZfaqqkafIqWGYBJNhJB7yaqoZbY1mPEyAiTAEwzAJJsOAHEEmkAlkAplA1kahoIZhlBzVZJgCo2TZfa/tQkWNkFnXpQ3DCtSOaYZghMzLU0Lm5SkBsmZM22Ux2i/NCDDpU9oxSePRlmmGYBgmwUioSSPUPknLKPMwASbCEAzDJBjlaKjaL81UM9oxzXiYABNhlKy1qm3TTILJMAWmmtHeacbDKHAZwQTDMAkmwxSY2kzQ3mnGwwSYCEMwStZBrb3TTIYpMNWM9k4zHsbSG3yEIRiGUaDTw0M5VY8PPUb0N1rhzRAMw0g82avJMAWmmtEKb8bDBJgIQzAMAzKBTCATyAwyg6yFvQSvhZ2DmgxTLGat58VoPTfjYTSwqCbCEIwGponSem4mw4CcQM4gZ5AzkpmRzIxkZiRTK7yZDANyWYDv7w87vBh8eb0cDvpecPWmIO8PL/vL4fy6ezy/nU4Pu7/2p7flP/182Z8Xfd1f5FNBHs7fRAX4/Xg6qHt/WJ9240dlOOqcWB6XsehXROUbhp8wuCYgkk8rIdwQwphA1WUjUL0ipNt1xDGhkM7GhVAo0YgwW0XSA8VWUcJoFTwmSG17IwQOsRPkdLhBpEkQxUUEUXiMuDuKNETcnYo6SkUdE3LCMnJeQ6BwdwQ59DzknEcR+AkiSt8ZIkZy4zxM6jLIgYNcynQbM+6OI27aj+tsFBpmg//ghhRya2EOe9znMYJjQQxMLgxbtEyicLxOKydjZwiZxUG0xsFlG0IvOEDUESJMEpoqKiu7dUeDv78oSlp3pPjh1J0MTebaM5H8eBk0qavaq7s48qPTI/Dv2NRZMnxYkzHskDDZUzn8cIJEeUUfIsosGakfQs6vFS7n/S2jzrok4zCVhln3JMppcG8cZV1KkeQO44iTjOZMtU+Mqz35D2MyPiNjU+jqUJd35VtCnA3g2g8zeSUeMyYlyqH2hLpthIoaT563rSPEdR0UtjGyR2XIa+dkJeXPMuQK2AdPymUbI+f1RKthG6O6/pZSw5gxHRt9Z+UCGIen2iyIitklV7/hFKZZdcX+6soxrUHI9eXeKOSO6XoUVIZRTN482RUgxA5PRZpM0MIeuSjXrXb/GA/r4JJLshuuYzI/K6PAa/Vbcik7SmsMwx2d3amij6XfqaTlRqciT2YnZyCSGwbB8cN3KqYPX6pmy0geVZXi+E41qUvKoR8imfIwhkld1hR7TaQ0LO3p7I39XiaT3G88A0rtDDeeV2lWWq5nQ/7wytsYvg8L+aNr2chIPQ65D2xjxHX4xroxDg59LXxVHf+Pkfo5wqVuXMt6FsWwcS2RqDN4vJYJIlO/VFDaAqiECV65bAHcW6CzGPrcqmHbInpt1swfzMK/AZ/lx/3T8XLzjd67oi7H/dfTwX78/nZ+uvr09e8XfIJvBF8uz0+Hb2+Xg5LWrwXln09BroZyhHzWb1D0RynxEFh/lD8/fpLLiXyaPr9rMP8A","names":["constructor"],"brillig_names":["constructor"]},{"name":"decrese_counter_public","hash":"15979473965872403177","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1YS2/TQBBe14/ESapGwAGJP+E0bZNjkOgF8TjxA0xiV5H6UlteEkiWuMEBceGGVP4pdTXTfB5PDJV3VQ6MFO1jZr+ZndkZb9YzK/KoDcTYKDIzapN2NLKIlaiGNhHL/KI2pnYD+L7FzcZCr038abKzGyv7s2j/OCZMl/5hTAf4SYdwnhQrfLmXkjZpjGeI13SvfgOz6m9SPxZrXMTWoe+T+4r9rKtPe31H43L/Q+qnb49ens5PFtnjxeIsOz9Hn8lYNtFtMINbYD6UmC/eHB4u82V2tv9+eX5Rww4VbO5vGH1v0i6UQ9LOd0kzapN2NArFHh5QW8buU4MNnjUbJkls6jGyiH+TB6ET/L1txo+c4G/f+Kfjxv4543fd4OeMH7vBn3Dt7ZkVeeLs9mHeYg2cekKfMfVcRf09Yavt76En9LE90j9cb9h3A8XWocKTNWCg6BkoejSswCJWaBErsojVsYjVtYjFuShre0kzapOWxGcrAGyZlxi3u8hL1t8z9TPpIi9DYY/0j8zLSLF1qPBkXkaKnkjR8x/r38TaNPW89Na0xuh3ZqkHZfjMaXcvm/8RHOf5JF7jQ0v4I47DhuK7UudTmOefof36ytoQ+Ch/AJjPqb8lZDCGjuM28YTtvmmuV9od1eY7QlNuoQ9Yf9v8QV09U88fF98GbW++4mutbsi7VJsaJGvDXcQUfS3vUB1FXqt7/M7iF3Us5gXAiwQvLOo+Ke9ghbDnb+O2Zeqx4rWOfb0t6xPairFn/eVd8RH1b95B9o+WF6+Os+P52YfTi2zx7OTACJLPHSHMy1IWrFnjgzzSbZ57tBTXqA/yWNaa/jI1HUMMrQw72tRpWIc2N30CtOPNcny9D4rquhnNJ+1oWqbBV7BD+iMUNnVN3VcoL30bK/L490eWL3xaCASvqZRo6YC2YEnwFDuNqV4DXPp9Mk0S1skx52uGpAD4KP+Rxvj8wG3Qws58ko7ycZqnu+lisTNP7wl8Y6pPw7b1v85G2TjP83GW7uR7+R/183ynWPF94atr/1Gfc62L8oIXAy8oqvp7NA5AD2KxHaGQ/0LjLWojWMPrh4r+SOiv2K3M4bmWWL4yx/Ll2f9M/f4aO7E+lcR7RV9ECnYo5L+Bzu/Ul59q1FfKXTbIeWvaawxlLiiqc5qP8OywPOvuFXUbmdcHHtbOkgY0Rn8hFtsRCvmfNOaYYLx5/VDR3xX6K3Yrc/Ls9BX5viJfxucH41GLe7d9xb7WKfBxTtp2ybZf/X4Dg+K1d/QeAAA=","debug_symbols":"tZbbbuIwEIbfJddceDw+Da9SoSqFUEWKAkphpRXi3XcMvzlUcrRdtDd84zj+lLHHxqdm030cP9/7cbv7apZvp+Zj6oeh/3wfduv20O9GfXpqTP4h1yzdoiHfLKMiNEsyyqgkZQLlSqtjyCoJtCCDDvRgACOYQLmS4WP4GD6Gj+Fj+Bg+ho/hY/gcfA4+B5+Dz8Hn4HPZ55URTKBc6Q1IoAUZdKAH4fPwefg8fAG+AF+AL8AX4AvwBfgCfAG+mN8Lyvxc1y3m50kpVyYDEmhBBh3owQBGEL4En8An8Al8Ap/AJ/CJ+qzWkUQwgXIlGVMCNVrOgapsrkTjSuBLkG0+B7EE6Zo3GUFApgRUAlsCLoErgS9Bzjuez4um7Iz3w9R1eWM8bBXdQPt26sZDsxyPw7BofrXD8fLS174dLzy0k/ZqQt24Uapw2w9djs6L+2hTH0rMUoYTe+tvCvFPDppxGGuLwjh7N9gng60bnJgIgxMKN0N4zoPrhuRcgiG54GqG2SxEShZEUsvCv5xF+L9Z+HRbi1RdizRj8LFkQYG59g1SN4hnB4Oo7MUsyFazmKnrJM6XmZRoa1Vt5rIo5SAP8+i/5TBXkikUAVF1Elxd4I1jGDS8VwOz/YEjmpsj0T86pGTidWXqjr+bDGuqkzEnuOUhtlqUNFeV0Zaakuilppg7Kw3f95ZPtZqw9PIRYe3rZ8TcgurRcFvQh6/4UVE8Ouy3olhps13309PF75xlU99+DB2a2+O4fug9/N6XnnJx3E+7dbc5Tl023W+P+vNGLAsKZqW3sNzSxSVOq/zfnJtaCWRdbtKl12szrs750/4A","names":["decrese_counter_public"],"brillig_names":["decrese_counter_public"]},{"name":"get_counter_value","hash":"6076964405181245840","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+VaQW/rRBC2mziJ7boN5Y/YadK0t0D7Clw4cICzX5KWJ6AVaYETkjly58LPAAmJP8GBf/EkJCQOiAsHss3Oy5cvYycla3hPb6Rq7Z3ZmdnZmdnxpL63AN/+GWjCHIPMjeyY7gaZQ16pr+hZuQltQWQfQvu+B/iGw42Hii6u+J+m/bPQW9+zQ/2PQ8uzTvsIzxr4p23L551iyZ/3YiDxVoMD13QsXp6PYI2Bd4G3rK/TbvNzP63ZbtmbXrmtxOfOi1pkHwv/C+DvueOfCv8n9ej/gv9lPfyz2Fv44eeW3/7878A+X0/v3/70dvzJ+1989nQ648yHp+kpJ4tguB4tuZ7f3tzP8vH9W5PJbHp3V8ZBy8PMNQKuH+fPbt6bMLfmv+P24XR29+z2hrkFW3KTmGrB3MiO6Y4g+aVNuqHcDsw79Je+dg/yeaH8iHR17b8+yRN92D7irWK7UNG1q+Ba8Iw4lBMqcv4rXnzeBkZ2TB8HPZ5IFJ3YzyKYd3iug239TORHio3q8LOI9Ck7M7FdrOjaVXDsG7EiJ1bkvEq8xEcTb91n/ZJR5PAcy8F81yY5bYdyMI+FJCd0KAd5SW0hciKHcpDXRbEYJbbxXEd2THeDFzX6PujmME4nYqPEWwfBHYBs9slDwLEfdQHHZ/8G4CLCHQEO44GBKye0k9HzK+DLdAKvu321OBBwYd9DRU5E8oVnk+YFLorFGBD9R3aUM0xgvctvCrSXR7JCZX8OZY8T2jNCouyb/Qd9i/0HfYv9B30Lz4tB8xGhM7r8CHyZTkDzkTbx0+pV5CHfe4fK+k6JfoFCy/e3vG/rm0J/bUcj+7cSvc24B7wSZU5oQ0U/h37W2+Y+RPkR6epYn4ztj/ZD+8iziQ+5K+7ub2f59fSDaT5B1dl8PLJ7y3uT5hr0zuWST++xwqcKfEWOtnV2eU5BnpUtod0sVvEjO5/uAMPTZU+4YfkHnt7UaAIe6b+075xmzNjcQc+rYZ5dHedX+SCfTPrjnNO4gT2wE7Z1xKYt0kWe8dxxHt31oljuF+m/tmPNrQf12upU7K9Rsb+Gsr/zkv19b0dD+80W8rSU7RMObbRHOPyE5TMSnwo27IFLeJE/smO6G2QB6fOtHc2+frfPckVKXKBN6ozhOfSNHn+AHqjrg/2KVbtqn7VIj9cCly/8GYxn0iV68xwQr0DhhWd6SbqKDVsKPfJjP/7OjsY2bX9VP4wpblPg3rlV1lDkCg59NwSdf7DPNZcAQ+3zX4BbEGgDrUXIbR1ueyEO/aCq+ayVmmKLx5aaXOYhrq3sQ8tDTZKHcYvtRgNNwNUdt9gK4bjdth23bZw/KRaj1r5i/8aYCQmHctuEw3O/JHnoL3I2GDN8ryfeeg6RPZh1PwE/PEe8P3At34FC/wvo8rN9PvTW8xn7l5aXWBfP0/Met6pwPbe/a8oh/f/xp5atW+Avw08t6EN7ZJ+aWvL9qhyg/fRjWkgH3vqZoX7CS6uBNX/nXFtVD2q5VsslnGe2ySVazaHlkth7XK2s5QnOI0j/qx0N/jntH+VxXtZ8SssFQq/9dIb2DUi21rbXzsWn56hCjqZX1f2i6YW+h2tZ9qY9cMyXyXgJ7viBdsfj3vmOr6q1DfAZJAq9Vn93iR5trsUl174oNyYcxhPHbFld/Jz2od2PmGelduAaANdiDeC6H5H2JuOTaW/eMhmeZL2zyaZ+hGv548HJ03F/kKfT7EGbTfKlPdwqlnj0fwNt+y49AqYXfgHR/ym087+/7LP4VaDIM3Qtv5zOLxkfeChzzWJ1LizW6RvFOr3Ijop1HQUXAw5j08C+fUd7IS/RIyD6hmUgZ9KBNbK+q8jvkPwVvZU5/ielWKGPFXpzPn8LPzvi3l3XVQ8yiT/OsW7iO3XE1TykhuN8mGVn/Wzazwab4uofBOyxHBAsAAA=","debug_symbols":"tZjRbuM4DEX/xc99kEhJlPIrg6JI23QQIEiLTLLAosi/Lxnz2kkBCwsv9qX3pB6fUhYlefI9vO9eL79f9sePzz/D5tf38HraHw773y+Hz7ftef951N9+D8F+xDZs+Gkg/ZA14rARDRo2TYOHTSyayTN7Fk/xrJ5tTA6e0ZM83cfuY/Ppn+PiKZ7Vs42Zgmf0JE/2TJ7uS+5L7kvuS+bTUebgGT3Jkz2TZ/YsnuJZPd1X3FfMVzXJkz2TZ/YsnuJZPduYEjzdJ+4T94n7xH3iPnGfuE/cV91X3VfVR0FTfRQ1k2f2LJ7qI9Ksnm3MFjyjJ3myZ/LMnsXTfNpsrXqaT/sghgCIAAKok8lApcwGGVAAAqiA5hDVzNUgOlinczPQ36RgQAAGJEAG6N9K0UDNyeqxJh8hAgjAgATIgALQmpNVaM0+QnOwdh8hAgjAADMngwwoAAFUQHOwxh8hAkyYDRIgAwpAABXQHKzzR4gAAsBcYLb2Tzan1v8jCKACmoOtgREiAI9X8HgFj1fweK3DkxjYJZtu6+kRCkAA1TvB+voGDb1hnT0CARiQABlQAAKAubmZQgBEAAEYkMfiyRo73X7THKyNrWayNh6BAAzQwnIwyIAC0MJyNKiA5kAwE8wEM8FMCZABBSCACmgODPNtXdTr9WnA8fNyPu12dvrcnUd6Sn1tT7vjedgcL4fD0/DX9nC5/aM/X9vjLc/bk17VAe2O75oq/NgfdkbXp/nusHyr7h3WSrfbdfsIeVK0/OCIyw6pMNSQpvsLPdxPy/dnyn5/zvMQdD/4twVUFhSQ21IBafn+ZM12uz+VuqqAmlBAq0sFlOX79bn7/YXKmgKaHSY3QeO8VEDtFFDRQxKWp6DXR2mqQHfiOCnyYyfGnoJLmhRxbiTdfx8dneegW7QrdDeZDBzro6HTjCIJzSDS5smg+mMkvOzgjGeR4p0h/DB0OlJ3o4iB6J637Mi9ZYWBZA7rDA3rqsS8bhxUUYTufrTOIXGaVOmNpP2/Dj2ksUj0mK7rHCIMhzRa52gBz1QP446ju1ynedH3nLK41qgzL0UCelSo8HxwPC426jSYlMlw90D1/WjVtpPr0rZD0ptWmbad0tpiFVR7y7VUtJe+Oy2egd1ZnfYdfSOSJQV3HoZEnCJyf4xlfjR0ts+5K3IM6wwxTJuOLBt6owjzKNqyodOYTA1FMN8dJMzl0ZF770XzQg13M8r5h6NzqteIp1k5LRs6vVmmp1m4LBq6r3fz+ghleQ/vKSJP255uG+sUZapC//uxSsHTWaS4ropMYd7zZJ2izNtmbesGMu/eTOsGwmnasTivGogkTIikskbQElZpy6sG0QLms9G6CqaeapL/4xB+Cp714/Ztf3r4dvBqqtN++3rY+cePy/Ht7ur57y9cwbeLX6fPt9375bQz0/wVo/74RfrlCRV6tu9m9KMusyddHPYx2tXCejU/X62YfwA=","names":["get_counter_value"],"brillig_names":["get_counter_value"]},{"name":"increase_counter_public","hash":"18312677802686599346","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1YS2/TQBBe14/ESapGwAGJP+E0bZNjkOgF8TjxA0xiV5H6UlteEkiWuMEBceGGVP4pdTXTfB5PDJV3VQ6MFO1jZr+ZndkZb9YzK/KoDcTYKDIzapN2NLKIlaiGNhHL/KI2pnYD+L7FzcZCr038abKzGyv7s2j/OCZMl/5hTAf4SYdwnhQrfLmXkjZpjGeI13SvfgOz6m9SPxZrXMTWoe+T+4r9rKtPe31H43L/Q+qnb49ens5PFtnjxeIsOz9Hn8lYNtFtMINbYD6UmC/eHB4u82V2tv9+eX5Rww4VbO5vGH1v0i6UQ9LOd0kzapN2NArFHh5QW8buU4MNnjUbJkls6jGyiH+TB6ET/L1txo+c4G/f+Kfjxv4543fd4OeMH7vBn3Dt7ZkVeeLs9mHeYg2cekKfMfVcRf09Yavt76En9LE90j9cb9h3A8XWocKTNWCg6BkoejSswCJWaBErsojVsYjVtYjFuShre0kzapOWxGcrAGyZlxi3u8hL1t8z9TPpIi9DYY/0j8zLSLF1qPBkXkaKnkjR8x/r38TaNPW89Na0xuh3ZqkHZfjMaXcvm/8RHOf5JF7jQ0v4I47DhuK7UudTmOefof36ytoQ+Ch/AJjPqb8lZDCGjuM28YTtvmmuV9od1eY7QlNuoQ9Yf9v8QV09U88fF98GbW++4mutbsi7VJsaJGvDXcQUfS3vUB1FXqt7/M7iF3Us5gXAiwQvLOo+Ke9ghbDnb+O2Zeqx4rWOfb0t6xPairFn/eVd8RH1b95B9o+WF6+Os+P52YfTi2zx7OTACJLPHSHMy1IWrFnjgzzSbZ57tBTXqA/yWNaa/jI1HUMMrQw72tRpWIc2N30CtOPNcny9D4rquhnNJ+1oWqbBV7BD+iMUNnVN3VcoL30bK/L490eWL3xaCASvqZRo6YC2YEnwFDuNqV4DXPp9Mk0S1skx52uGpAD4KP+Rxvj8wG3Qws58ko7ycZqnu+lisTNP7wl8Y6pPw7b1v85G2TjP83GW7uR7+R/183ynWPF94atr/1Gfc62L8oIXAy8oqvp7NA5AD2KxHaGQ/0LjLWojWMPrh4r+SOiv2K3M4bmWWL4yx/Ll2f9M/f4aO7E+lcR7RV9ECnYo5L+Bzu/Ul59q1FfKXTbIeWvaawxlLiiqc5qP8OywPOvuFXUbmdcHHtbOkgY0Rn8hFtsRCvmfNOaYYLx5/VDR3xX6K3Yrc/Ls9BX5viJfxucH41GLe7d9xb7WKfBxTtp2ybZf/X4Dg+K1d/QeAAA=","debug_symbols":"tZbdbuIwEEbfJddceMa/w6tUqEppWkWKAkphpRXi3XcMnwNUcrRdtDeccRIfeeyx8al5796On6/9+LH7atYvp+Zt6oeh/3wddtv20O9GfXpqTP4h16zdqiHfrKMiNGsyyqgkZQLlStY+xEoCGbSgAz0YwAgmUK608Fn4LHwWPgufhc/CZ+Gz8Fn4HHwOPgefg8/B5+Bz2eeVEUygXOkNSCCDFnSgB+Hz8Hn4PHwBvgBfgC/AF+AL8AX4AnwBvpi/C8r8XNct5udJKVcmAxLIoAUd6MEARhC+BJ/AJ/AJfAKfwCfwifpY60gimEC5kowpgRrZ5kBVnCvRuBL4EmSbz0EsQbrmTUYQkCkBlYBLYEvgSuBLkPOO5/OqKTvj9TB1Xd4Yd1tFN9C+nbrx0KzH4zCsml/tcLx89LVvxwsP7aRvNaFufFeq8KMfuhydV7fept6VrJXSnaxnPyvEPzhowWGYi8I4vhn4wcB1gxMTYXBCYTaExzxs3ZCcSzAkF1zNsJiFSMmCSGpZ+KezCP83C5/mtUjVtUgLBh9LFhSsrY1B6gbx1sEgKnsyC+JqFgt1ncT5MpMSuVbVSzuDEpUxsLmthf+WxVJRplDmgag6Da4u8MZZGDS8jcFa/oEjmtmR6B8dUjLxujZ1x99NBpvqZCwJ5jyEq2VJS3UZuVSVRC81xVJNcJgPS06mVhNMTx8SzM+fEksLqofDvKB3o/hRUdw7+FtRbLTZbvvp4ep3zrKpb9+GDs2P47i9e3v4vS9vytVxP+223ftx6rLpdn/UnxeysqJgNnoPyy1dXLJpk/+dc1MrgdjlJl3eem3GzTkP7Q8=","names":["increase_counter_public"],"brillig_names":["increase_counter_public"]},{"name":"public_dispatch","hash":"1405692916758442223","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"4380117533340202029":{"error_kind":"string","string":"Function remove_from_counter_public can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10176877060487216746":{"error_kind":"string","string":"Function add_to_counter_public can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"remove_from_counter_public","hash":"890680258057988597","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4380117533340202029":{"error_kind":"string","string":"Function remove_from_counter_public can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZndaiM9DIbvJcc9GNuSZe+tLKWkbboEQlqy7Qcfpfe+UqzXkxTGdKfsSfTkZx4sW/6ZzPvmcXf/9utuf3x6/r358fN9c3/aHw77X3eH54ft6/75qJ++byZ7ifoabjYxtBBbSC1QC9xCbkFaKC3Uc0hqYQ1qKRrMYp+aJmokjyayn5nJfmeqqrF4rC2S2uKkMXiMHpNH8sges0fxWDzWFtl97D52H7uP3cfuY/ex+bS9bL6s0Xxys8mTx+AxekweySN7zB7FY/HoPnGfuE/cJ+4T9SXtv6K/T9pvdfIYPEaPySN5ZI/Zo3gsHt0XJhNWgwCIgAQgAAMyQAAFUB0CzAHmAHOAOZhZDBiQAQIogOpghdsgACIgAWCOMFsR02QggAKoDlbMDQIgAhKAAAyAOcGcYE4wE8wEM8FMMBPMBLOVN0UDMyeDAqgOVuINzEwGEZAABGBABgigAKqDFXsDM7NBBJjZ6scKvgEDsoPVNtkoW3GzpWPV3SABCMAAvZyDgTaDLfcyAQIgAhKAAAwwj3VLEUABVAebTQ0CIALMbLnbjGrAgAwQQAHUBtGmVQMTskECEIABGSCAAqgONpsaBADMAWabTZwNGJABAiiA6mCzqYF3b4wRkADevfG82ouBfVUMCMCADJBWAPE8Hc5QHWgCBEAEJAABGJABMBPMBDPDzDAzzDYLzo23WcDnTwqgeput5hsEQARow/JkQAAGaMPyeaMUQAHALDALzAKzoDMFnSnoTEFnigAKAObzvCgfHzcbbPJ3r6fdzvb4i11fzwIv29Pu+Lr5cXw7HG42/20Pb+cf/X7ZHs/xdXvSbzWh3fFRowqf9oed0cfNfPW0fKlIiX510eW+Cyp/1aDrbEUDdIWNvOSIA8cU0Qrduy5aEa8MadlAdRI3UA25G/J1T9CyoZCtga0nKNOSYZhFrchC976lLPK3s5B/mwWXPhZlcSzqwMCCLHTbSUttCIOiqpzIFVVt30xDTxtLaYwKW9fprtAVOi8VdhjUJU8Fk0OxLPbFqDDZzuFtSDlNS4pxJjnOmZTFaR6+X5vh+8X59TEptGLBEkFfSA39ep7+/voylaXrYxgkEYh7aco8oHo0u3YMyltKQl2JFsjiBBmUpuSI5UpyXizNSMNMauqpcMwrhvSiOwOtGI4SqddU+t71ebEcYhl0Ak0BfUBRloezjhoxb8NpWpwZaZTHVPoyoTc4i4phYeaprxPa/LRmhqZMvTcuBlRvZK7bkUYbSHaFnsa7IYVybaBRUVGvbalzZ8TyqTd42ZEYfUEXy53eKFwbBkumHtlRGXpor8uOwZrJfZJerv1/ZahYt3PgdXnEgkbo/URc55DQB1UGmVD4tw692+2n1SxlnUOkr3pS4zpHnfphscZlx2iqUR8W/b8gL041GgxLlr54id4vzdvp9VwjGe0j3XDRn59Xv+mLp//Mq7oi9O1Q96SyTjGfkfRPiVWK1Kea4rpWcJzmMZV1ijyXRanrEpmLM8V1iSSi+a5wVSJC/aBGeY2g9nNW5VVJzEfeGte1oNdUFf5mCp8Ft/p2+7A/XT0o+DDVab+9P+z87dPb8eHi29f/X/ANHjS8nJ4fdo9vp52Z5qcN+vIz6q19CuHW/ibWt5JvyvmN/n/xM+ljghTo9sOa8gc=","names":["remove_from_counter_public"],"brillig_names":["remove_from_counter_public"]},{"name":"sync_notes","hash":"7676451098643319720","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTPQ+CMBCGi2KUjzjgoD+jBAyM+LG4OLpXCkpUSAB3frqQXENtwKjAJU17FJ5736OVUB0SzDLqEAyyglmBecTtj8vhQY67hakIdfvku9i2lQZ/Peq3FGBKw/Ax4w/UfzwFzr6o+bwXVndWDo1b66g+H0P5Z/9vSP+LD5418GpAXnmew/oS5Nt74t+Oz8c5SNnXTR1EgnIxdK5CSd0lcZ4SP99QmgZZJhJGDWTUQlU56pVE8YG26fmRdgrSLEpikSZ/Sav6yu6lXLyr8eA57hCOizHTMAb+BDV3X+b2+feXkKuCJ+bT+1Nn6BAztEhI1oRS2yeGwK+CP38vlizs4eEFAAA=","debug_symbols":"nZPfioQgFIff5Vx34f+0VxmGwcoGQSycWliid18bdKYWXJa58WSe7+tX6Qq9aZf7zfphfEBzWaEN1jl7v7mx07Mdfby7AtoHTKGhFWAGDY+FQ1PHIqBR21ZB7r/NwZi9/SCI2kkH42do/OJcBV/aLc+mx6T9s846xFVUgfF9rFE4WGf2q61606iMYsSZSDhGAvGXQvGTA5cdtcwGidiLF+TEkzLPCU885+9XwLT+bwBJ6xyAq1IAVuYZVYlnQn4UQLIcQMlSAFHm43dPvCDikwCKkCRQlJcCyD8CyLyHavTrF1zjVHc2nLb2tquC1a0zaTosvjuszt9TXslHYwpjZ/olmN10OB9xvGBZEXrd9qf9AA==","names":["sync_notes"],"brillig_names":["sync_notes"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"SimpleLoggingUpdate::add_to_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLoggingUpdate::add_to_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleLoggingUpdate::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLoggingUpdate::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"SimpleLoggingUpdate::decrese_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLoggingUpdate::decrese_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleLoggingUpdate::get_counter_value_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLoggingUpdate::get_counter_value_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}},{"name":"return_type","type":{"kind":"field"}}]},{"kind":"struct","path":"SimpleLoggingUpdate::increase_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLoggingUpdate::increase_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleLoggingUpdate::remove_from_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLoggingUpdate::remove_from_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleLoggingUpdate::sync_notes_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLoggingUpdate::sync_notes_parameters","fields":[]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"SimpleLoggingUpdate"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}]}},"file_map":{"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract SimpleLoggingUpdate {\n    use dep::aztec::prelude::{Map, PublicMutable};\n    use dep::aztec::{\n        macros::{storage::storage, functions::{public, initializer, utility, internal}},\n    };\n    #[storage]\n    struct Storage<Context> {\n        counters: Map<Field, PublicMutable<Field, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor() {\n    }\n\n    #[public]\n    #[internal]\n    fn add_to_counter_public(counter_id: Field) {\n        let new_counter_value = storage.counters.at(counter_id).read() + 1;\n        storage.counters.at(counter_id).write(new_counter_value);\n    }\n\n    #[public]\n    #[internal]\n    fn remove_from_counter_public(counter_id: Field) {\n        let new_counter_value = storage.counters.at(counter_id).read() - 1;\n        storage.counters.at(counter_id).write(new_counter_value);\n    }\n\n    #[public]\n    fn decrese_counter_public(counter_id: Field){\n      context.emit_public_log(/*message=*/ \"pub log\");\n      SimpleLoggingUpdate::at(context.this_address()).remove_from_counter_public(counter_id);\n    }\n\n    #[public]\n    fn increase_counter_public(counter_id: Field) {\n      context.emit_public_log(/*message=*/ \"pub log\");\n      SimpleLoggingUpdate::at(context.this_address()).add_to_counter_public(counter_id);\n    }\n\n    #[utility]\n    unconstrained fn get_counter_value(counter_id: Field) -> pub Field {\n        storage.counters.at(counter_id).read()\n    }\n}\n","path":"/home/filip/c/chicmoz/services/event-cannon/src/contract-projects/SimpleLoggingUpdate/src/main.nr"},"60":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_FIELD_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: Field,\n    da_gas_allocation: Field,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"62":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"88":{"source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_data_type().map(|typ: (TypeDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"91":{"source":"use crate::macros::utils::{\n    add_to_field_slice, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_SLICE_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args =  &[];\n    // serialized_args = serialized_args.append(aztec::protocol_types::traits::Serialize::serialize(target_address));\n    // serialized_args = serialized_args.push_back(fee_juice_limit_per_tx as Field);\n    // ```\n    let serialized_args_slice_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_SLICE_NAME = &[];\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append = add_to_field_slice(SERIALIZED_ARGS_SLICE_NAME, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_SLICE_NAME,\n            )\n        }\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"92":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"95":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process. This is slightly inefficient and could be improved by only doing it once we actually\n    // attempt to read any.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"98":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"137":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"139":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"153":{"source":"use dep::protocol_types::{address::AztecAddress, traits::{Packable, ToField}};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"155":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"164":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"200":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/home/filip/nargo/github.com/noir-lang/poseidon/v0.1.0/src/poseidon2.nr"},"219":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"262":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"280":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"318":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"332":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        let len = fields[0] as u32;\n        let mut index = 1;\n\n        for _ in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[index];\n                index += 1;\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let len = self.len();\n        fields[0] = len as Field;\n\n        let mut index: u32 = 1;\n\n        for i in 0..len {\n            let item = self.get_unchecked(i);\n            let serialized_item = item.serialize();\n\n            for j in 0..O {\n                fields[index] = serialized_item[j];\n                index += 1;\n            }\n        }\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"336":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"353":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"356":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/v0.87.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}