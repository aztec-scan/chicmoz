{"noir_version":"1.0.0-beta.1+4ca7394b2efd7aef","name":"SimpleLogging","functions":[{"name":"add_to_counter_public","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10176877060487216746":{"error_kind":"string","string":"Function add_to_counter_public can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_to_counter_public"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZ227aQBBdsI2xiYHCH0TqWyvZhOsbUi/5DpTAF/QD/NCX9qvLih37MExUJGaisFK0Zmd95uyZ2Ys3HXcq/eNfJzzHoe65y0J9tqEubyuVIlZpybNzJzy7d8IzuhOesSLPjsDT1zTfEneac6k7zcemEV/yAY7gJfc/AHD2N9RZqLtgVwxIlQmD1MJfl/OXzJ0XZf5PWcBMbfAXhN+3wS+J97e6xcexkN8o1M91q+UzvONLEZ4xeQmXbF2wfWe2CGw/mA1z+CezYd4TJ9KtB2NRzKu1dVxobCmMrfNG7VyrHbaR1rkzzdGKYp4xPpw/8SmoT93y6TFbDLaM2RKwkf6+foR+PPYp9PsK7TwnI3eZw2SnmKPWFjkVG+Afy1zSncckrs99ow11j0HPR6aPxV6B+ljo7/WZvsGfnn1Ja9eUiOmJGpFmfezPbBnY4vrcTx5+x+AHsYhHwvp/Cb9Hoe7BO/T+WPDfY/7PeAttqBHHioQ26u/n5OfwPHCn/PlN/d3lOqV3mF7OpTVbD3/V4Gc2/A+En9vgLwl/YIPfnGUeTPBnJeEXNvw3hD+0yZ/mLDmy4b8n/LEJ/nxP++4n15ZmfQjPE2jXW7ur6pozEfrPGVerM9GE8eH64P7rbVOB61iw8RhOBT9TwY+ElSliPShijT7oGPuKWANFrKEilmYcU0UsTb1yRaxCEUsz7zX1ojhK5zRftqEubyzSOU0Rv5LOaZrf7qQ15VcsaIjjS1j/X0zngQnPakZ7Ds118oG+CyPf1+7X5L8Q+BDvXLDdchm7X6wPm/ViczySVcvZpolnwbjyNvwmwvUY+0t7v3TuU9S6lL77h6CrLzHYCmZLwEYcpe/+oRH/a/RH/2PBxvf/a2M5cZf74YCNG++4tipjbu//pLt54/Vrce3cJP+5u1yv3+t+EfXhZ+lc4DoWbPx8kgt+csHPPWLxO3rU0Oc16RTXrV0rlqt1+48tWosSd37v75j/hPX/E37j2Ki+Zc0/rHbV4Wl32C12r6/zl92E4fvSBZ3+Ab+1O0oNHwAA","debug_symbols":"tdfRioQgFAbgd/HaC49aZq+yLIOVDYJYWC0s0buvDbO7w8zl8N8EJ06fIf7I2dngu+16CWmcFtZ+7CxOvVvDlEq1H5x1OcQYrpfH10ycD6tu/cvs0lkuq8sra5XkzKeBtVqUr8cQPWtrefCXRvPbaMxfYyWPT86sRsEVCq5RsEHBDQq2IJiEgMkEkyVMVjBZw+QKJtcw2cDkBibDMkiwDBIsgwTLIMEySLAMEiyD9F4Grbo3lm19oQ2ObnC0hdFS4GjC0RJHKxytcXSFo3FplLg0SlwaJSiNR6m+XA6ui/4+M41b6h9GqPV79k/T1Jyn3g9b9udc9T9SnYdYaa717RYvBZX/I2XKImWhHw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10176877060487216746":{"error_kind":"string","string":"Function add_to_counter_public can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["public_dispatch"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VTvQ6CMBBu+YmCMqiJbia+QREMjCbuvkMDMuqAixuPLjXX9FKbMLQ18Uuaa+Hy/ZSDEgUKNSIWkCQHqAnUAL0Px3WGM7NDnmi6LvlrVhaJIZ9D/x9+6sm/gOT3dP9sBjyXQfHjLFJ3Pq4UzYSvzPKb+cy8mci5+kHOEcdM08aghmehoYci3zvYZ4Y+iQVR/3Q0uM9V1YxJvRD4Y/LtHevHWv8WzqnmX9TIwmdX8bwreMdPvG3Lhq81foEA3dM/z8Ie9lOzgDMuiZqN/nVvro/nrScTECRvfuFT84YGAAA=","debug_symbols":"nZLLCoMwEEX/ZdYuMvHV5lekSNQogZBIjIUi/nujSGuLm2QzcId77uos0IlmHmqpezMBqxZQpuVOGu3TsibQWKmUHOrzG8h2EPf+NHK9xclx64ClNAGhO2AZ8XQvlQBW0PWRANLAfhrYzwL7eVifXu4jIbfyQJAgZh8K03zH8jisiMPKOOwWhaV4jWFZfLF7/outPj65lbxR4pCsn3V7cs69RvGn32hNK7rZik3Ek4P+VlgmlPpZP/0G","brillig_names":["sync_notes"]},{"name":"increase_counter_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1YS2/TQBBex7ETJ40awQUJid/gPNqktyDUG4IDgruJbRSpL/WB4IDkIxeQkLiBxAFx4YYE/49utdN+Hk/SlO6mILGStd7d8Tcz3+yOd9dTF8UzdZ21lSAzMXV8vdKziBWLhi4qJPPL1JGpazDuW3Q2Ynpt4o/j4TAS/LNo/yAymC75IUwH+HHD4DwoLvC5L7p0TBvnEH3TPH3api9ici7i6ZDv+LZgP+nSfr5lfPjAhzenVqocPyo1xhlPMhNLPnVVdQ7VV+DHv+xDYN+HvuQD6Vk7fbrmPXm5+/hgup9m99P0MDs68phfkv1SuQpmcAXMOxzz0cnOziyfZYfbr2ZHxxXsUMCm95qSfeN2oRwWKT/qMjF1fL3SC5gP90ytc8H7BTZ41mwYxXxO2sXvn+OHTvA3p4TfcMPPBuE33difE37kBr9P+C03+CPKj/SPJh04d9eg3+L/dLxM/kX9LWar7f2Ux/SRPZwfyjfEXUewtSuM8RzQEfR0BD0SVsMiVmQRK7CIFVrEalrEorW4aG8h5eWbWDukv6Wqc9DF2gkEXn2BV+IuFGztCmO4/8Ux1BMKev5j/Z1YHdamcakmPbyP60E7Sd71GdnxOh9J+y+b65biIJ3rtc4n0E+PMv76wrcBjKP8AWA+M+/rTAZjKJ17bfLqMdt98AfnJD/7NdzYM1i0tpAD0n/dcy3qWtW/QfJN+jesKgfdZEyRa76XawjyUt6jPYlfVLForA5jIRsLiionep/0gdmzbNzWVTVW9K1jrvs8P6GtGHvSr/fpd837+V3F9u7s+Oletjc9fH1wnKUP918oVviVBF5BzEtl0jVGTZVNJZOWvZKRlrhU9LFlmTTrKCznaZa23/N+Gw0YR/kTU+v2Z+a/tEykYxq3AeXRbz6NcYk2F3yHS0G6bnDBZwR8SXwi3yj/xtTIp5RGPPBHl3rhxJ+xtuML2MH5DJhNUgylVMR5QnmMDf9N4FGYp2UptaC+kGFJ21Fpu0W4uN1yyftoHMekk2IeqDKPiukPmPw708ZrKQV+T/7QznyU9PJBkicbSZoOp8kthq+Au7YD/c+zXjbI83yQJcN8M79UP/U3iotxn3F1xp95p7XWRHk2FsFYvSjrb5l2HfQgFtkRMPlPpr1u6hC+oe+7gv6Q6S/ZLfThvOZYvtBH8nrufzTvLuKajbfSeCvPkl6v10/j7LK4SjxhftSFuMZYhIJvAZP/Cj5/M+98S4b6tNzPBXLenPoMQ+irF+U+KUY4d0medLeKqo001oYxzN26rJk28oVYZEfA5H+YNsUE5xt93xX0N5n+kt1CH5+7bUG+Lcjr+HwnPFOj77aPUmc6GT72cdto7uh5/RsllbLkwCIAAA==","debug_symbols":"zZrbjuIwDIbfpde9iGM7iXmV1WrEoYwqIUAcVloh3n1bNO2yFHU1HtLxDSJgu1/bv7/TNpdiVS3O72/1dr07FrMfl2KzW85P9W7bjC7Xslgc6s2mfn+7/7lw7Qf4W/xxP9+2w+NpfjgVMwjiyqLarpqv0bmmwrreVMUs+OvPsgBU5JAihxU5QZETFTlJkSOfz/FOkQOKHIUOvEIH/rM6KIfBznEX7Dz3wSJPgokofgQTceiDIzwJTthXTujhPrhF5xegJ98FN+zToYcXoBP0Rz3856gDhz44QBxHF5QuWAjpET2+FB3cP+jtBlLuDUjmDaDCI1DhEajwCFR4BCp6BSp6BSp6BSp6BSp6BSp6BSl0QAodkEIHpNABKXRACh2QQgek0AEpdEAKHbBCB6zQASt0wAodsEIHrNABP9VBhK5lR+Rxm06ha9hJ/HjTo8Spa+6JpQ/2gjeUaAcl2UERMyjB2UEBOyjeDgraQSE7KGwHxY7bBjtuG+y4bbDjttGO20Y7bhvtuG2047bRjttGO24b7bhttOO2aVLZJu5RJAxQpjxBAt3jJBLvBiivO0HiHh9FppSzuGQsLi5ncchZ3OcsjjmLU87inLN4yFk85xUqOa9QyXmFNm+GslaHrNV91uqYtTplrf7l65T7F0yOxlujcN+lJUAYoAQ7KNEOSrKDImZQ4LkZJeqmaXf1n6K88AUwwKT3iqMzXYApZ93isZ/qIgxZyBALG2IJhliiIZZkiEXssHj3TSzkhixTPqIbv5UG7w2xoCEWMsTChljsPAYCHw2xJEMsYocFnSEWQ76LhnwXrfjutRn+mh/q+WJTfawMX5+3y7uF4qff++phzfj+sFtWq/OhaleP/1043uoOWEpIrtnHdg+BuATm211YO8RQAsFtonL71zdDahgajj8=","brillig_names":["increase_counter_public"]},{"name":"get_counter_value","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VaP28jRRSfjb3+m7X3fMmdEA0dEkho17EvSWc4GhokEEKiXOLNcQIS4YQOIYsWiZKeho+BRAMVEl+ChpKOjswxz/7557drJ96JYCRrdue9ef/fm5kdB+bfFrifbXUY4yZjE9cnu7W0QlpJoMhZqoQ24Q330HbvewCvVah4W5GlKvonyWjcNus6Vyj/UdvR9GkfoemBftJ0dJ7Ol/RZF9sis5ocOKd189sHPNveBnoyx6etbnw98myr9KEpto+1wc/u2dqi556f5ddvfXZ59um7X37+cT7jTENJtXFslupgSfXp5cX1LDu7fnM6neVXV0yhrHgx1Q5Q/SR7fvHOlKmFd6P2YT67en55wdQaW1ITfzZhbOL6ZLeWSjy3SDbki7Wpypqh1V2OBOTfIVmrjuuA+Ik8bB+Je7FdR5E1VmBNeEYY8ukofDRa7CO04aQaeySRWbcH80WZKvTFaNvYEP4d4zVW0zKfoX04NrqKrLECC+i5q/DpKnzui1bfFMf6XeMZ5wteW5k3cX1yuzbkAfaJ8Ea++zBeYfyMt41n4d8x677wEc/7JE9RbIjtIkXWWIFxDEYKn0jh83+iJTF6X7kRKfOCgl748FjZmtImfVAGrgnaGtku4dNV+JStL3fVR5O5LO9vy8dznUg0e+2THlGFevQIZ1KxHpgvPeLd92PDodCP/dBfnEUf+KF/JH7G85XEgD0zvAfj9ienktAscxHn9gGO+F8BzQ/cc1+ZHxXww7MV4vcK+H3kerFfw4/9kgHQNcTL83eK84hsjk1gGJdc2zGmuE6iXlzbHgIM/cWNT9RoC3vG+RXoMp40LUZ4LQwVPQTWUPTQ1qOy2h4SDOtlma9tm7g+2a2lWo1DXiiLbTWS3Sj4LQUf7SV1QPMBn+GxLmiy4bO815X5Wk4L/heut7z7warcyAPjLlLGBLet8K5ybdhmnUT+HZK16rWEayraD+0jvrP+l1i/ur6cZc/y9/Nsyu4MFZUQjo1dL2P8vkfvAb03FTplLVDolqkeKHJpyx2nCOouc60JeXn62vU23X5yz56XqqHIJ6W9aAlvABzxv3G9Tb9BsGonrfRon7FYBsRHvQVfK/EDgmklvk+4XDpxGasrtLUyJPjful78dQBzfG8tDkiHAeig2fEB6SD4P7re4n5HNsP5vNSiTLzU4raA/YByR2S/R8aL/Y7ERo/BBjVF1kdkI8H/3vUY7yJ7bb6cj1sA2+pzL/qMrByHIId9PDTLFgJf1MuYpd6Izzn5WMFH34jNYsLn/MR3pIU2jwlfbNgowOftheD/4Hprm9eDVflwe3dIsuP2bkCwrsJX234dgMz3U8PTIW/PsWnbc97yYx7ylv8QYLzlxzi47ZZfbHHbLX8VdSgifv+VvBU/2MZ5izlaU/A5b8vyHPcosVn3Jcc35swBwbbNmZhgGC/iG8yZspqxp9DVPlmEQFc+Wfj06/HJ8j8fElOyvnCrAxzxf3HvaHPp6zvIeX6cpedH2Xk2zqbT0VnG+wgDtrN+w2t0z3vQlK+Xq17zhb6na9vFtQ6ud8LL2uw3GEcY7j1wbhPgiP8H0PzdPWt74YBgZXtotjnC0F6yH/Z8JT8qu2IQ3p6upLa+IhP+HbNeH30czbXrUzxb3dPVwEjk0a6stKske87omXWfoXxCC89bZZ/r+C8IjS1to61lDYKhj3kN1D41CgxjpEkw1EvyqWv0HKuRbmKHojrRInzt012o6BsS/T9db+GRM4J2Bcd1RftUKjDOUYSh/7mu9GjexL0nu7VF7OJVhGYjPt8L/l+u175zyBxjyvOBZUB81Dske+FeqU/28nSFtTgnxxvsxVc7gv93ib00/bWrW5YB8fsl9kJb4lzmzbbl60HfsbjJthyLi/Oxs+embxD4lxbb6nMv+oy1swyuESHwLcoX7S8PZf7X8iUmfPS3VuP5r3LalaNW4/nKCGs8XpNGZJNN+8Oq9/zJcHr2JB/eHEuOn6TD0+mmPX/V/POT02lyep5naZoOp0m+ib/4qjFfwjGebWu6d/m2yfhCLyT8lxwBa++XKWdChZ/Fe60ELyjoX9BQxurz1bH2fB2/Nl/HF96d+bqMAusCDHPNtn33jvZCWiJHSPivwj7AthbMkfmxwr9F/FfkVsb4arSr4HcVfOufV9wkiVvUvep9+AueRB/HWDaJHR95NRpnx2fZcZqejtJ8lI435dU/WkfzuVQzAAA=","debug_symbols":"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","brillig_names":["get_counter_value"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"log_plaintext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/92caVPbMBCGHbABB0LC0fukNy1tHZKQpCctve8L+jlTyJ9oP7j9E7T/tnlBSzZCnaGDNOWtZzxOvMruo7Usr6VVCtH2ttbbC+ZzbI6j5ojz09HgJmWXzTHb31b1qCsLxVggYBwiYBwmYIwJGBMCxhECxlECxjECxpSAsUjAOE7AOEHAWCJgnCRgLBMwVggYpwIwhuCcJuGc8cipY/tQvLPRwW+jhwgYDxMwHiFgPErAeIyA8TgB4wkCxpMEjKcIGE8TMJ4hYDxLwDhHwHiOgPE8AeMFAsaLBIyXCBgvEzBeIWCcJ2C8SsB4jYBxgYDxOgHjDQLGmwSMGQFjlYBxkYCxRsBYJ2BsEDAuETA2CRhbBIxtAsZbBIy3CRjvEDDeJWC8R8B4n4BxmYDxAQHjQwLGFQLGRwSMjwkYnxAwPiVgfEbA+JyA8QUB40sCxlcEjK8JGN8QML4lYHxHwPiegPEDAePHAIwhOD+RcK6ScK4F4ow+W9BDvR0Lt7AwCguPsLAHC2ewMAULP7CwAgsXsDAAifdIbEfieKW3I/EZScVI2EUSLJJMkcSJJEkkISLJD0l0SFJDEhiSrJDEhCShs719rrcjiQRJGkiCQJIBJvExSY5JaEzyYhIVk5SYBMQkGyaxMEmEWmGSA5MIGKTHIDgGmTGIi0FSDEJikA+DaBikwiAQBlkwiCGDBHjJxUskXtLwEoSXDATxCJIRhCLIQxCFIAVBAB6yeIjhIYFOGJ0cOhHcpLgB0LjWoj9v0kh+mGNqjkNK7nERXTW17PrU38randRRP4/8tdToHAuiv9EU/WkY/kwW2q7kff26LmJ32BxX874vV/NBJimzqcpsWmWkPmGud70W1l/VxZLlo0jVRWwXw9iuFSx7+rpomdgvRiHb5vaiZG1PeGz/SN9RkjJ5n6dgyeJ8dz1EliiZXF/YmVfl7LY1ZsmEBZu035LyjWxrRibXNFY6/bXX0Pd3Pft37bVe/R/ba2zJ4nx3Pf62veq2ZbfXJOpv0peKbETJflqyUSX7lfdt1825sP3w9nNX32++n1szDn5tC9to3veBtLthdS5RPtvyjy5vyVIli/NBO0XzPVZ2tC7hSKzyNfO9bI4j6jfy+4rD/ohlf4Dbcc72S+oonzrKo30tmM+Ir9F+vkn5aPe9in3ZfM/2tS21Xf2iP/3Nmqvv88i/IfrHg+iv7+ifCMNfF/2lMP7f0T8Zhr8r+sth9C+J/koY/Q3RPxVE/+JOXKD/XMeOC2bUeY9x7J7jArFftFhDxQUzFo/tHx0XQDbrYK04ZHYfMOuwM+uw49I16VHXlEddxQNax5JHXRWPulKPunxexwmPunz6q+xR15hHXT7bvU9/yXUMOz6VZa44LQqgvxhG/07fL320fhfTdRL7iVX+q+XniSB+7o87SX+mfeGKpXza3uvzWuyXHDzCXXTI9vOHZxuNVrfdarR7IX11abGdFSz9wmqf0+9Eun/R5V3Pflfc59HXmWvMoaz8ii1WsklLliiZMOoxB1dc7JN/L/7X9isOmd0/7/VaTkeDbU3fj+NR/36Oc/91b7a2/8hli9HoT6LBMcXIsp9Y5b+b73Zft997pNvsVLu1TrfT6Kyv1790pi392ofw02+mXHNgmVMAAA==","debug_symbols":"tZbLCoMwEEX/ZdZZOFOtrb9SSokaJRCiRC0U8d8bpQ9p13cTuGFyZnXCnak25dTerG+6gYrLTK6r9Gg7H9O8KCqDdc62t/01JevBSbI9GHrt1zyMOoxUHESR8TUVaRKfN9YZKo6yqL/B/D2Y55/BTJarimSGkQVGPsDIKYycwchHGDmHkU8w8hlFZpiDDHOQYQ4yzEGGOcgwBxnmIMMcZJiDDHNQYA4KzEHBOLjEdNfB6tKZV4FoJl/t+sT46M1PtehDV5l6CmYtGd9+sbqcssp4+0FjYEkVyzkuiYue","brillig_names":["process_log"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"SimpleLogging::increase_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLogging::increase_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleLogging::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLogging::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"SimpleLogging::add_to_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLogging::add_to_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"SimpleLogging"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}]}},"file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"51":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"62":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract SimpleLogging {\n    use dep::aztec::prelude::{Map, PublicMutable};\n    use dep::aztec::{\n        macros::{storage::storage, functions::{public, initializer, internal}},\n    };\n    #[storage]\n    struct Storage<Context> {\n        counters: Map<Field, PublicMutable<Field, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor() {\n    }\n\n    #[public]\n    #[internal]\n    fn add_to_counter_public(counter_id: Field) {\n        let new_counter_value = storage.counters.at(counter_id).read() + 1;\n        storage.counters.at(counter_id).write(new_counter_value);\n    }\n\n    #[public]\n    fn increase_counter_public(counter_id: Field) {\n      context.emit_public_log(/*message=*/\"pub log\");\n      SimpleLogging::at(context.this_address()).add_to_counter_public(counter_id);\n    }\n    unconstrained fn get_counter_value(counter_id: Field) -> pub Field {\n        storage.counters.at(counter_id).read()\n    }\n}\n","path":"/home/filip/c/chicmoz/services/event-cannon/src/contract-projects/SimpleLogging/src/main.nr"},"71":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"73":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"99":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"123":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"125":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"135":{"source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::deserialize_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"138":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"141":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"149":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"192":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"234":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"251":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"280":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"293":{"source":"use crate::meta::{derive_deserialize, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"297":{"source":"use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"314":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"317":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/home/filip/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}