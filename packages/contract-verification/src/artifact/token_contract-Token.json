{
  "transpiled": true,
  "noir_version": "1.0.0-beta.1+3f8376928465907d",
  "name": "Token",
  "functions": [
    {
      "name": "_recurse_subtract_balance",
      "is_unconstrained": false,
      "custom_attributes": ["internal", "private"],
      "abi": {
        "error_types": {
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "14111519877593195750": {
            "error_kind": "string",
            "string": "Function _recurse_subtract_balance can only be called internally"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "account",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "_increase_public_balance",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["_increase_public_balance"]
    },
    {
      "name": "process_log",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6753155520859132764": {
            "error_kind": "string",
            "string": "Failed to deliver note"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "8861757336002045335": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              },
              {
                "kind": "field"
              }
            ],
            "length": 99
          },
          "9862881900111276825": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "field"
              }
            ],
            "length": 35
          }
        },
        "parameters": [
          {
            "name": "log_plaintext",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "tx_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "unique_note_hashes_in_tx",
            "type": {
              "fields": [
                {
                  "name": "storage",
                  "type": {
                    "kind": "array",
                    "length": 64,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "len",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "std::collections::bounded_vec::BoundedVec"
            },
            "visibility": "private"
          },
          {
            "name": "first_nullifier_in_tx",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "recipient",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": ["process_log"]
    },
    {
      "name": "transfer_to_public",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer_to_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "is_minter",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "minter",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "boolean"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7Z3dbts8DIbvJcc9kET99laGD0V/siJAkBRp+wFDsXufk9VyGgnxJGpdCr0nRdKQJv1YFilZpt4WD8u718eb1eb79nlx/e1tsd7e376stpvh29vPq8XdbrVerx5vjv+9EPs/3h/kn59uN/uvzy+3u5fFtbRWXS2Wm4f9R6eGI3xfrZeLazt8TIWFMKOwUCYKS2Uz0lpr9y6ttbFROuiMsKd4aE9KHgv/d7UI1MB3H4UH5z/R9xbctYzc7Rx3aWyUttKd9z1QGIWDJn3i+2CtqfNSfHR+b0LKv28i/HUTSrNN2CDGNmeDopnrJuKRg/Dm9Lqp0jPeK5GuUaqxpF2FklE5JUNE70qGjJy7ipbiVZQTYml9TtrbUTj4KEtS/nbHXZQ7Vl6WO/ai3HGXRcddFh1/WXS8uSx3wkW5E/RlueM/2x0zuqOO0ri9O5nMTKtR2Gs3ZTfK5/ygeGStxCSby7HUcBlGL5RU54VNdMIodyw68FOCwI/Fz4Efh59U4Mfih/bH4qfQ/nj80P5Y/EiCH4ufAT8OPy3Aj8VPgx+LXwA/Dj+D8dssPytGFlYm/JC/sPhZ5M88fhb85vhFWftRdM/P4/5l8QsYf/D44f7l8COB9sfjh/bH4ifR/nj8MP/C44fxL4ufwvwLjx+en7P4EeZfePwwfmPx05h/4fFD/pxCMXgolIGCTDcDBelrCsUiJ8hAQaKZQnGI3hkoCMkpFI95qgwUhOQMFITkFMrnv7XwFaAgJCdQtEBIzkDBLE0KBa8u5KAgeUuhKMynZKAgeUuhEFpKCqXTNa6KJijanEJxfQ4InQyjF46oWvhAsM8OqISgtNP5WX+6eFX7PnurlgT7HII1JBj6DA4tCfY5uCsi6Nx4YOnCaSw2nc4ZtCTY57CxIUGJWMwlqEGQSRDZDJNgp+UoWhJENsMkSGiDXILIZpgEOy1L0ZKgBkEmQWQzTIIGkYRLEJGESdAiknAJIpLMEgwylg4PKiXY55K8hgQd2iCXYINsRno/Wjh+Ip0nqEwY/VH2iGH20M6Oew84PwGU7rfvnr6w71+Ye4viJv/Id/sHhUWsnvOdQuwx7EcTGXfIj4d2WnzYyiQjLON2ME593LMl54egqesS1h6LH87Vffq5uulcZTjvvolcrJg6PFL+4PsfrKK8XN+/MPdO56hIRC9I6pMgaXWfi6pmoKClpFCMBpQUSp/jnPNQOh0+z0BBS0mhuE7XOU85PwkzM8gVcUQ8nKpPCPb58LchwU7fMy4iKI9GY0YmBPtMlxoS7PRl3ZYE+wyv7Qi6TvdFKyNo43bMwyzfKcFOKzMWEdRiLA0/fEzaYKe1GRsS7HQpW0uCyGaYBDtdylZE0Kh4fsaIhGCfL2o2JNhpQceWBBGLmQQ7rYrYkiBGdUyCnZYWbEgQ84NsgpijZhIMGNVxCaIN8gj6TvetKiPo4oJUE1RCELGYSbDTvataEkRGzSSIWX42QcwsMAlilp9NELGYSRBz1PMEaXpBiej0OYnHHDWbIGIxlyBiMZOgRSzmEkQsZhJ0iCRcgshmmAQ7LY3ckqAGQSZBZDNMgnjSxCaIbGaeoHaRoD190hQ6LS7dkiBm+ZkEOy2N3JBgp1tAtSSIMQmTYKebS7UkiH6Q9zZEIIxJmAQ18kEuQYxJmAQNYrE4rbAoRX7e2cUCX05TohOya7iGm/xdZ0Cd6pgKnVCsI/PvQM/oZFeWni86MVx/VaVla7SUrNKqskVVtqjKlq6ypatsmarrZaps2arzsqZKK9Ro5ev2zGpV3SleFfcxMl+RJIhxe9GgUp2Kfknl51nO2lGSKnRcuU7+rp/RKe9nVX6MNaNTYUdThY4v1zEVdkyFnfy6gWDGdh2cSnVcuY6rsJN/ljejY8p1QoWdUGNnLhdIdUjo4mtKojznIFlhJ79p1oyOK9eh8nuBtKjQKe8PhnS7QseW69gKO7bifGxF23EV18cVtoOfw7f/b3er27v18nnQ2P/4url/WW03719ffjyNv9ztVuv16vHmabe9Xz687pY36+39/reFeP/zTXl9NYwlDjn68FUGc6WEOITg4eu+XiAJP1gdLP8C",
      "brillig_names": ["is_minter"]
    },
    {
      "name": "burn_public",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["burn_public"]
    },
    {
      "name": "private_get_decimals",
      "is_unconstrained": false,
      "custom_attributes": ["private", "view"],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "14575960922920780690": {
            "error_kind": "string",
            "string": "Function private_get_decimals can only be called statically"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_store_payload_in_transient_storage_unsafe",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "point",
            "type": {
              "fields": [
                {
                  "name": "x",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "y",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "is_infinite",
                  "type": {
                    "kind": "boolean"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
            },
            "visibility": "private"
          },
          {
            "name": "setup_log",
            "type": {
              "kind": "array",
              "length": 9,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBRJgAABAMmAgYEDSYCBwQAHxgABwAGgEQdAIBHgEcBLQiARAABLQiARQACLQiARgADLQiARwAEJwIABQSASCYCBwQJLAgBBiYCCAQKABABCAEmAwYEAQAoBgIILQQABYADLQQACIAELQQAB4AFJAAAAJ0sDAYFJAAAAOMkAAAA6ycCAAEEgFEmAgIEADoNAAEAAgEAgAOABYAHLQCAA4AILQCABIAJCwCACIAHgAojAIAKAAAA4i0BgAiABi0CgAaACQEAgAgAAoAIAQCACQACgAkiAAAAsSUnAIBDBAADJSQAAAOCLAgBBwAAAQIBJgIIAQAsDggHLAgBBwAAAQIBJgIIAAAsDggHLAgBBwAAAQIBJgIJAAIsDgkHHgIABwAeAgAJADI4AAcACQAKJgIHAQEjAgAKAAABSiQAAAOrHgIABwEeAgAJAAo4BwkKIwIACgAAAWYkAAADvRwMBAcALAgBBCYCCQQEABABCQEmAwQEAQAoBAIJLAwJCiwOAgoAKAoCCiwOAwoAKAoCCiwOBwomAgIEASYCAwQALAwDBiIAAAGwDSgABoBDAAcjAgAHAAADPyIAAAHFJgIGAAMAOAEGBywIAQEmAgYECgAQAQYBJgMBBAEAKAECBiwMBgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJACgJAgksDggJLAgBBgAAAQIBLA4BBiYCAQQJLAwDBCIAAAJSDDgEAQgjAgAIAAACxyIAAAJkLA0GBSwMAwQiAAACcQw4BAEDIwIAAwAAAoQiAAACgyUcDAQDAAA4BwMGJgIIBAkMOAQICSMCAAkAAAKlJAAAA88AKAUCCAA4CAQJLA0JAy8MAAMABgA4BAIDLAwDBCIAAAJxJgIJBAkMOAQJCiMCAAoAAALeJAAAA88AKAUCCQA4CQQKLA0KCCwNBgkmAgsECQw4BAsMIwIADAAAAwckAAADzy0EAAmAAycAgAQEAAokAAAD4S0IgAUACgAoCgILADgLBAwsDggMLA4KBgA4BAIILAwIBCIAAAJSHAwGBwAAOAEHCSYCCgQDDDgGCgsjAgALAAADYCQAAAPPACgEAgoAOAoGCywNCwcvDAAHAAkAOAYCBywMBwYiAAABsCcAgAQEeAANAAAAgASAAyMAgAMAAAOqKQEAAQX3ofOvpa3UyjsBAQIlKQEAAQW+Hj//PqT2+jsBAQIlKQEAAQXrVzkD6KB2gzsBAQIlKQEAAQXonQn+oREtDjsBAQIlLQGAA4AGCwCABgACgAcjAIAHAAAD/CIAAAQHLQCAA4AFIgAABG4tAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAAEWi0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAAEKScBgAUEAAEDAIAGAAKABiIAAARuJS0AGMoYyg==",
      "debug_symbols": "1ZvhTuMwDMffpZ/7IY7t2OZVTic0YKBJ00BjnHRCvPuluy2DbS2ilM79MrWb3fz6T2M7WfNa3c1vXh6uF6v7x+fq6tdrtXy8nW0Wj6t89vpWVzfrxXK5eLh+/3UVmo9IYevw/DRbNefPm9l6U11BSrGu5qu75lBivsT9YjmvrlJ8+11nJ+rjZD2cuE9LrD2cUuzjJD2cpE9Lkno4aZ/OVe7hZH1asq92bn1qHALvjUPkYgwxnbEmItlZE3Eq1kZnjBXLpRUjvDfewtsA8FqMM/148BiGUJ6gKJ8+Ux44FesE0g1vaHtjI6RjeIiDwkP4CL9tQn68icg/3gSGbzdBKe6byIf22UMnsTx0Ksf9ht+/4yHHQJ/Mh9QjOCJjH6ezSSwy2t4rJ0fAbr1EBXfWoordeuVwFMqItsOwi6ZnrPMY2RkjxQ+2DX3CSdPLlOnP1xeToZ+09jpp7XXS2htMmp4nTE8hTJqeJk1vU6bHYSImpkLP2k0vTLQ3ZuKjupC4pXQh1gLEkI7qNWqr1z5xayuUqNxQcwkZsPOipn1/RNXD7WP83yFtxc/liNoKmgsSudNI3Wmk7jRqKxAuSMTOiLgtkV+QiNwRmTci8JZFGNQbUfQWITl6i5CM3iIkY/JGRO4iJLnLIuQuQrK7LMLuIqS7uQi7m4uwuIuQ4i5C2vhjzVKZZVuyY6IEo+f+/N9TWfUIQidEcZiYPdiyRyIaHSiVTpMkegJk4wMxdgDxBRQq62z50E6AzBlQ8qbQQCtHAwKJMyD1ppB6U2igVaMvAaEVIAvdxgBAh7eI4GNe2vKLI/4MJDB+CWV2SMbhJBkLJG9E0Z1G0bwRIbkjcqcRudOIdPxSHA9EqCdE7G1yICzeiJI7jSS4I2JvRAruiNQbkaE7InNGpIHcEbnTCLw9RwresojiMG/oDbbGpG3/Lv0kUNcak9IFFOqa/SolZ0DsTSE2Z0Btq3CXA/KmkHhTSHR8oAHXmFTJEf/vt3z2Z7ZezG6W890O2PuX1e27DbGbv0/zo72xT+vH2/ndy3re7JI9bJBtZhmgVkcI+UabHB+1Rs3HsP1JqAax5hS2lqEGjZkgU/wD",
      "brillig_names": ["_store_payload_in_transient_storage_unsafe"]
    },
    {
      "name": "balance_of_private",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "lo",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "hi",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "std::uint128::U128"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "",
      "brillig_names": ["balance_of_private"]
    },
    {
      "name": "constructor",
      "is_unconstrained": true,
      "custom_attributes": ["public", "initializer"],
      "abi": {
        "error_types": {
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "name",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "symbol",
            "type": {
              "kind": "string",
              "length": 31
            },
            "visibility": "private"
          },
          {
            "name": "decimals",
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBICFJgAABAMmAgUEQCYCBgQAHxgABgAFgEUdAIBGgEYCHQCAR4BHAh0AgEiASAIdAIBJgEkCHQCASoBKAh0AgEuASwIdAIBMgEwCHQCATYBNAh0AgE6ATgIdAIBPgE8CHQCAUIBQAh0AgFGAUQIdAIBSgFICHQCAU4BTAh0AgFSAVAIdAIBVgFUCHQCAVoBWAh0AgFeAVwIdAIBYgFgCHQCAWYBZAh0AgFqAWgIdAIBbgFsCHQCAXIBcAh0AgF2AXQIdAIBegF4CHQCAX4BfAh0AgGCAYAIdAIBhgGECHQCAYoBiAh0AgGOAYwIdAIBkgGQCHQCAZYBlAh0AgGaAZgIdAIBngGcCHQCAaIBoAh0AgGmAaQIdAIBqgGoCHQCAa4BrAh0AgGyAbAIdAIBtgG0CHQCAboBuAh0AgG+AbwIdAIBwgHACHQCAcYBxAh0AgHKAcgIdAIBzgHMCHQCAdIB0Ah0AgHWAdQIdAIB2gHYCHQCAd4B3Ah0AgHiAeAIdAIB5gHkCHQCAeoB6Ah0AgHuAewIdAIB8gHwCHQCAfYB9Ah0AgH6AfgIdAIB/gH8CHQCAgICAAh0AgIGAgQIdAICCgIICHQCAg4CDAh0AgISAhAItCIBFAAEnAgACBIBGJgIGBB8sCAEFJgIHBCAAEAEHASYDBQQBACgFAgctBAACgAMtBAAHgAQtBAAGgAUkAAACgiwMBQInAgADBIBlJgIGBB8sCAEFJgIHBCAAEAEHASYDBQQBACgFAgctBAADgAMtBAAHgAQtBAAGgAUkAAACgiwMBQMtCICEAAQkAAACyCQAAALZJwIAAQSAhSYCAgQAOg0AAQACAQCAA4AFgActAIADgAgtAIAEgAkLAIAIgAeACiMAgAoAAALHLQGACIAGLQKABoAJAQCACAACgAgBAIAJAAKACSIAAAKWJSgAgEMAO5rKACcAgEQEAAMlJAAAC64sCAEHAAABAgEmAggBACwOCAcsCAEJAAABAgEmAgoAACwOCgksCAELAAABAgEmAgwAAiwODAseAgANADU4AA0ADgAPACYCEAEBIwIADwAAA0EiAAADNCwMCAUsDAoGIgAAA04sDBAFLAwOBiIAAANOIwIABQAAA18mAhEEADsJARE1OAANAAUAEQIjAgARAAADgiIAAAN1LAwIDiwMCg8iAAADjywMEA4sDAUPIgAAA48jAgAOAAADoCYCDQQAOwkBDSYCDQQAJgIOBAEsCAERJgISBAIAEAESASYDEQQBACgRAhIfPAANAA4AEgAoEQITADgTDRQsDRQSHAwSEwQcDBMRACYCEgRALAgBEyYCFARBABABFAEmAxMEAQAoEwIUHzwADgASABQmAhQALCwIARUmAhYEQgAQARYBJgMVBAEAKBUCFiYCFwRBADgXFhcsDBYYDDgYFxkWDBkZIwIAGQAABFEsDhQYACgYAhgiAAAEMiwIARQAAAECASwOFRQsDA0FIgAABGcMOAUSFSMCABUAAAsfIgAABHksDRQSLA0SEwAoEwITLA4TEioCABMAAAAAAAAAAEEAAAAAAAAAACYCGAQZLAgAGSwMExoAEAAYACQAAAvXLAQAACwMGhQsDBsVLAwcFiwMHRcsDRQTACgTAhMsDhMULAgBEwAAAQIBLA4UEywNFRQAKBQCFCwOFBUsCAEUAAABAgEsDhUULAgBFQAAAQIBLA4WFSwIARYAAAECASwOFxYmAhcEQSwMDQUiAAAFJgw4BRcYIwIAGAAACq8iAAAFOCYCFwQYLAgAGCwMExksDBQaLAwVGywMFhwAEAAXACQAAAx+LAQAACwMGRImAhMADSwIARQmAhUEBAAQARUBJgMUBAEAKBQCFSwMFRYsDhMWACgWAhYsDhEWACgWAhYsDhIWLA0UEQAoEQIRLA4RFCoCABEAAAAAAAAAAAMAAAAAAAAAACYCFwQYLAgAGCwMERkAEAAXACQAAAvXLAQAACwMGRIsDBoTLAwbFSwMHBYsDRIRACgRAhEsDhESLAgBEQAAAQIBLA4SESwNExIAKBICEiwOEhMsCAESAAABAgEsDhMSLAgBEwAAAQIBLA4VEywIARUAAAECASwOFhUsDA0FIgAABj4NKAAFgEQAFiMCABYAAAo/IgAABlMmAhYEFywIABcsDBEYLAwSGSwMExosDBUbABAAFgAkAAAMfiwEAAAsDBgUCjgPFBEjAgARAAAGkCQAAA0CCjgGCg8eAgARAQo4BhESEjgPEgYjAgAGAAAGsSQAAA0UCjgBCgYKOAYIDyMCAA8AAAbIJAAADSYmAgYAAS8MAAEABiwIAQ8mAhEEAwAQAREBJgMPBAEAKA8CESwMERIsDgwSACgSAhIsDgESKgIAAQAAAAAAAAAAAgAAAAAAAAAAJgIUBBUsCAAVLAwBFgAQABQAJAAAC9csBAAALAwWDCwMFxEsDBgSLAwZEywNDAEAKAECASwOAQwsCAEBAAABAgEsDgwBLA0RDAAoDAIMLA4MESwIAQwAAAECASwOEQwsCAERAAABAgEsDhIRLAgBEgAAAQIBLA4TEiYCEwQCLAwNBSIAAAeYDDgFEw0jAgANAAAJzyIAAAeqJgINBBMsCAATLAwBFCwMDBUsDBEWLAwSFwAQAA0AJAAADH4sBAAALAwUBQo4BQoBCjgBCAwjAgAMAAAH7CQAAA04LwwABgAFJgIFBBEsCAARLAwCEiwMEBMAEAAFACQAAA1KLAQAACwMEgEmAgIACCYCBQQRLAgAESwMBxIsDAkTLAwLFCwMAhUsDAEWABAABQAkAAAOVSwEAAAmAgIEESwIABEsDAMSLAwQEwAQAAIAJAAADUosBAAALAwSASYCAgAGJgIDBAwsCAAMLAwHDSwMCQ4sDAsPLAwCECwMAREAEAADACQAAA5VLAQAACgCAAEAO5rKCi4MAAEAAgo4AgoDIwIAAwAACLkkAAAPhycCAAIA3q0vDAACAAEcDAQBACoCAAIAAAAAAAAAAAEAAAAAAAAAACYCBwQILAgACCwMAgkAEAAHACQAAAvXLAQAACwMCQMsDAoELAwLBSwMDAYsDQMCACgCAgIsDgIDLAgBAgAAAQIBLA4DAiwNBAMAKAMCAywOAwQsCAEDAAABAgEsDgQDLAgBBAAAAQIBLA4FBCwIAQUAAAECASwOBgUmAgYEBywIAAcsDAIILAwDCSwMBAosDAULLAwBDAAQAAYAJAAAD5ksBAAAJgIHBAgsCAAILAwCCSwMAwosDAQLLAwFDAAQAAcAJAAADH4sBAAALAwJBiYCAgAKLwwAAQACJgIBAAsvDAAGAAEeAgABADMCAAElIwIADQAACdwiAAAKMSYCFAQCDDgFFBUjAgAVAAAJ8yQAABDIACgPAhQAOBQFFSwNFQ0mAhQEFSwIABUsDAEWLAwMFywMERgsDBIZLAwNGgAQABQAJAAAD5ksBAAAIgAACjEAOAUODSwMDQUiAAAHmCMCABYAAApMIgAACqEmAhcEAww4BRcYIwIAGAAACmMkAAAQyAAoFAIXADgXBRgsDRgWJgIXBBgsCAAYLAwRGSwMEhosDBMbLAwVHCwMFh0AEAAXACQAAA+ZLAQAACIAAAqhADgFDhYsDBYFIgAABj4jAgAYAAAKvCIAAAsRJgIZBEEMOAUZGiMCABoAAArTJAAAEMgAKBICGQA4GQUaLA0aGCYCGQQaLAgAGiwMExssDBQcLAwVHSwMFh4sDBgfABAAGQAkAAAPmSwEAAAiAAALEQA4BQ4YLAwYBSIAAAUmLA0UFQA4BQ4WDjgFFhcjAgAXAAALOiQAABDaJgIYBEAMOAUYGSMCABkAAAtRJAAAEMgAKBMCGAA4GAUZLA0ZFyYCGQRBDDgWGRojAgAaAAALdiQAABDILQQAFYADJwCABAQAQiQAABDsLQiABQAYACgYAhkAOBkWGiwOFxosDhgUADgFDhUsDBUFIgAABGcnAIAEBHgADQAAAIAEgAMjAIADAAAL1ikBAAEF96Hzr6Wt1Mo7AQECJSQAAAuuJgICAAAsCAEDJgIEBAQAEAEEASYDAwQBACgDAgQsDAQFLA4CBQAoBQIFLA4CBQAoBQIFLA4CBSwNAwQAKAQCBCwOBAMsCAEEJgIFBAUAEAEFASYDBAQBACgEAgUsDAUGLA4CBgAoBgIGLA4CBgAoBgIGLA4CBgAoBgIGLA4BBiYCAQQAJgICAQAsDAIFLAwBBiwMBAIsDAUELAwDASwMBgMlJAAAC64sDQQFJgIGAQAKOAUGByMCAAcAAAyiJgIIBAA7CQEIJgIFBAYsCAAGLAwBBywMAggsDAMJLAwECgAQAAUAJAAAEXosBAAALA0BBSwNAgYsDQMHLA4FASwOBgIsDgcDJgIBAQEsDgEEJgIBBAAAKAYCAwA4AwEELA0EAiwMAgElKQEAAQX0gAGmWdMnQjsBAQIlKQEAAQUfAFASQCQi7jsBAQIlKQEAAQUFD4YEI+0WWTsBAQIlKQEAAQUC3G4ngHYSnTsBAQIlJAAAC64sCAEEAAABAgEmAgUAACwOBQQsCAEFAAABAgEmAgYAASwOBgUmAgYEHyYCBwQBJgIIBAAnAgAJAAEALAwIAyIAAA2SDDgDBggjAgAIAAANqSIAAA2kLA0EASUsCAEIAAABAgEsDgMIIwIAAgAADcMiAAAN+gI4BgMKDjgDBgsjAgALAAAN2iQAABLXAjgKBwsOOAcKDCMCAAwAAA3xJAAAEtcsDgsIIgAADfosDQQKLA0ICyYCDAQfDDgLDA0jAgANAAAOGSQAABDIACgBAgwAOAwLDSwNDQgcDAgLACwNBQgEOAsIDAA4CgwLLA4LBAQ4CAkKLA4KBQA4AwcILAwIAyIAAA2SJAAAC64BMIBDAAQABi4MAAYAByYCCAAACjgHCAkjAgAJAAAOfyQAAA+HJwIABwDerS8MAAcABioCAAYAAAAAAAAAAAEAAAAAAAAAACYCCwQMLAgADCwMBg0AEAALACQAAAvXLAQAACwMDQcsDA4ILAwPCSwMEAosDQcGACgGAgYsDgYHLAgBBgAAAQIBLA4HBiwNCAcAKAcCBywOBwgsCAEHAAABAgEsDggHLAgBCAAAAQIBLA4JCCwIAQkAAAECASwOCgkmAgoECywIAAssDAYMLAwHDSwMCA4sDAkPLAwFEAAQAAoAJAAAD5ksBAAAJgILBAwsCAAMLAwGDSwMBw4sDAgPLAwJEAAQAAsAJAAADH4sBAAALAwNCi8MAAUABCYCBQABADgEBQYvDAAKAAYlKQEAAQUfCi0n3IKHojsBAQIlJAAAC64sDQMGLA0EByYCCAEACjgHCAkjAgAJAAAPwSYCCgQAOwkBCgsoAAaARAAHJgIGBAEjAgAHAAAQVCIAAA/bLA0BBywNAggsDQMJLA0ECiYCDAQDDDgJDA0jAgANAAAQAiQAABDILQQAB4ADJwCABAQABCQAABDsLQiABQALACgLAgwAOAwJDSwOBQ0AOAkGBQ44CQUHIwIABwAAED8kAAAQ2iwOCwEsDggCLA4FAywOCgQiAAAQxyYCBwQILAgACCwMAQksDAIKLAwDCywMBAwAEAAHACQAABF6LAQAACwNAQcsDQIILA0ECSYCCgQALQQAB4ADJwCABAQABCQAABDsLQiABQALACgLAgwAOAwKDSwOBQ0sDgsBLA4IAiwOBgMsDgkEIgAAEMclKQEAAQXonQn+oREtDjsBAQIlKQEAAQVFp8pxGUHkFTsBAQIlLQGAA4AGCwCABgACgAcjAIAHAAARByIAABESLQCAA4AFIgAAEXktAAABgAUBAAABgAQAAQEAgAOABIAJLQCAA4AKLQCABYALCwCACoAJgAwjAIAMAAARZS0BgAqACC0CgAiACwEAgAoAAoAKAQCACwACgAsiAAARNCcBgAUEAAEDAIAGAAKABiIAABF5JSQAAAuuJgIGBAAmAgcEASwMBgUiAAARkg0oAAWARAAGIwIABgAAEgIiAAARpywNAQUsDQIGLA0DBywNBAgmAgkEBCwIAQomAgsEBQAQAQsBJgMKBAEAKAYCCyYCDAQEACgKAg0+DwALAA0sDQoGACgGAgYsDgYKLA4FASwOCgIsDgcDLA4IBCUsDQMGDDgFBggAOAUHBiMCAAgAABIdIgAAEs4sDQEILA0CCSwNAwosDQQLJgINBAQMOAUNDiMCAA4AABJEJAAAEMgAKAkCDQA4DQUOLA0ODCYCDgQDDDgFDg8jAgAPAAASaSQAABDIACgIAg4AOA4FDywNDw0AOAwNDiYCDQQEDDgFDQ8jAgAPAAASkyQAABDILQQACYADJwCABAQABSQAABDsLQiABQAMACgMAg0AOA0FDywODg8sDggBLA4MAiwOCgMsDgsEIgAAEs4sDAYFIgAAEZIpAQABBSiGkrBH3P1DOwEBAiUtABjKGMo=",
      "debug_symbols": "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",
      "brillig_names": ["constructor"]
    },
    {
      "name": "public_dispatch",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10502589790419500451": {
            "error_kind": "string",
            "string": "Function _increase_public_balance can only be called internally"
          },
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11795427120478775878": {
            "error_kind": "string",
            "string": "Function public_get_decimals can only be called statically"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "16541607464495309456": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 16
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16958085610837407363": {
            "error_kind": "string",
            "string": "Function _store_payload_in_transient_storage_unsafe can only be called internally"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17618083556256589634": {
            "error_kind": "string",
            "string": "Initialization hash does not match"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2186653215069968126": {
            "error_kind": "string",
            "string": "Function _finalize_mint_to_private_unsafe can only be called internally"
          },
          "2233873454491509486": {
            "error_kind": "string",
            "string": "Initializer address is not the contract deployer"
          },
          "2236649814169388962": {
            "error_kind": "string",
            "string": "PublicImmutable already initialized"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "364657447181031001": {
            "error_kind": "string",
            "string": "invalid admin"
          },
          "4856349594034274052": {
            "error_kind": "string",
            "string": "Function _reduce_total_supply can only be called internally"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "8359297168692325491": {
            "error_kind": "string",
            "string": "Function is_minter can only be called statically"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          },
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          }
        },
        "parameters": [
          {
            "name": "selector",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["public_dispatch"]
    },
    {
      "name": "set_admin",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [
          {
            "name": "new_admin",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgIEASYCAwQAHxgAAwACgEQtCIBEAAEkAAAARSQAAABGJwIAAQSARSYCAgQAOg0AAQACJSQAAACYHgIAAgAeAgADADI4AAIAAwAEJgICAQEjAgAEAAAAbyQAAADBJgICAAEuDAACAAMeAgAEAQo4AwQFIwIABQAAAJEkAAAA0y8MAAEAAiUnAIAEBHgADQAAAIAEgAMjAIADAAAAwCkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFsletxjiYg/U7AQECJS0AGMoYyg==",
      "debug_symbols": "5VXbisIwEP2XPPchc8kk8VeWZalapVBaqXVhEf99U7Gp1WJAdF/2pXTKmcyZM6eZo1oXy8P2q6w3zV4tPo6qalZ5VzZ1iI6nTC3bsqrK7df1Z6X7hzVn/H6X13247/K2UwsQwUwV9bp/tRhO2JRVoRYSXu/BWpsBrNFEMKDMoJnZXtDMRiLa8wzYUTzaEcI1+DNTTr+Au4vgQP4Pub9Cd4aou6R0ByMRLWAfc/fkB7Bn4hvunl7KHfSUe1/BvbtCUOztJQDmSjDYaCLwJlECyMcSMg4C7NyMLTm6oC1rfjxjC9H6Fqf+nOOhicZeRW4sEcj9n14RZ3tFPbiBEfzjXlkwggV96iaxGG8SZ+/o2JT0iBMn90mETySxfibJzKvl9ZBEOqFWYBsHQuxTznAkw7CdcQlnSDSdFa9TzgAe1wU4moziFKLvvC3zZVVc9u7mUK+u1nD3sytuNvKubVbF+tAW/W4e1zL0SqPLiM4/VwjIZuRDjVDnFw==",
      "brillig_names": ["set_admin"]
    },
    {
      "name": "transfer_in_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "private_get_name",
      "is_unconstrained": false,
      "custom_attributes": ["private", "view"],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "2111772463301017956": {
            "error_kind": "string",
            "string": "Function private_get_name can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "private_get_symbol",
      "is_unconstrained": false,
      "custom_attributes": ["private", "view"],
      "abi": {
        "error_types": {
          "1186437190978851533": {
            "error_kind": "string",
            "string": "Non-zero hint for zero hash"
          },
          "1589673740894288059": {
            "error_kind": "string",
            "string": "Hint values do not match hash"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18192277837884173995": {
            "error_kind": "string",
            "string": "Function private_get_symbol can only be called statically"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7764445047318889914": {
            "error_kind": "string",
            "string": "Public data tree index doesn't match witness"
          },
          "9199403315589104763": {
            "error_kind": "string",
            "string": "Proving public value inclusion failed"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "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",
      "brillig_names": [
        "storage_read",
        "get_public_data_witness",
        "field_less_than",
        "decompose_hint",
        "lte_hint",
        "store_in_execution_cache_oracle_wrapper",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "_finalize_mint_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2186653215069968126": {
            "error_kind": "string",
            "string": "Function _finalize_mint_to_private_unsafe can only be called internally"
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBKJgAABAMmAgUEBCYCBgQAHxgABgAFgEYtCIBGAAEtCIBHAAItCIBIAAMtCIBJAAQkAAAAVyQAAACZJwIAAQSASiYCAgQAOg0AAQACKgCAQwAAAAAAAAAAAQAAAAAAAAAAJwCARAQAAysAgEUAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAlJAAAD/IsCAEGAAABAgEmAgcBACwOBwYsCAEGAAABAgEmAggAACwOCAYsCAEGAAABAgEmAgkAAiwOCQYeAgAGAB4CAAoAMjgABgAKAAsmAgYBASMCAAsAAAD4JAAAEBseAgAKAR4CAAsACjgKCwwjAgAMAAABFCQAABAtLAgBCiYCCwQDABABCwEmAwoEAQAoCgILLAwLDCwOCQwAKAwCDCwOAQwsCAEBJgIJBAQAEAEJASYDAQQBACgBAgksDAkLLA4ICwAoCwILLA4ICwAoCwILLA4ICywNAQkAKAkCCSwOCQEqAgAJAAAAAAAAAAACAAAAAAAAAAAsCAELJgIMBAUAEAEMASYDCwQBACgLAgwsDAwNLA4IDQAoDQINLA4IDQAoDQINLA4IDQAoDQINLA4JDSwNAQkAKAkCCSwOCQEsCAEJAAABAgEsDgEJLA0LAQAoAQIBLA4BCywIAQEAAAECASwOCwEsCAELAAABAgEmAgwEACwODAssCAENAAABAgEsDgcNJgIOBAImAg8EASwMDAUiAAACMgw4BQ4QIwIAEAAADpgiAAACRCwNDQoKOAoHECMCABAAAAJeJgIRBAA7CQERJgIKBBAsCAAQLAwJESwMARIsDAsTLAwNFAAQAAoAJAAAED8sBAAALA0JCiwNARAsDQsRLA4KCSwOEAEsDhELLA4GDQAoEAIJADgJDAosDQoBCjgBCAkKOAkHCiMCAAoAAALGJAAAEZwuDAABAAkcDAkKARwMCgEAHAwBCQEjAgAJAAAC6CQAABGuJgIBAAQuDAABAAYcDAYJACoCAAoA/////////////////////w44CQoLIwIACwAAAx8kAAARwBwMBgoFHAwKCQACOAYJCgkoAAqAQwAGADgJAgocDAoLBRwMCwkAAjgKCQsJKAALgEMACgA4BgMLADgLCgYcDAYLBRwMCwoACjgKBgsjAgALAAADeCQAABHSBSgACoBDAAYAOAkGCi8MAAoAASYCAQADADgEAQYFKAADgEMAAQA4AgEDLAgBASYCAgQEABABAgEmAwEEAQAoAQICLAwCCSwOCAkAKAkCCSwOCAkAKAkCCSwOCAksCAECAAABAgEsDgECLAwMBSIAAAPqDSgABYBEAAEjAgABAAAONSIAAAP/LA0CCQAoCQIKADgKDAssDQsCACgJAgsAOAsPDSwNDQoAKAkCDQA4DQ4QLA0QCxwMCw0BHAwNCQAcDAkLARYMCwkKOAIIDQQ4CQ0QCjgKCA0EOBANEQo4EQcNIwIADQAABGYkAAAR5CsCAA0AKCXHnMaly77vfWqPG2oSsxKqM4RArv60OWFIyJFHwEkrAgAQABKb/R2lS3Bi1rVE5+NrkHNjUPb7oBIoxBxyCZUJ9XAeLAgBESYCEgQEABABEgEmAxEEAQAoEQISLAwSEywODRMAKBMCEywOEBMAKBMCEywOBxMcDAMQBRwMEA0AAjgDDRAJKAAQgEMAEhwMEhMFHAwTEAACOBIQEwkoABOAQwASBSgAEIBDABMAOBMNEAUwgEUAEgANADgQDRMKOAMTDSMCAA0AAAVAJgIUBAA7CQEULAgBDSYCEwQDABABEwEmAw0EAQAoDQITLAwTFCwOEBQAKBQCFCwOEhQsCAEQJgISBAQAEAESASYDEAQBACgRAhImAhMEAwAoDQIUJgIVBAIAKBACFkL3ABIAFAAWABMAKBACEQA4EQwSLA0SDQAoEAISADgSDxMsDRMRACgQAhMAOBMOFCwNFBIcDBIQARwMEA4AHAwOEAEKOA0CDgo4EQoSBDgOEhMWDBIUBDgOFBIcDA4UAAA4DRQVLAgBFCYCFgQEABABFgEmAxQEAQAoFAIWQT/AABUAEQAOAAIACgALABYAKBQCFgA4FgwXLA0XFQAoFAIXADgXDxgsDRgWLAgBFAAAAQIBLAgBFwAAAQIBLAgBGAAAAQIBLA4VFCwOFhcsDg4YLAgBGSYCGgQEABABGgEmAxkEAQAoGQIaQT/AAA0AEQAQAA0AEQAQABoAKBkCGwA4GwwcLA0cGgAoGQIcADgcDx0sDR0bIwIAEwAABskiAAAGuCwMFQEsDBYELAwOBSIAAAbaLAwaASwMGwQsDAcFIgAABtosDgEULA4EFywOBRgjAgAQAAAG8yIAAAcELA4CFCwOChcsDgsYIgAABwQjAgALAAAHESIAAAciLA4NFCwOERcsDhAYIgAAByIWDBACBDgCCQQEOBIEAiwNFAQsDRcFBDgQCwcSOAIHCSwOBBQsDgUXLA4JGDECAAQsCAECJgIEBAoAEAEEASYDAgQBACgCAgQsDAQFLA4IBQAoBQIFLA4IBQAoBQIFLA4IBQAoBQIFLA4IBQAoBQIFLA4IBQAoBQIFLA4IBQAoBQIFLA4IBQAoBQIFLA4IBQAoBQIFLA4IBSwIAQQAAAECASwOAgQmAgIECSwMDAEiAAAH1Qw4AQIFIwIABQAADdIiAAAH5ywNBAUsDQUEACgEAgQsDgQFLAgBBAAAAQIBLA4FBCwIAQUAAAECASwODAUsCAEGJgIHBAoAEAEHASYDBgQBACgGAgcsDAcJLA4ICQAoCQIJLA4ICQAoCQIJLA4ICQAoCQIJLA4ICQAoCQIJLA4ICQAoCQIJLA4ICQAoCQIJLA4ICQAoCQIJLA4ICQAoCQIJLA4ICSwNBgcAKAcCBywOBwYsCAEHAAABAgEsDgYHLAwMASIAAAidDDgBAgYjAgAGAAANMyIAAAivLA0HBCwNBAUAKAUCBSwOBQQsCAEFJgIGBAwAEAEGASYDBQQBACgFAgYmAgcECwA4BwYHLAwGCQw4CQcKFgwKCiMCAAoAAAkFLA4ICQAoCQIJIgAACOYsCAEGAAABAgEsDgUGJgIFAgEmAgcCACYCCQIJLAgBCiYCCwQGABABCwEmAwoEAQAoCgILLAwLDSwOBw0AKA0CDSwOBQ0AKA0CDSwOBw0AKA0CDSwOBw0AKA0CDSwOCQ0sCAEFAAABAgEsDggFLAgBBwAAAQIBJgIJAAEsDgkHJwIACQABACYCCwQFLAwMASIAAAmZDDgBCw0jAgANAAAMriIAAAmrLA0FBywIAQUmAgkEDAAQAQkBJgMFBAEAKAUCCSwMCQosDgcKACgKAgosDggKACgKAgosDggKACgKAgosDggKACgKAgosDggKACgKAgosDggKACgKAgosDggKACgKAgosDggKACgKAgosDggKACgKAgosDggKACgKAgosDggKLA4FBiwIAQUAAAECASwODwUsDAwBIgAACkMMOAECByMCAAcAAAwbIgAAClUsDQUEADgEAgcOOAQHCSMCAAkAAApwJAAAEdIsDgcFLA0GAiYCBQQLDDgHBQkjAgAJAAAKjyQAABH2LQQAAoADJwCABAQADCQAABIILQiABQAEACgEAgUAOAUHCSwOAwksDgQGLAgBAiYCAwQMABABAwEmAwIEAQAoAgIDJgIFBAsAOAUDBSwMAwYMOAYFBxYMBwcjAgAHAAAK/iwOCAYAKAYCBiIAAArfLAgBAwAAAQIBLA4CAyYCAgQLLAwMASIAAAsZDDgBAgUjAgAFAAALoyIAAAsrLA0DASYCBQQLBigFAgMmAgcEAwA4BQcGLAgBBAAQAQYBJgMEBAEAKAQCBiwOBQYAKAYCBiwOBQYmAgcEAwA4BAcGACgBAgctBAAHgAMtBAAGgAQtBAAFgAUkAAASlgAoBAIGLA0GBSYCBwQCADgGBwE2DQABAAUlJgIGBAsMOAEGByMCAAcAAAu6JAAAEfYAKAQCBgA4BgEHLA0HBSwNAwYmAggECww4AQgJIwIACQAAC+MkAAAR9i0EAAaAAycAgAQEAAwkAAASCC0IgAUABwAoBwIIADgIAQksDgUJLA4HAwA4AQ8FLAwFASIAAAsZLA0GBywNBQkAOAkBCg44CQoLIwIACwAADDokAAAR0iYCCwQJDDgBCw0jAgANAAAMUSQAABH2ACgEAgsAOAsBDSwNDQkmAg0ECww4Cg0OIwIADgAADHYkAAAR9i0EAAeAAycAgAQEAAwkAAASCC0IgAUACwAoCwINADgNCg4sDgkOLA4LBgA4AQ8HLAwHASIAAApDAjgLAQ0OOAELDiMCAA4AAAzFJAAAEtwCOA0PDg44Dw0QIwIAEAAADNwkAAAS3CwNBQ0mAhEEBQw4DhESIwIAEgAADPckAAAR9gAoCgIRADgRDhIsDRIQHAwQDgAsDQcQBDgOEBEAOA0RDiwODgUEOBAJDSwODQcAOAEPDSwMDQEiAAAJmSwNBwYsDQQJLA0FCiYCDQQJDDgKDQ4jAgAOAAANViQAABH2ACgJAg0AOA0KDiwNDgsAOAoPDQ44Cg0OIwIADgAADXskAAAR0iwOCQQsDg0FJgIKBAkMOAEKDSMCAA0AAA2aJAAAEfYtBAAGgAMnAIAEBAAKJAAAEggtCIAFAAkAKAkCCgA4CgENLA4LDSwOCQcAOAEPBiwMBgEiAAAInSwNBAUcDAEHAAA4BgcJLgwACQAHJgIKBAkMOAEKCyMCAAsAAA39JAAAEfYtBAAFgAMnAIAEBAAKJAAAEggtCIAFAAkAKAkCCgA4CgELLA4HCywOCQQAOAEPBSwMBQEiAAAH1SwNAgEcDAUJAAA4BAkKLgwACgAJJgILBAMMOAULDSMCAA0AAA5gJAAAEfYtBAABgAMnAIAEBAAEJAAAEggtCIAFAAoAKAoCCwA4CwUNLA4JDSwOCgIAOAUPASwMAQUiAAAD6iMCABAAAA6lIgAAD+QmAhEEAgw4BRESIwIAEgAADrwkAAAR9gAoCgIRADgRBRIsDRIQLA0LESwNDRIKOBIHEyMCABMAAA7oJgIUBAA7CQEUCygAEYBEABIjAgASAAAPdiIAAA79LA0JESwNARIsDQsTLA0NFCYCFgQDDDgTFhcjAgAXAAAPJCQAABH2LQQAEYADJwCABAQABCQAABIILQiABQAVACgVAhYAOBYTFywOEBcAOBMPEA44ExARIwIAEQAAD2EkAAAR0iwOFQksDhIBLA4QCywOFA0iAAAP5CYCEQQSLAgAEiwMCRMsDAEULAwLFSwMDRYAEAARACQAABA/LAQAACwNCREsDQESLA0NEy0EABGAAycAgAQEAAQkAAASCC0IgAUAFAAoFAIVADgVDBYsDhAWLA4UCSwOEgEsDg8LLA4TDSIAAA/kADgFDxAsDBAFIgAAAjInAIAEBHgADQAAAIAEgAMjAIADAAAQGikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFHliNg4M2Fv47AQECJSQAAA/yJgIGBAEmAgcEACwMBwUiAAAQVw0oAAWARAAHIwIABwAAEMciAAAQbCwNAQUsDQIGLA0DBywNBAgmAgkEBCwIAQomAgsEBQAQAQsBJgMKBAEAKAYCCyYCDAQEACgKAg0+DwALAA0sDQoGACgGAgYsDgYKLA4FASwOCgIsDgcDLA4IBCUsDQMHDDgFBwgAOAUGByMCAAgAABDiIgAAEZMsDQEILA0CCSwNAwosDQQLJgINBAQMOAUNDiMCAA4AABEJJAAAEfYAKAkCDQA4DQUOLA0ODCYCDgQDDDgFDg8jAgAPAAARLiQAABH2ACgIAg4AOA4FDywNDw0AOAwNDiYCDQQEDDgFDQ8jAgAPAAARWCQAABH2LQQACYADJwCABAQABSQAABIILQiABQAMACgMAg0AOA0FDywODg8sDggBLA4MAiwOCgMsDgsEIgAAEZMsDAcFIgAAEFcpAQABBQLcbieAdhKdOwEBAiUpAQABBQ0nddzG8hPbOwEBAiUpAQABBVoC5Bu1HqmfOwEBAiUpAQABBUWnynEZQeQVOwEBAiUpAQABBZI5Clk9Ye2EOwEBAiUpAQABBeidCf6hES0OOwEBAiUtAYADgAYLAIAGAAKAByMAgAcAABIjIgAAEi4tAIADgAUiAAASlS0AAAGABQEAAAGABAABAQCAA4AEgAktAIADgAotAIAFgAsLAIAKgAmADCMAgAwAABKBLQGACoAILQKACIALAQCACgACgAoBAIALAAKACyIAABJQJwGABQQAAQMAgAYAAoAGIgAAEpUlAQCAA4AFgActAIADgAgtAIAEgAkLAIAIgAeACiMAgAoAABLbLQGACIAGLQKABoAJAQCACAACgAgBAIAJAAKACSIAABKqJSkBAAEFKIaSsEfc/UM7AQECJS0AGMoYyg==",
      "debug_symbols": "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",
      "brillig_names": ["_finalize_mint_to_private_unsafe"]
    },
    {
      "name": "public_get_name",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "18105278452957613314": {
            "error_kind": "string",
            "string": "Function public_get_name can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQAILgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF+0Le07wSjQI7AQECJS0AGMoYyg==",
      "debug_symbols": "7VXBbsIwDP2XnHuIY8dJ+JVpQgUCqlS1qJRJE+LflyAaSheBxmCnXaq4es57eY7jg1j5xX4zr5p1uxOzt4Oo22XZV20TosOxEIuuqutqMx//FjJ+jD7hd9uyieGuL7tezIBZFcI3q7g0KuywrmovZhyW38FS6gEslU5gUJxBE5E5o4k0J7SjDNhi2tqigjH4vRBWPkG7TeAg/g+1P8N3guQ73/MdNCc0g7mt3aEbwI6QJtodPlU7yGvtkcG+miE49nIKgF9TsJPDjWOn8E7VZNrZSasnVQP46YljkoJHkh5hQnokyeWSQpti6lMnb1uMmgYG5HEVjc7VXNn02OEIrWSu6QzaQYghSbfLZyC9RUZdPxgZHSARL5ePeVpton9nMs4cQ/RRdlW5qP15OK73zXI0K/vPrZ+MzW3XLv1q3/k4QC+zE+L8Ua5AOrVXCFAXaAJH4PkC",
      "brillig_names": ["public_get_name"]
    },
    {
      "name": "burn_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "notify_created_nullifier_oracle_wrapper",
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "field_less_than",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "mint_to_private",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "transfer",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "10583567252049806039": {
            "error_kind": "string",
            "string": "Wrong collapsed vec order"
          },
          "11170287298796244984": {
            "error_kind": "string",
            "string": "Something has gone wrong"
          },
          "11499495063250795588": {
            "error_kind": "string",
            "string": "Wrong collapsed vec content"
          },
          "11553125913047385813": {
            "error_kind": "string",
            "string": "Wrong collapsed vec length"
          },
          "12099279057757775880": {
            "error_kind": "string",
            "string": "DST_LEN too large for offset"
          },
          "1433889167918961673": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 17
          },
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "15238796416211288225": {
            "error_kind": "string",
            "string": "Balance too low"
          },
          "15431201120282223247": {
            "error_kind": "string",
            "string": "Out of bounds index hint"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "16954218183513903507": {
            "error_kind": "string",
            "string": "Attempted to read past end of BoundedVec"
          },
          "1705275289401561847": {
            "error_kind": "string",
            "string": "Mismatch note header storage slot."
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2429784973622283587": {
            "error_kind": "string",
            "string": "Can only emit a note log for an existing note."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "5641381842727637878": {
            "error_kind": "string",
            "string": "Got more notes than limit."
          },
          "5672954975036048158": {
            "error_kind": "string",
            "string": "Collapse hint vec length mismatch"
          },
          "5727012404371710682": {
            "error_kind": "string",
            "string": "push out of bounds"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "6869395374906889440": {
            "error_kind": "string",
            "string": "Mismatch note header contract address."
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          },
          "7506220854563469239": {
            "error_kind": "string",
            "string": "Dirty collapsed vec storage"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          },
          "855401245733623969": {
            "error_kind": "string",
            "string": "Obtained invalid key validation request"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "get_notes_internal",
        "get_collapse_hints",
        "decompose_hint",
        "get_public_keys_and_partial_address",
        "lte_hint",
        "get_key_validation_request",
        "notify_nullified_note_oracle_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "call_private_function_internal",
        "load",
        "random",
        "notify_created_note_oracle_wrapper",
        "debug_log_oracle_wrapper",
        "compute_log_unconstrained",
        "compute_log_unconstrained",
        "directive_invert",
        "directive_integer_quotient"
      ],
      "verification_key": "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"
    },
    {
      "name": "compute_note_hash_and_optionally_a_nullifier",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "11091894166229312484": {
            "error_kind": "fmtstring",
            "item_types": [],
            "length": 20
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "8270195893599566439": {
            "error_kind": "string",
            "string": "Invalid public keys hint for address"
          }
        },
        "parameters": [
          {
            "name": "contract_address",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "storage_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "note_type_id",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          },
          {
            "name": "compute_nullifier",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          },
          {
            "name": "packed_note_content",
            "type": {
              "kind": "array",
              "length": 3,
              "type": {
                "kind": "field"
              }
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "kind": "array",
            "length": 4,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "public"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": ["compute_note_hash_and_optionally_a_nullifier"]
    },
    {
      "name": "mint_to_public",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          }
        },
        "parameters": [
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "5V3RbtwqEP2Xfc4DA8MM9FeqqypN02qlKKmS9EpXVf/92psY78bY1FOcYnipkobjOWewZwaM4efhy+3nH98+He+/PjwdPnz8ebh7uLl+Pj7cd7/9/HV1+Px4vLs7fvt0/t8H1f8DYE+Ap+/X9/3vT8/Xj8+HD0Ckrw6391/6H1l3l/h6vLs9fCD965+rDuQFII0SkMSSMRIQC0CoJSCJJQsSkKRzSUlAIktrO/dq2lgpOzRW2obGoCnSGhH5tTWipdDaY6SxM+HSzmg4b9yTZ8xA3oXGHfv3JJ/D8wjB85TyPFgKrQl4mbw3fmjs0eBb8o6zkgd1Sb434fXWJrRS25uIPpRk0LyiyBAsm0DSg4nuR5+66ViHm87xm37ToOJ0NAY6mFRMJigGMyom92LCbm/Cb25Cm+1N8OYmjN7exPYqELY3keGmBecGE931LkxMW2vrh+dUk0pcmmnIOuzGUAz8EmKs2jH3HfudzI65uyR38inuxodHii5NROgYNzyAjAqXkxhDKMpYX1ZOMR7KjM+2Inqb8+JV4qZaedQKiYRtg19IqdDU6Je4xH6/3N2O/e7Sfmd4M5bSnteDjIqn6G50MYDQ/VlyM4o3NwHbqwDa3IRW25vA7U34zU2Y7VUYt7kJzHDT/qUEbpD3y93u2O+kdszdJrn7SX5iJQGhBOQEIKclIBKAvMQRXuByVEoCQglI4HL8jVzveQJiAUiDBGQlIC8Axd9xpEASR6DE5SixZCUutxKX27jLrR6CI1lr3oIIJSCJJTYSEAtADiQgKwFJHOElLvcCS1YZCUjgcgu/4XI/AZEANDOkSIBQAnIC0MwEcQIkcQRKXI4SS1bicitxuZ1xOQ9VGJEyfzRGsTOTjFlN8OYmGLY3YTc34dT2Jt5Bhd/chM9w0/6lQZL1brfcSe3X7wSwY+6U5A4p7kaHR8qgvzARoePGmW7nxkvHX5BYVMOlz2uhfq474hZlBidqddE6dm30arh2N1IcXU7q5Ji5QqYBxzi/6Bj/7o4xFBxj3bJjmMJrFyavEl4EwHEJFVw6vddq4jmNAiEi0i0+HWiadczy04Hu3R3zt54OnlnH6wY+4Ec6BuCEiS9OSmDceowR2DECOyiwM7OCdxEzs4B3GUPrMTPLd8N0mD4rN3pMZBkf6qGxQx4rDu1iN7sJV0Y93o/RRaAa/PA2WmvQy41tIGE1nzc9ibQtiPQNiJxZRl2ZyBZ60rXQk66FnoxPodQmkusX6eILvGoTSQ2IjE9R1SaylrKOhhGmPfvAZhBZSwpZEqlrKQYWRbpKRIa2dNm0F4m13K5LIm0tFc+iyBZuV2qhJ6mFnuQWepJrGYUsiXS11K6LImsZhSyJ9LVMLi+KrGUUsiiygbLOK2xB5C6LgZ457HJ26sR8l2m7Z653mYtPzHcZlnvmZpdZ88R8lwH0xHy3URF3Oe45Md9tVLS7jYp2l8OOnvk+F6qcmO82Ku5zSUnPfJ/rRE7Md5uJ3G7rc7fbTOT36nNQJb+91WakfvZ1xkDdFFxzMQwrfjUbI278orPg52KNTqDxIzByMNGJBT9FOXXagmuorDoLDi1ZdRZcn63SyTxcGNhP423JFXRWnQXXfjl1ci3xNqWz4NF2Tp2ulryS0tlIHCp52XpOnb6R/vRt5BUoef16Vp1t5BWANvIKQBtxCKCROKQbiUO6lvmhhE5T8Pu+VTo9hA/8vY7orCWvJHRiI/1Z8vyQUYGFAZxQL3nKJ0V9v14veX15gnrJbx9T1Pfr9ZLfP6aoF5zs9Ljfm1E2kQRUyBj9DPJbnXMnx9Wns+CMsUonnJ0RZGGqs+D0klNnyYumc+osebCYVWct8RYonCELbhqHSl7Wukonhh0Bux+n/VnyItisOktep5RTZy15JaGz5E++V+m047aR1qqpzoInW3PqLPnD75w6S/4sOqvOWuqEhM6Sh85ZddaSV5Z1mmrGnwmdJb+UzaqzlrovoVM30p8l7zG2TieHlz7W66nOauLtss6SPzbOqbPkjxOy6qxl3iShs5p5k5TOavJnQmcj8baa+QQzLpowZjI/ZKqZT0jprCXeJnRWM2+S0llLvE3prCXeJnSWvK1+Vp1t5BVUbfQnqjbyCpa8xX5WnW3kFSx5o/11OpGDTprMg2HJG+Pl1GlqmTdJ6awm3i7rLHmju6w6q6mHlnWWfIhCVp1trAdDamM9GJZ8mGRWnW2sB8OSN9yb19lTtzP7kEE49Lf/jiqgZs4TNi4ctIxqbB0/TxjcQIi1huXG0G+UFogoovPmL/x9Dv7jQdFdDZ+gRCbcC2THxvGDopFwOCgaicbWfZCfNLaBhvVnZzj7F6WIrSidCY8VKmXVjFLXilJnClfqh1oTWb09jL6jX3pHLdP3hXufw7agXZpXU/qFe59DOu7o+7f0Kb4QzGo/0LcGzBQVjfddaaIDCvUEFT/jIImascUYUG6KwhlbYyAwHqaoaGdaDJOIFjVNUPFB7QXK4BQ1Y8sGhkhTFBkRasaWDydXWjW5tYmNBBV/9ZpAcXzCmcNTxDjZqZbjO1d4HNzu7aR65vh9kcCgAOPWY2x88nL5E1iemWpIoGYG7ikUSVAsssUiW05ky4lseZEtL+kvp0CEkuhyM4u9UygUoZwEpbUIxatjjIvvAuTVkHy8jmDWxyVncb2deAZZxpAWYGg9htfHWcd2PcYJ7Lj1sdnFq9QEZr0dr4wAE72vvR3ua8+ThX0z56olMAI78UpxGROvExMYgR0U2EnWAjGMX9+nFgUYgR3i9Zj4Ts4JjOBZcOvjgfdKgFkdr7WK5+MERmAHlACDAoxbj9Er74Nf3W//Xj8erz/f3T51iP6PP+5vno8P96+/Pv/3ffjL58fj3d3x26fvjw83t19+PN5+unu46f92UK//fESAq+6Nf9+H/a/QjSPBcP9r3znd3PmVUdxZ7Sz/Dw==",
      "brillig_names": ["mint_to_public"]
    },
    {
      "name": "sync_notes",
      "is_unconstrained": true,
      "custom_attributes": [],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": null
      },
      "bytecode": "H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==",
      "debug_symbols": "dY/RCoMwDEX/Jc99aLop6K/IkKpRCqWVWgdD/PelQ6Tb8CXcG04uuRsM1K1Ta9zoF6ibDazvdTTesdt2AV0w1pqpzdcg08Dbh19m7ZJdog4R6qIqBZAboC7lne9HY4m12sUfihKlOmDWqjpxvOIrPHmF8ot/7GyfOhjdWTqeH1fXZ13ia6afWnPwPQ1roFQw68azwUIoybEc/QY=",
      "brillig_names": ["sync_notes"]
    },
    {
      "name": "_reduce_total_supply",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "4856349594034274052": {
            "error_kind": "string",
            "string": "Function _reduce_total_supply can only be called internally"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "JgACBAEnAAABBIBGJgAABAMmAgMEAiYCBAQAHxgABAADgEQtCIBEAAEtCIBFAAIkAAAASyQAAABhJwIAAQSARiYCAgQAOg0AAQACKgCAQwAAAAAAAAAAAQAAAAAAAAAAJSQAAAFPHgIAAwAeAgAEADI4AAMABAAFJgIDAQEjAgAFAAAAiiQAAAF4HgIAAwEeAgAEAAo4AwQFIwIABQAAAKYkAAABiiYCAwAELgwAAwAEHAwEBQAqAgAGAP////////////////////8OOAUGByMCAAcAAADdJAAAAZwcDAQGBRwMBgUAAjgEBQYJKAAGgEMABAEwgEMABQAGAjgGAQUcDAUGBRwMBgEACjgFAQYcDAYFAAI4BAIGAjgGBQIcDAIFBRwMBQQACjgEAgUjAgAFAAABOyQAAAGuBSgABIBDAAIAOAECBC8MAAQAAyUnAIAEBHgADQAAAIAEgAMjAIADAAABdykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFQ2U4OcmGfwQ7AQECJSkBAAEFWgLkG7UeqZ87AQECJSkBAAEF5wWzRaIcieM7AQECJS0AGMoYyg==",
      "debug_symbols": "7VnbbuIwEP2XPPPg8dzs/soKVVxCFQkB4rLSCvXf10HECUlKdltDJcoLstGxz5zjydiJj9k8nx7eXovVYr3LXn4ds+V6NtkX61XoHd9H2XRbLJfF22vz78yUP2DsacBuM1mV/d1+st1nLyBiR1m+mpdNtWGKRbHMsxcJzS7YGK7AxnIEg5UeNBHpGU3EEtGeesAO49QOLTTB41EIXhME7yI4RH/H4CGF8wTReRlyHlgiWkCvB+/RV2BPSO3grUkaPJjL4E8UfHMKxNtTuC9TkNiKIjT9UNKpjUnntL1u9HXFKZ8B+l93ykGMnxgk8JlB0jfICll/HhXaTAMZAuhjhkgNBu17SBUdntFKhq67qxCLl9pLd/viMIh1qoq0F0PhR6nVb1CrtVoYeJBB0MTU5BqM1vXWCHKxRkiNFtMD5hgG+xoaAip9cfbpS48v1uDTl15f3NOXPl9Anr70+WLhsXzx8TCkjeNf8OUk9sGS4KpYfKyVVaQolkxH7GOtrMbDUhDr22KJ/kGsmOtiuS4hLIJtDrapObSzaKxJOJyPHL7jldg7cCTRoVgdpznkU5tDbRoOiBzc5UijQ2sdTtoczqbm8J3K55LocFAVHHa2w+HtHTjS6OC45k7aa47G3p4DzB04+AMOdZGDzdAGgDa+pGKj7n6wAbh6A3AOBzYAprgBMOPABhBeb2LY5gLdNzd5U81NHtppFDT9YGucv2qN+wZrUKI17Aa+sUg8kah4M+AjANUfz+HS9vF76P2ebIvJdJmf7yEWh9WscS2x/7PJWzcUm+16ls8P27y8q2heUwTbmEdixuWX89ARHYkPHIHnLw==",
      "brillig_names": ["_reduce_total_supply"]
    },
    {
      "name": "balance_of_public",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6067862452620309358": {
            "error_kind": "string",
            "string": "Function balance_of_public can only be called statically"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "owner",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "lo",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "hi",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "std::uint128::U128"
          },
          "visibility": "public"
        }
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["balance_of_public"]
    },
    {
      "name": "public_get_symbol",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "15009911310769716579": {
            "error_kind": "string",
            "string": "Function public_get_symbol can only be called statically"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "compressed_string::field_compressed_string::FieldCompressedString"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACbHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADEHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA1iYCAQAGLgwAAQACLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAAwykBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF0E3qz6yL/WM7AQECJS0AGMoYyg==",
      "debug_symbols": "7VXBbsIwDP2XnHuIY8dJ+JVpQgUCqlS1qJRJE+LflyAaSheBxmCnXaq4es57eU7sg1j5xX4zr5p1uxOzt4Oo22XZV20TosOxEIuuqutqMx//FjJ+jD7hd9uyieGuL7tezIBZFcI3q7g0KuywrmovZhyW38FS6gEslU5gUJxBE5E5o4k0J7SjDNhi2tqigjH4vRBWPkG7TeAg/g+1P8N3guQ73/MdNCc0g7mt3aEbwI6QJtodPlU7yGvtkcG+miE49nIKgF9TsJPDjWOn8E7VZNrZSasnVQP46YljkoJHkh5hQnokyeWSyCTXyCi+bTFqGhiQx1U0OldzZVOzwxFaydyjM2jxjDYk6Xb5DKReZNR1w8joAIl4uXzM02oT/TuTceYYoo+yq8pF7c/Dcb1vlqNZ2X9u/WRsbrt26Vf7zscBepmdEOePcgXS6XmFAHWBJnAEni8=",
      "brillig_names": ["public_get_symbol"]
    },
    {
      "name": "get_admin",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "10055739771636044368": {
            "error_kind": "string",
            "string": "Function get_admin can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "field"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACSHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAAC7HgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAAzS4MAAIAASUnAIAEBHgADQAAAIAEgAMjAIADAAAAuikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFi40qC3IiUlA7AQECJS0AGMoYyg==",
      "debug_symbols": "vVTbioMwEP2XPPuQyeTaX1lKsW1aBFHxsrBI/32TovGyUlnX7otk5Myck5nJacnVnpv7KclueUUOHy1J80tcJ3nmovYRkXOZpGlyP41/E+o/SjzxVRFnPqzquKzJAaRkEbHZ1R8VcxVuSWrJQbrjTzClogdTJgIYmFxAc85Vh+ZcyIA2fAGsMZTWyGAMPkZE0x206wB24v9R+x595xD6Ltf6DkIGtAT1WrtB04MNRz7TbnBX7UCn2j2DfjeD69jbKQD+TCEN7TdOGoYrU6OhsqFazKYG8Nsb+yQGW5K2MCHfkmSWkgSEXRegzMoUXZEwRTnsOqilZ6RQY4dWnPLXA1EQ3EWxqQUs6aCIwzrJib0cHy76jMskPqe2M/Vbk11GHl9/FXZm90WZX+y1Ka03/sHzwfsmUxGy51q4wBGjcByO5xs=",
      "brillig_names": ["get_admin"]
    },
    {
      "name": "public_get_decimals",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "11795427120478775878": {
            "error_kind": "string",
            "string": "Function public_get_decimals can only be called statically"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBFJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAARSQAAABGLQQAAYBEJwIAAgSARCYCAwQBOg0AAgADJSQAAACqHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAbyQAAADTHgIAAQkmAgIAAQo4AQIDIwIAAwAAAIskAAAA5SYCAQAKLgwAAQACHAwCAwIcDAMBABwMAQICLAwCASUnAIAEBHgADQAAAIAEgAMjAIADAAAA0ikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFo7HGeKIlakY7AQECJS0AGMoYyg==",
      "debug_symbols": "7VbbbsIwDP2XPPchjh0n4VemCRUoqFLVolImTYh/X8JoKF0EGoNpEnup4uo45+Q4F+/EophtV9OyXjYbMXnZiaqZ513Z1D7a7TMxa8uqKlfT4W8hw8foA36zzusQbrq87cQEmFUminoRhkb5GZZlVYgJ++FXsJS6B0ulIxgUJ9BEZI5oIs0R7SgBthintqhgCH7NhJV30G4j2Iv/Re338J0g+s7XfAfNEc1gLmt36HqwI6SRdod31Q7yXHtgsI9m8I49nALgxxTsZL/j2Cm8UjUZZ3bS6lHVAL674pCk4JakW5iQbklyqSRySP05dVpfthg19QzIwyoanaq5svGywwFaydShM2jxiDYk6XL5DMS7yKjzCyOhAyTiafMxj6tN9O9M2hkt/7gz5uQMuCvOWNe/MQMTUdnPlepnWSk/R033PnzL2zKfVcWxtVtu6/mg0+ve18Wo6Vu3zbxYbNsitH+nzg+CZagyNIfHIQQ2I+k5PM8H",
      "brillig_names": ["public_get_decimals"]
    },
    {
      "name": "total_supply",
      "is_unconstrained": true,
      "custom_attributes": ["public", "view"],
      "abi": {
        "error_types": {
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "9599227760297081764": {
            "error_kind": "string",
            "string": "Function total_supply can only be called statically"
          }
        },
        "parameters": [],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "lo",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "hi",
                "type": {
                  "kind": "field"
                }
              }
            ],
            "kind": "struct",
            "path": "std::uint128::U128"
          },
          "visibility": "public"
        }
      },
      "bytecode": "JgACBAEnAAABBIBGJgAABAMmAgEEACYCAgQAHxgAAgABgEQkAAAASyQAAABhLQQAAYBELQQAAoBFJwIAAwSARCYCBAQCOg0AAwAEKgCAQwAAAAAAAAAAAQAAAAAAAAAAJSQAAAD1HgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAiiQAAAEeHgIAAQkmAgIAAQo4AQIDIwIAAwAAAKYkAAABMCYCAQAELgwAAQACHAwCAQAqAgADAP////////////////////8OOAEDBCMCAAQAAADdJAAAAUIcDAIDBRwMAwEAAjgCAQMJKAADgEMAAiUnAIAEBHgADQAAAIAEgAMjAIADAAABHSkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFhTdOygKTe6Q7AQECJSkBAAEFWgLkG7UeqZ87AQECJS0AGMoYyg==",
      "debug_symbols": "7VjbjoIwEP0Xnn3odKbT1l/ZbAwqGhICBnGTjfHftxApCESyrvrA8kIoOdM558xwGc7BNlqf9qs43WXHYPlxDpJsExZxlrrV+bII1nmcJPF+1b4ciPIAQlYBx0OYlutjEeZFsARmuQiidFueaum22MVJFCzZnfbBQqgaLKTyYJA8gCYifUUTKfZoSwNgg35rgxLa4M+FI6+fQN54sGP/RvLwDOcJvPM85jwo9mgGfZ+8RVuDLSF1yUvxVPIgbslXKdTLUyC+PoX5cwq2om46thJH6ib8zlYY1a0b/VZxFWQeCFKPZGJ4JIiHghTZ2jWl5FgVAa2vIjfdDnroRtJo8IrWJOh+QTT4B4yWt0+BIR4CsWkn5m79NPwjrfrtWnWjFewIfUbhm1I1YJRm6MXBZOoXB3ODZjEAVp6Gsg3UESpdMXJ2peeKFDi7MuCKmV3puwI8u9J3RcKUXPGsSbc+ypwrldRJNcBdqTilqmokL5VET+qUqqr9p5GTenNbf17c6ivM43CdRNf5fndKN61xv/g+RJ3J/5Bnm2h7yqPyH0B7/HeeOc1E1UTqFgoWCl0Ol+cH",
      "brillig_names": ["total_supply"]
    },
    {
      "name": "cancel_authwit",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "inner_hash",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "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",
      "debug_symbols": "7ZfdboJAEIXfZa+52Jn991WapkFFQ0LAIDZpjO/eWeIuEFe5sDVtwt2OHM8cv2UWObNtsT7tP8p61xzZ6u3MqmaTd2VTU3VmIPrPjoe89uWxy9uOrUBrzFhRb/3S4CVju7Iq2ErT8kaMqM1VjGhdFAN3KbWT9qoWHGFGDVoKFZNIObijTWYB1CELSDWoXdJdaBHMJfCJ+j1jIBc2d9mohc1dNnphc5eNeZqN5C6IJaCNYif6Bva3G7inG4DgMoiFGO0u6pSagwkbQGtKMQqUunWsc/HecTf5kf/z/JDMT9+KTWgezMx8ceDh9yKnNlFubEJudTS3RoiZgbEyDoyVRs6ohQpiiaNxSZFEA5HMJEYSuxmoG6dmxDw6A9d2LPbIcUH+auRiQf5q5DKN3CkzIDfuMXINil/VGqx6fNSBHfIQ/OEcJWsfSP1EINqPEKh/Yj919uq/lYiKdVtWVbn/mLzV8P7VJrmf6Hj4r0Sx+ZT5hcrPvC3zdVV4I3/1VG+CL5Xd1yFcCZ0PbbMptqe28BlG7f1zFnSGQLZk/Q0=",
      "brillig_names": ["notify_created_nullifier_oracle_wrapper"],
      "verification_key": "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"
    },
    {
      "name": "transfer_in_public",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10132274202417587856": {
            "error_kind": "string",
            "string": "invalid nonce"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "4939791462094160055": {
            "error_kind": "string",
            "string": "Message not authorized by account"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "939615093317106671": {
            "error_kind": "string",
            "string": "Invalid response from registry"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "nonce",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["transfer_in_public"]
    },
    {
      "name": "prepare_private_balance_increase",
      "is_unconstrained": false,
      "custom_attributes": ["private"],
      "abi": {
        "error_types": {
          "14514982005979867414": {
            "error_kind": "string",
            "string": "attempt to bit-shift with overflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2709101749560550278": {
            "error_kind": "string",
            "string": "Cannot serialize point at infinity as bytes."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "7233212735005103307": {
            "error_kind": "string",
            "string": "attempt to multiply with overflow"
          }
        },
        "parameters": [
          {
            "name": "inputs",
            "type": {
              "fields": [
                {
                  "name": "call_context",
                  "type": {
                    "fields": [
                      {
                        "name": "msg_sender",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "contract_address",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                        }
                      },
                      {
                        "name": "function_selector",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                        }
                      },
                      {
                        "name": "is_static_call",
                        "type": {
                          "kind": "boolean"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                  }
                },
                {
                  "name": "historical_header",
                  "type": {
                    "fields": [
                      {
                        "name": "last_archive",
                        "type": {
                          "fields": [
                            {
                              "name": "root",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "next_available_leaf_index",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                        }
                      },
                      {
                        "name": "content_commitment",
                        "type": {
                          "fields": [
                            {
                              "name": "num_txs",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "blobs_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "in_hash",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "out_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                        }
                      },
                      {
                        "name": "state",
                        "type": {
                          "fields": [
                            {
                              "name": "l1_to_l2_message_tree",
                              "type": {
                                "fields": [
                                  {
                                    "name": "root",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "next_available_leaf_index",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                              }
                            },
                            {
                              "name": "partial",
                              "type": {
                                "fields": [
                                  {
                                    "name": "note_hash_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "nullifier_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  },
                                  {
                                    "name": "public_data_tree",
                                    "type": {
                                      "fields": [
                                        {
                                          "name": "root",
                                          "type": {
                                            "kind": "field"
                                          }
                                        },
                                        {
                                          "name": "next_available_leaf_index",
                                          "type": {
                                            "kind": "integer",
                                            "sign": "unsigned",
                                            "width": 32
                                          }
                                        }
                                      ],
                                      "kind": "struct",
                                      "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                        }
                      },
                      {
                        "name": "global_variables",
                        "type": {
                          "fields": [
                            {
                              "name": "chain_id",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "version",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "block_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "slot_number",
                              "type": {
                                "kind": "field"
                              }
                            },
                            {
                              "name": "timestamp",
                              "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 64
                              }
                            },
                            {
                              "name": "coinbase",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                              }
                            },
                            {
                              "name": "fee_recipient",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "gas_fees",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                        }
                      },
                      {
                        "name": "total_fees",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "total_mana_used",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                  }
                },
                {
                  "name": "tx_context",
                  "type": {
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "version",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "gas_settings",
                        "type": {
                          "fields": [
                            {
                              "name": "gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "teardown_gas_limits",
                              "type": {
                                "fields": [
                                  {
                                    "name": "da_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  },
                                  {
                                    "name": "l2_gas",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                              }
                            },
                            {
                              "name": "max_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            },
                            {
                              "name": "max_priority_fees_per_gas",
                              "type": {
                                "fields": [
                                  {
                                    "name": "fee_per_da_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "fee_per_l2_gas",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                  }
                },
                {
                  "name": "start_side_effect_counter",
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              ],
              "kind": "struct",
              "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs"
            },
            "visibility": "private"
          },
          {
            "name": "to",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          }
        ],
        "return_type": {
          "abi_type": {
            "fields": [
              {
                "name": "call_context",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                }
              },
              {
                "name": "args_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "returns_hash",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "min_revertible_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "is_fee_payer",
                "type": {
                  "kind": "boolean"
                }
              },
              {
                "name": "max_block_number",
                "type": {
                  "fields": [
                    {
                      "name": "_opt",
                      "type": {
                        "fields": [
                          {
                            "name": "_is_some",
                            "type": {
                              "kind": "boolean"
                            }
                          },
                          {
                            "name": "_value",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "std::option::Option"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"
                }
              },
              {
                "name": "note_hash_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "nullifier_read_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::read_request::ReadRequest"
                  }
                }
              },
              {
                "name": "key_validation_requests_and_generators",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "request",
                        "type": {
                          "fields": [
                            {
                              "name": "pk_m",
                              "type": {
                                "fields": [
                                  {
                                    "name": "x",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "y",
                                    "type": {
                                      "kind": "field"
                                    }
                                  },
                                  {
                                    "name": "is_infinite",
                                    "type": {
                                      "kind": "boolean"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                              }
                            },
                            {
                              "name": "sk_app",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"
                        }
                      },
                      {
                        "name": "sk_app_generator",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"
                  }
                }
              },
              {
                "name": "note_hashes",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::note_hash::NoteHash"
                  }
                }
              },
              {
                "name": "nullifiers",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "note_hash",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::nullifier::Nullifier"
                  }
                }
              },
              {
                "name": "private_call_requests",
                "type": {
                  "kind": "array",
                  "length": 5,
                  "type": {
                    "fields": [
                      {
                        "name": "call_context",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::call_context::CallContext"
                        }
                      },
                      {
                        "name": "args_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "returns_hash",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "start_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "end_side_effect_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"
                  }
                }
              },
              {
                "name": "public_call_requests",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "fields": [
                            {
                              "name": "msg_sender",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "contract_address",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "field"
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                              }
                            },
                            {
                              "name": "function_selector",
                              "type": {
                                "fields": [
                                  {
                                    "name": "inner",
                                    "type": {
                                      "kind": "integer",
                                      "sign": "unsigned",
                                      "width": 32
                                    }
                                  }
                                ],
                                "kind": "struct",
                                "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                              }
                            },
                            {
                              "name": "is_static_call",
                              "type": {
                                "kind": "boolean"
                              }
                            },
                            {
                              "name": "args_hash",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::side_effect::counted::Counted"
                  }
                }
              },
              {
                "name": "public_teardown_call_request",
                "type": {
                  "fields": [
                    {
                      "name": "msg_sender",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "contract_address",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                      }
                    },
                    {
                      "name": "function_selector",
                      "type": {
                        "fields": [
                          {
                            "name": "inner",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"
                      }
                    },
                    {
                      "name": "is_static_call",
                      "type": {
                        "kind": "boolean"
                      }
                    },
                    {
                      "name": "args_hash",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"
                }
              },
              {
                "name": "l2_to_l1_msgs",
                "type": {
                  "kind": "array",
                  "length": 2,
                  "type": {
                    "fields": [
                      {
                        "name": "recipient",
                        "type": {
                          "fields": [
                            {
                              "name": "inner",
                              "type": {
                                "kind": "field"
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                        }
                      },
                      {
                        "name": "content",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"
                  }
                }
              },
              {
                "name": "private_logs",
                "type": {
                  "kind": "array",
                  "length": 16,
                  "type": {
                    "fields": [
                      {
                        "name": "log",
                        "type": {
                          "fields": [
                            {
                              "name": "fields",
                              "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                  "kind": "field"
                                }
                              }
                            }
                          ],
                          "kind": "struct",
                          "path": "authwit::aztec::protocol_types::abis::log::Log"
                        }
                      },
                      {
                        "name": "note_hash_counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::private_log::PrivateLogData"
                  }
                }
              },
              {
                "name": "contract_class_logs_hashes",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "fields": [
                      {
                        "name": "value",
                        "type": {
                          "kind": "field"
                        }
                      },
                      {
                        "name": "counter",
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 32
                        }
                      },
                      {
                        "name": "length",
                        "type": {
                          "kind": "field"
                        }
                      }
                    ],
                    "kind": "struct",
                    "path": "authwit::aztec::protocol_types::abis::log_hash::LogHash"
                  }
                }
              },
              {
                "name": "start_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "end_side_effect_counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "historical_header",
                "type": {
                  "fields": [
                    {
                      "name": "last_archive",
                      "type": {
                        "fields": [
                          {
                            "name": "root",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "next_available_leaf_index",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 32
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                      }
                    },
                    {
                      "name": "content_commitment",
                      "type": {
                        "fields": [
                          {
                            "name": "num_txs",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "blobs_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "in_hash",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "out_hash",
                            "type": {
                              "kind": "field"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::content_commitment::ContentCommitment"
                      }
                    },
                    {
                      "name": "state",
                      "type": {
                        "fields": [
                          {
                            "name": "l1_to_l2_message_tree",
                            "type": {
                              "fields": [
                                {
                                  "name": "root",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "next_available_leaf_index",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                            }
                          },
                          {
                            "name": "partial",
                            "type": {
                              "fields": [
                                {
                                  "name": "note_hash_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "nullifier_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                },
                                {
                                  "name": "public_data_tree",
                                  "type": {
                                    "fields": [
                                      {
                                        "name": "root",
                                        "type": {
                                          "kind": "field"
                                        }
                                      },
                                      {
                                        "name": "next_available_leaf_index",
                                        "type": {
                                          "kind": "integer",
                                          "sign": "unsigned",
                                          "width": 32
                                        }
                                      }
                                    ],
                                    "kind": "struct",
                                    "path": "authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::state_reference::StateReference"
                      }
                    },
                    {
                      "name": "global_variables",
                      "type": {
                        "fields": [
                          {
                            "name": "chain_id",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "version",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "block_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "slot_number",
                            "type": {
                              "kind": "field"
                            }
                          },
                          {
                            "name": "timestamp",
                            "type": {
                              "kind": "integer",
                              "sign": "unsigned",
                              "width": 64
                            }
                          },
                          {
                            "name": "coinbase",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::eth_address::EthAddress"
                            }
                          },
                          {
                            "name": "fee_recipient",
                            "type": {
                              "fields": [
                                {
                                  "name": "inner",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                            }
                          },
                          {
                            "name": "gas_fees",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"
                      }
                    },
                    {
                      "name": "total_fees",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "total_mana_used",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::block_header::BlockHeader"
                }
              },
              {
                "name": "tx_context",
                "type": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "version",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "gas_settings",
                      "type": {
                        "fields": [
                          {
                            "name": "gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "teardown_gas_limits",
                            "type": {
                              "fields": [
                                {
                                  "name": "da_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                },
                                {
                                  "name": "l2_gas",
                                  "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 32
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas::Gas"
                            }
                          },
                          {
                            "name": "max_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          },
                          {
                            "name": "max_priority_fees_per_gas",
                            "type": {
                              "fields": [
                                {
                                  "name": "fee_per_da_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                },
                                {
                                  "name": "fee_per_l2_gas",
                                  "type": {
                                    "kind": "field"
                                  }
                                }
                              ],
                              "kind": "struct",
                              "path": "authwit::aztec::protocol_types::abis::gas_fees::GasFees"
                            }
                          }
                        ],
                        "kind": "struct",
                        "path": "authwit::aztec::protocol_types::abis::gas_settings::GasSettings"
                      }
                    }
                  ],
                  "kind": "struct",
                  "path": "authwit::aztec::protocol_types::transaction::tx_context::TxContext"
                }
              }
            ],
            "kind": "struct",
            "path": "authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"
          },
          "visibility": "databus"
        }
      },
      "bytecode": "",
      "debug_symbols": "",
      "brillig_names": [
        "random",
        "decompose_hint",
        "field_less_than",
        "lte_hint",
        "build_msg_block",
        "attach_len_to_msg_block",
        "get_random_bytes",
        "get_app_tag_as_sender",
        "increment_app_tagging_secret_index_as_sender_wrapper",
        "store_in_execution_cache_oracle_wrapper",
        "enqueue_public_function_call_internal",
        "store_in_execution_cache_oracle_wrapper",
        "directive_invert",
        "directive_integer_quotient",
        "directive_to_radix"
      ],
      "verification_key": "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"
    },
    {
      "name": "set_minter",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "12850931128589648885": {
            "error_kind": "string",
            "string": "caller is not admin"
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          }
        },
        "parameters": [
          {
            "name": "minter",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "approve",
            "type": {
              "kind": "boolean"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["set_minter"]
    },
    {
      "name": "_finalize_transfer_to_private_unsafe",
      "is_unconstrained": true,
      "custom_attributes": ["public", "internal"],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17028138060491915576": {
            "error_kind": "string",
            "string": "Function _finalize_transfer_to_private_unsafe can only be called internally"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "from",
            "type": {
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
            },
            "visibility": "private"
          },
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "7Z3djty2DoDfZa9zIepffZXioEjStFggSIokPcBB0Xc/mvFa9o5kK/bKniHFm2K2kUbkJ45EUn//PP3+6cPff/72/OWPr9+ffvn1n6fPXz++//H89Uv8659/3z19+Pb8+fPzn7/N//eTuPwHjL9W+P7X+y+Xv7//eP/tx9MvYK189/Tpy++Xj07Gr/jj+fOnp1+s/Pc/757Ayj2V3I5Kbk9Lzu6o5MWeSmZHpbCnpaD3VNrRuVKoPZX2tARbO/ddXlgIMxYW0qTCIG2htNbavZTW2thUOuhCYa/SV3slYV74KrxrILxPhaP0JwovW5DXkMjbGnkwNpW24NaFDyqMhYNW+lZ4JZoKD+K18NcmzOFNaHV8E/7NTWgrxybix1AzOieT0Xl322/m7Rq3/A3smfmk3TM4OthTqTiJSTHVksJpt85LApiRQfzs4bYVD6e0coou4RRdgjmllXBCK6o81TdvxZ3RCsAprZhTWjml96U+pZVTdFGnWLI6xZL1KZasT7FkfUDvh5pbBCokt8hO7mOMCwulnfLqpbTTQq+7FA6Sx+7ka5eiJIdQavLPrL3xQJQxjw/HTXCg4v6BVSI5NGYqrKQvepbaJ8/STqWtKBQ2SQwTpqJRoAtGKxhjA4xHuII9YrSMsQHGoBljC4wI5t8DMYaULXCz/EjEGNnEyZ7ZLLLp2m6c0omNFrdsoGu7ccmnjWzCLZtyYvmNbPx6cTONlsZadSuSEncWyWUWpMw9RPIhiRSyjtPi8US6ByWnxi838adzK5IRdxEJkkgmF+kulNxEydtbkay4s0ghm8/sPSh5GKcR42UmkhOPJ9JdKJlk3t5m5u3F44nkH06k0Cb9KcEmkaS+XZLSwZ/QihHylFbsGa2AOKUVfUorp/S+PKX35Sm9r+CUVk7RRZ9iyfoUS9anWLI5xZLNAb1vdCUYVTKta6hZDLgQjPopGPVeVYLRaGjjVxujKsGoFMonLV+VLn23DmL8bh3g1vmJIRuT/FmSPqySDI9PUtlE0vh1ks6m3IuzQVSwA+hpUx+87qULnEY+dlyuSXA0VIrrtPkudtfUt3aQqJGL3VKih2L0UKNUI08fJ5r1YadReGLSQBI/a98OzZay23YliBQcxo/yZsSxjQIqelwccylxAbaXMhe2lyIXyfZS5mKZS4lLowU5elwMcylyCcylxKVRsoweF44DilwMz9NlLuzXFbn4fudp5xMXF264OAG9cgE77h5w4ETGhZT/smUHHViXUr6znXwylHJe3ozZZO9el71ABFI/untBZEtsAJGU230cRDcW9rO1oRFiozOWnUNkS3w7xEYnZKlDDOnOiAA+h0gqtLwTRM2W2AAiW+LbIdLKiJwBUdocIqn0yZ0gWrbEBhAJWSJISHd7ydnQVd4ZAy7dmAZezo8HXsE4QhmrjWC8TOcm/Wz37AiG0BLtZosRExh1C8Z3bDHpijnwVmRg2GKuYOAWTEBrMVfp0XZrlN4LjVp6tOmdi/QateV4tLH4VXq0Dt9F+oDW579Kj5l9wLsn+io9avaA2VMIeNcWL9JLtMvLV+k1aukx+zmB0vqRkmHMIymlZnlhKMU9YoqShJrdsl5KUDkx7ZCR86JXhIRy9ndCSGnt6ECEakrAhgwhW+FPIUwX/c6uFHtBaAglgQ5EmG73csHdIrSEEoz3QshW+BMIvRxP+r/K/w8IKS2MHIkwvaMye3NlREhoc9aBCKeXcfIfMt401n0QhtwvxJtLKyDUMK5AKW3MHGFUFYQgtEU86gqruhLaya20UGu6Utr6X9WVUhBS0VVSillrumLOTMc5CHNqOoqPeS3y8pohbvFx0ze46RvM6zJRfMyLAyAaXZ54N/EpuSMu7ahVHm539oFwlEKlmq6UIuuKrr6jfiWVManoSiq1UdO1n34FStcyVnXtqF8pXZ9Y05XS1X/K65Ta8MblulKy4YquqqN+xZs0KemahFbe2UxXvBmWHbp21K+G0tKBT2cZVZi9TJl0pbQkVNHVdtSveFNIFV0LfpOltGmioqvrqF8pbYaJCxrpvKdwMNc1L2wgpIcFJegMjCdkBNvASG0TGJvP3L5bi5EhgVEqd8tDvxZTAUNorWIbGOXGwkbPt4ANYKQgtM9iGxid7qs1RtgcTLcWo62dwGQ/JQndWox14zcb93q6zgs7Oz2WZr3KKVK6duduFCmlUu9IkW2xAUVK6d87UmRbbEDRaKb4MxTDuFDnHEBOsdswsyVFSinKO1LsNhzZRNGlU3fOqZBRdBy7tKDIttiAIqWth60oDmAo3RbZEgze2yKPBkNodbslGEXp1GtbMJrBlMFwzFMGw2nvJTCcsSmDkd1O1z7dT2C8kW9KZSnZ7dzekiKl58PvSJFtsQFFzbbYgiLbYgOKlJ4QOpLianJakXpD6G4UKZ0xvyPFbrOHmyiuJ6cVqaeM7keRbfHtFHW/W0KWKV7BUDqY2BYM+8ZlMOzuLoHhkboMxnGwXgZD6YaZtmD4p1QEY/pdjK2B6XbNsQKm2zVHC+kBAgvW5WB63YFmIT30E8H4DAyla5Pbguk1iKyBwXt781vByPRigJXG5mB69WMspNcoIph88O027VAF02vaoQqmVwevBsYQmq61cOO7WzpCSqVDqXCQbnTwghJ+XngAQ2i6dspPLwvWwDhhxm+OH2UGhtITcG3BEJqum4Kh9FxbWzBsMWUwlBZ/24Ih5OC1BUPIwWsKhtKFXG3BEMrgtQRjKV3I1RYMhwRlMJTuzm8Lhh28MhhKJ5PagmEHrwyG0vmhtmA0gymD4ZCgDEazg7cAhkOCMhjDDt4CGA4JymB4lWAJDDt4ZTCU9vk2BeP7nZXSBenxY7gF40S30XV0VcbCEUMGBkj9lNwEBsI6GCXTdlYlZz8lJf0LGc1kFsiQipZakqG0o7UxGVLeb0sylK5ib0yG1KTdkgylW2kakyEVMzUl0++s7dMT12r2LGUiQ2lja2MypOLJlmQs28wSGbaZBTKULvRvTKbf6KBChtb21qZk+o0OKmRCv9FBjUy/0UGNDEcHZTJeaCazQIY9vQUylO7CaEyGPb0FMpSeh21Mhj29BTKU7sNoTIY9vQUyHa8d1MhoJrNAhqODBTL9rh0oMInM7CLkC5m8dAQ1ygHeigLHbv3CthwpXZp7V47d+pxtOdLaqntHjt36s2050tohfRxHocfS8eN036DSA8dAa0P1gRyTHCBm268TR7z7rwfxNW7x0cY1V/HxbjcexEfr81/Fx7txdxAfN32Nm77GTR/vKd9BfNz08Z6YHcRH6ztexccb0g7io42AruJ73COPxz3y4H1IaBAf88gjhcA87kfx0eawruKjDtWj+LjpS9z0pcYtPuZEiRR4Lz4bxMdNH+++ikF8zA6zFKhD9Sg+Zoc5ionbZUMdqkfRcDsNeBd9B/FxT1se97RFaaUb0u1eMLvcS8WF6auqpJ43rqhK6WnIVVUBb7ajIIaYZFYFVQnt7qmoSunCuZqq/fQqpUMFUo5lpZS5qpTuRFHpFUQVCqri3Uw8iI86eAG8b+EN4uOmj/fijUF83PTxXmExiK9xi486cJd4XyUbxEedb5Z4X/gaxEedb5Z4X8saxEc9bUm8L08N4qPON0vcy6QS9zKpxL1MKvEe5B7Exz1t4c40SNyZBok70yBxL5NKj9tpwL1MKvEuk17FR70hO4qPetpSuLcEK4na9hXqA5hRfNy2j/oAZgx1cf90DWqfRxnUobrC+/rDID7ucR/vOwpX8XGvLCrcK4sKt8OscC/NaaFRi4/b39e4jwBq3EcANe4jgBpvsJiX9Xa81dXP9r0V7/vSGsayWqv5DbBh4ELp/c6mXAjtVG/JBW/cfDAXtpciF7znNw/mwvZS5ELpBuimXAjdWNqSC97F34O5EDq905KLJ/TiQVMuPB8VuVA6nNuUC9tLiYuhdOy3KRf2X4pc8KbV3sbFwHh6Pn4MOZde8wwWRv1iKFTiQvJ3FATMuVw1NSRH0qKm3fQp3vukNmvaTZ9SeiOpoinJmLqkKd5N3Zs17adPCb2Cua4p3vPrmzUluapd0NTiPRW/WdNu+hS66VO8L3Vt1VT2Mp9aSq/XVzSlFMukFzaD0HNN86IhOodjWQs2w6IpGUBDLJRGgHZY8J7YORYLW0sJS6/bYIxOyyXGTAzH9Le1nS471rg4tpciF5qJrAZcOt0eVOOC9+bGg7mwvZS5kAzsf4JLSMvUJqiMi6OZrnvz8r2jmdx7OxeaqcC3c8F7IebBXDrdTlbj0utxviqXTufpGhe8t3Yey4VUtq4ll07jgBoXy/ZS5sLjS5kLxwFFLh71/TYO9+1CDve7JQ5vkuoivheo6XvcD394vBmIQXzc9CVu+nj3Ag3io562PN6NOIP4uOnjvorW476K1uMNPAfxcU9buO9y9bifuPe4oy0fcE9buB8/CAJ1piEI3PQBte0H3FfRBkloNUwG+1JWzY4ujI+AB6X7UbWfXqV022ZFVUoXaM5VNQVVifZqQVVK+/srqlK6H6KmKqHV8ZqqhCYbpca7qJQRuap4nwjcrmo/vUrpAsNVVZXAG+puV7WfXoV+ehUI7fadqxpyVSlt+K6pSshbUmrcA6VsQVVFyAdW0qyqSqlXK6pS8pZcGFWdbeJLqlLaJ15TldDWzIqqlLIQTrlRCqdnNwqH8nAN6Zet1Hwfqi+UBqHH0vGjnXH0LxwJ+SeHckxfDcKHVxzz0h5G2/VKV8oaP4I2XuX9QykFRbJ/CM0uKPvHgngpa1VhfKOU7KPYP5QylBT7h9IjMiT7h1DWkGD/AKUENsn+4d/PQ/cP3t12VPrHjIvp1slC/3D+4KH7h9KiDMn+4fj0ofuH0iZckv1DaMmDYv9Qegzx0P5JcsSuEgWOHKc04UhpT/o9OVK6NequHAntObknR8dxThuO7E814egJ3Qp8V44cHzfhSOlhybtyZHtswVFSumX/rhw5LmzCkVae3E8ca895OeHGow7x4yvoAxhSAcoWMDKtTDopRQaG0sGIbWAgmFUw3VoMpL2iEQysFwYQKqVk4/BkM46UHuncyNHqsTC43MDw3jp4MBjDFrMAhpTX3hAMpUvum4Khde6iJRhSAUdDMHjv/z8aDKmUckMwgVQOpCUYtpgiGEVrN3lLMBwSlMHIbv2Y9bxWjCI5r1VK3yhaO1Lb5bUUra2gd8trKc2hVXms1v0mTtfBUHrSsi0YdpTLYCyHVgtgOBNaBuM4giiD8byosACGM6FlMLTujGgJhi2mCEYLHmMWwHBIUARjyhYT480p9oTpui6wxU1hfjy6BmFiogBemjCHNwHi+CaO10Ier4U8QYtweBNKHd+EP7yJ8pHOjU2kU6NSyFdN5GW9lmNhr900bsQV10Jplb5Zz3J40hbHxTCOMTGtJdcLmySEkW5edGDimMktEwPMJGNimcktE8t2kjNhO8mYOLaTnIlhJhmTwExumZSvWe2ciWcmt0yCYiYZkz59ezvuEokO2i0TK/qci9eZ9OmzrTJpkuDCxySVta+LXpmoPn8760z69GNXmWj+7eRM2E4yJobtJGfCdpIz6TMuXmVi+4x31pn0GRevMnF9rnmtM+kzLl5l4tm3z5n0GRevMgkd+GyDoroXRTvwri6KOtGByzQo2sH8dlUUOnBuBkU7mImuispOphcnO4jzB0V7mV5UL9OL6iDMviraw37RQdFeppcednYOivbSo7YXh8F2Eo8624vD4HrpUTr7kKSaFNXmVlEPZJx6lx5Sk9Gx3V14oELmB72FCthJv5hdz6hIMr/+llQUGZe7KRUyA2hLKpqMM7+JinPjF4ML+RxEJ5ZrSYXOVqOmVPqcg2pUyOS3WlKxfc7MNSo82hao0Dnw2JQK20qBiueZuUSFZ+YSFZ6ZC1QCz8wlKjza5lSC4NG2RIVH2xKVPvO2FSpAZpvHJioBxnv7IMgClT5n5goVybZSolLOZoMfn72A+drahcq12sLSQLXa5tYK6puQbq20s14o3kI5u5NBT6ScGcRZON9X02Jhm0OtmvO7qnm1r9q+1hY8tfVqWizc5FCtZk62B2fdS1nnp58kODvIA+LB5PGPJY/WD/T7jeKEhxLHPNLopsX2geNY4/EPZszbh7pD5QFDJnWgRJJCgb7xOaKiZFbQK4rSWaapKOrIZDJqipLZVFZRlM5KQE3RbnqUTAZJTnOuEqYS/4oULEdVfUaFzlWFTanQ2SS8hQrM3hw0t3vcYltkpvOWVOhczteUCplppSmVPucgsCbp57PRVtK5om8TlZj+G/WLma6cimYqBSpk1nZaUqGTOmlKhcyui01UpmfKwBiRUaHzUEhTKmwrBSp0ToU2pdKnF1ehQieR1JIKnf2QTan0mV9Zp6Lo3AnXlEqfHn+FCp2df02pdDquuLTHLa7HZ1Rkp3NQhQrbSoEKnSdEWlLpNENZo6KZSoFKp/7KOpVOM5QVKp3m4tS0J18pyKn0mYurUKGzx6wplT7noBqVPuegChXf5xxUo8KjbYFK4Jm5RIVtJaei6Zxjb0qFZ+YSFZ6ZC1TovJ2yjYp2iYoVOZVObWWdCp3HSlpSUZ3OQRUqnfor61To3FXblArbSoEKnbtqG+4s1XTuqm1KhfdmF6jQOQTdkgqdW1mXqVwU9eUn55wazx86rbI65UE36LGhYPJ2ykNSpY7fXqdszpU6C1Pr6iHMxYt7K7XMnlpLx70rtXa1FXa1Ffa0tXjFYqXWrrYAdtXa1ZbcpdfSMyeVWn5PraXHQyq19vxSQtmhXx1jgi5yD2J8UyjIvM6OcSlYv70dJ3fUsdvrlH/1lTrbx9lQvnpgvU7Y3I4RQu6o47bXgR3twI52ZNGugxntOhpKXsdur6N2tKPC9jrlDVOVOjvaMTvaqfoChTpWbe9T67fXcTva8bCjjt1eJ+z4LYTN44EBsX08ABA76pjtdeSOduQOfeR22wEld9TZaAf/xr/++/7b8/sPnz99jzUu//j3l48/nr9+efnzx//+Gv/lw7fnz5+f//ztr29fP376/e9vn377/PXj5d+exMt/fvVBvQugoywXw48u0rsgTfzr2p+Xh6is9Zc/LybuvX7nvY0yRDn+Dw==",
      "brillig_names": ["_finalize_transfer_to_private_unsafe"]
    },
    {
      "name": "finalize_mint_to_private",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          },
          "947855837675787227": {
            "error_kind": "string",
            "string": "caller is not minter"
          }
        },
        "parameters": [
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["finalize_mint_to_private"]
    },
    {
      "name": "finalize_transfer_to_private",
      "is_unconstrained": true,
      "custom_attributes": ["public"],
      "abi": {
        "error_types": {
          "10536464181608181124": {
            "error_kind": "string",
            "string": "transfer not prepared"
          },
          "11859452850824495745": {
            "error_kind": "fmtstring",
            "item_types": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            ],
            "length": 60
          },
          "13699457482007836410": {
            "error_kind": "string",
            "string": "Not initialized"
          },
          "16646908709298801123": {
            "error_kind": "string",
            "string": "attempt to subtract with underflow"
          },
          "16761564377371454734": {
            "error_kind": "string",
            "string": "Array index out of bounds"
          },
          "17843811134343075018": {
            "error_kind": "string",
            "string": "Stack too deep"
          },
          "206160798890201757": {
            "error_kind": "string",
            "string": "Storage slot 0 not allowed. Storage slots must start from 1."
          },
          "2920182694213909827": {
            "error_kind": "string",
            "string": "attempt to subtract with overflow"
          },
          "5019202896831570965": {
            "error_kind": "string",
            "string": "attempt to add with overflow"
          },
          "6485997221020871071": {
            "error_kind": "string",
            "string": "call to assert_max_bit_size"
          }
        },
        "parameters": [
          {
            "name": "amount",
            "type": {
              "fields": [
                {
                  "name": "lo",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "hi",
                  "type": {
                    "kind": "field"
                  }
                }
              ],
              "kind": "struct",
              "path": "std::uint128::U128"
            },
            "visibility": "private"
          },
          {
            "name": "hiding_point_slot",
            "type": {
              "kind": "field"
            },
            "visibility": "private"
          }
        ],
        "return_type": null
      },
      "bytecode": "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",
      "debug_symbols": "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",
      "brillig_names": ["finalize_transfer_to_private"]
    }
  ],
  "outputs": {
    "globals": {
      "notes": [
        {
          "fields": [
            {
              "kind": "integer",
              "sign": false,
              "value": "0000000000000000000000000000000000000000000000000000000000000000"
            },
            {
              "kind": "string",
              "value": "UintNote"
            },
            {
              "fields": [
                {
                  "name": "owner",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000001"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "randomness",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000002"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": false
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                },
                {
                  "name": "value",
                  "value": {
                    "fields": [
                      {
                        "name": "index",
                        "value": {
                          "kind": "integer",
                          "sign": false,
                          "value": "0000000000000000000000000000000000000000000000000000000000000000"
                        }
                      },
                      {
                        "name": "nullable",
                        "value": {
                          "kind": "boolean",
                          "value": true
                        }
                      }
                    ],
                    "kind": "struct"
                  }
                }
              ],
              "kind": "struct"
            }
          ],
          "kind": "tuple"
        }
      ],
      "storage": [
        {
          "fields": [
            {
              "name": "contract_name",
              "value": {
                "kind": "string",
                "value": "Token"
              }
            },
            {
              "name": "fields",
              "value": {
                "fields": [
                  {
                    "name": "admin",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000001"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "minters",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000002"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000003"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "total_supply",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000004"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "public_balances",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000005"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "symbol",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000006"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "name",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "0000000000000000000000000000000000000000000000000000000000000008"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  },
                  {
                    "name": "decimals",
                    "value": {
                      "fields": [
                        {
                          "name": "slot",
                          "value": {
                            "kind": "integer",
                            "sign": false,
                            "value": "000000000000000000000000000000000000000000000000000000000000000a"
                          }
                        }
                      ],
                      "kind": "struct"
                    }
                  }
                ],
                "kind": "struct"
              }
            }
          ],
          "kind": "struct"
        }
      ]
    },
    "structs": {
      "events": [
        {
          "fields": [
            {
              "name": "from",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "to",
              "type": {
                "fields": [
                  {
                    "name": "inner",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
              }
            },
            {
              "name": "amount",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::Transfer"
        }
      ],
      "functions": [
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_finalize_mint_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_finalize_mint_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "account",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_recurse_subtract_balance_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_recurse_subtract_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::burn_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::burn_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_reduce_total_supply_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_reduce_total_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::get_admin_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::get_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_finalize_transfer_to_private_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_finalize_transfer_to_private_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::finalize_mint_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::finalize_mint_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_decimals_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_decimals_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_name_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_increase_public_balance_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_increase_public_balance_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "owner",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::balance_of_public_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::balance_of_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::is_minter_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "boolean"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::is_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "hiding_point_slot",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::finalize_transfer_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::finalize_transfer_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_in_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_in_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::public_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::public_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_decimals_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_decimals_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_in_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_in_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::prepare_private_balance_increase_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "kind": "field"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::prepare_private_balance_increase_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::total_supply_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "lo",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "hi",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "std::uint128::U128"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::total_supply_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_symbol_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_symbol_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::mint_to_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::mint_to_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "inner_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::cancel_authwit_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::cancel_authwit_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "minter",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "approve",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::set_minter_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::set_minter_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "new_admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::set_admin_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::set_admin_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::transfer_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::transfer_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "admin",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "name",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "symbol",
                    "type": {
                      "kind": "string",
                      "length": 31
                    }
                  },
                  {
                    "name": "decimals",
                    "type": {
                      "kind": "integer",
                      "sign": "unsigned",
                      "width": 8
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::constructor_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::constructor_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "to",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::mint_to_public_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::mint_to_public_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "from",
                    "type": {
                      "fields": [
                        {
                          "name": "inner",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "authwit::aztec::protocol_types::address::aztec_address::AztecAddress"
                    }
                  },
                  {
                    "name": "amount",
                    "type": {
                      "fields": [
                        {
                          "name": "lo",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "hi",
                          "type": {
                            "kind": "field"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::uint128::U128"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::burn_private_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::burn_private_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [
                  {
                    "name": "slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "point",
                    "type": {
                      "fields": [
                        {
                          "name": "x",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "y",
                          "type": {
                            "kind": "field"
                          }
                        },
                        {
                          "name": "is_infinite",
                          "type": {
                            "kind": "boolean"
                          }
                        }
                      ],
                      "kind": "struct",
                      "path": "std::embedded_curve_ops::EmbeddedCurvePoint"
                    }
                  },
                  {
                    "name": "setup_log",
                    "type": {
                      "kind": "array",
                      "length": 9,
                      "type": {
                        "kind": "field"
                      }
                    }
                  }
                ],
                "kind": "struct",
                "path": "Token::_store_payload_in_transient_storage_unsafe_parameters"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::_store_payload_in_transient_storage_unsafe_abi"
        },
        {
          "fields": [
            {
              "name": "parameters",
              "type": {
                "fields": [],
                "kind": "struct",
                "path": "Token::private_get_name_parameters"
              }
            },
            {
              "name": "return_type",
              "type": {
                "fields": [
                  {
                    "name": "value",
                    "type": {
                      "kind": "field"
                    }
                  }
                ],
                "kind": "struct",
                "path": "compressed_string::field_compressed_string::FieldCompressedString"
              }
            }
          ],
          "kind": "struct",
          "path": "Token::private_get_name_abi"
        }
      ]
    }
  },
  "file_map": {
    "100": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/event.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::note::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n        },\n    },\n    event::event_interface::EventInterface,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS, traits::Serialize,\n};\nuse std::aes128::aes128_encrypt;\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n *\n * There is some minimal de-duplication in common.nr.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * As per ./note.nr, but replace `note_bytes` with `event_bytes`.\n */\n\n/// This particular log assembly strategy (AES 128) requires the event (and the\n/// event_type_id) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 32` bytes is for the event_type_id:\nfn compute_event_plaintext_for_this_strategy<Event, let N: u32>(event: Event) -> [u8; N * 32 + 32]\nwhere\n    Event: EventInterface<N>,\n{\n    let serialized_event = Serialize::<N>::serialize(event);\n\n    let event_type_id_bytes: [u8; 32] = Event::get_event_type_id().to_field().to_be_bytes();\n\n    let mut plaintext_bytes = [0 as u8; N * 32 + 32];\n\n    for i in 0..32 {\n        plaintext_bytes[i] = event_type_id_bytes[i];\n    }\n\n    for i in 0..serialized_event.len() {\n        let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[32 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Event, let N: u32>(\n    context: PrivateContext,\n    event: Event,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Event: EventInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Optionally convert some/all of the event to bytes, so that we may then\n    // prepend/append extra bytes, in a tightly-packed way.\n    // *****************************************************************************\n\n    // This includes the note_id and the storage_slot of the note:\n    // TODO: the note_id doesn't need to be a full field; it can be a single byte.\n    let event_bytes = compute_event_plaintext_for_this_strategy(event);\n\n    // *****************************************************************************\n    // Prepend/append extra bytes\n    // *****************************************************************************\n\n    // \"Proper\" meaning the main meaty stuff that we care about.\n    let proper_plaintext = event_bytes;\n    let final_plaintext = proper_plaintext;\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext, iv, sym_key);\n\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 32) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    // TODO: this header section will be deleted soon.\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 32>();\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 32>();\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Event, let N: u32>(\n    context: PrivateContext,\n    event: Event,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Event: EventInterface<N>,\n{\n    compute_log(context, event, recipient, sender)\n}\n\npub fn encode_and_encrypt_event<Event, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        let encrypted_log = compute_log(*context, e, recipient, sender);\n        context.emit_private_log(encrypted_log);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_event_unconstrained<Event, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        // Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        let encrypted_log = unsafe { compute_log_unconstrained(*context, e, recipient, sender) };\n        context.emit_private_log(encrypted_log);\n    }\n}\n"
    },
    "102": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/note.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    encrypted_logs::encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    oracle::{\n        notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n        random::random,\n    },\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{\n    abis::note_hash::NoteHash, address::AztecAddress, constants::PRIVATE_LOG_SIZE_IN_FIELDS,\n};\nuse std::aes128::aes128_encrypt;\n\npub(crate) global HEADER_CIPHERTEXT_SIZE_IN_BYTES: u32 = 48; // contract_address (32) + ciphertext_length (2) + 16 bytes pkcs#7 AES padding.\n\n/*\n * WHY IS THERE LOTS OF CODE DUPLICATION BETWEEN event.nr and note.nr?\n * It's because there are a few more optimisations that can be done for notes,\n * and so the stuff that looks like duplicated code currently, won't be\n * the same for long.\n * To modularise now feels premature, because we might get that modularisation wrong.\n * Much better (imo) to have a flattened templates for log assembly, because it\n * makes it much easier for us all to follow, it serves as a nice example for the\n * community to follow (if they wish to roll their own log layouts), and it gives\n * us more time to spot common patterns across all kinds of log layouts.\n */\n\n/*\n * LOG CONFIGURATION CHOICES:\n *\n * deliver_to: INPUT as recipient: AztecAddress\n * encrypt_with: aes128 CBC (Cipher Block Chaining)\n * shared_secret: ephemeral\n * shared_secret_randomness_extraction_hash: sha256\n * tag: true\n * tag_from: INPUT as sender: AztecAddress\n *\n * Note-specific:\n * derive_note_randomness_from_shared_secret: false\n *\n */\n\n/*\n * LOG LAYOUT CHOICE:\n *\n * Short explanation:\n * log = [tag, epk, header_ct=[[contract_address, ct_len], pkcs7_pad], ct=[[pt], pkcs7_pad], some bytes padding, some fields padding]\n *\n * Long explanation:\n * tag: Field\n * epk: [Field, u8]\n * header_ct: [[u8; 32], [u8; 2], [u8; 16]]\n * ct: [[u8; 2], [u8; x], [u8; y]]\n *\n * More precisely (in pseudocode):\n *\n * log = [\n *     tag: Field,\n *     Epk: Field,\n *\n *     le_bytes_31_to_fields(\n *\n *         log_bytes: [\n *             eph_pk_sign: [u8; 1],\n *\n *             header_ciphertext: aes_encrypt(\n *                 contract_address: [u8; 32],\n *                 ct_length: [u8; 2],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 header_pt_aes_padding: [u8; 14], // `16 - (input.len() % 16)`\n\n *             ): [u8; 48],\n *\n *             ciphertext: aes_encrypt(\n *                 final_pt: [\n *                     pt: {\n *                         note_bytes: {\n *                             storage_slot: [u8; 32],\n *                             note_type_id: [u8; 32],\n *                             ...note: [u8; N * 32],\n *                         }: [u8; N * 32 + 64],\n *                     }: [u8; N * 32 + 64],\n\n *                 ]: [u8; N * 32 + 64],\n *\n *                 // the aes128_encrypt fn automatically inserts padding:\n *                 pt_aes_padding: [u8; 16 - ( (|pt_length| + |pt|) % 16 )]\n *\n *             ): [u8; |pt| + |pt_aes_padding|]\n *                [u8; |ct|]\n *\n *             log_bytes_padding_to_mult_31: [u8; 31 * ceil((1 + 48 + |ct|)/31) - (1 + 48 + |ct|)],\n *                                           [u8; p]\n *\n *         ]: [u8; 1 + 48 + |ct| + p]\n *\n *     ): [Field; (1 + 48 + |ct| + p) / 31]\n *\n *     log_fields_padding: [Field; PRIVATE_LOG_SIZE_IN_FIELDS - 2 - (1 + 48 + |ct| + p) / 31],\n *\n * ]: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\n *\n *\n */\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] = [0; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + 48 + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(_ct: [u8; CT]) -> [u8; 1 + 48 + CT] {\n    [0; 1 + 48 + CT]\n}\n\n// Recall:\n//   lbwop := 1 + 48 + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + 48 + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + 48 + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + 49) + ((((((PT + (16 - (PT % 16))) + 49) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + 49)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n\n/********************************************************/\n// End of disgusting arithmetic on generics\n/********************************************************/\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists<Note, let N: u32>(context: PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\n/// This particular log assembly strategy (AES 128) requires the note (and the\n/// note_id and the storage_slot) to be converted into bytes, because the aes function\n/// operates on bytes; not fields.\n/// NB: The extra `+ 64` bytes is for the note_id and the storage_slot of the note:\nfn compute_note_plaintext_for_this_strategy<Note, let N: u32>(note: Note) -> [u8; N * 32 + 64]\nwhere\n    Note: NoteInterface<N>,\n{\n    let packed_note = note.pack_content();\n\n    let note_header = note.get_header();\n    let storage_slot = note_header.storage_slot;\n    let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n\n    // TODO(#10952): The following can be reduced to 7 bits\n    let note_type_id_bytes: [u8; 32] = Note::get_note_type_id().to_be_bytes();\n\n    // We combine all the bytes into plaintext_bytes:\n    let mut plaintext_bytes: [u8; N * 32 + 64] = [0; N * 32 + 64];\n    for i in 0..32 {\n        plaintext_bytes[i] = storage_slot_bytes[i];\n        plaintext_bytes[32 + i] = note_type_id_bytes[i];\n    }\n\n    for i in 0..packed_note.len() {\n        let bytes: [u8; 32] = packed_note[i].to_be_bytes();\n        for j in 0..32 {\n            plaintext_bytes[64 + i * 32 + j] = bytes[j];\n        }\n    }\n\n    plaintext_bytes\n}\n\nfn compute_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Compute the plaintext\n    // *****************************************************************************\n\n    let final_plaintext_bytes = compute_note_plaintext_for_this_strategy(note);\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt the plaintext\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext_bytes, iv, sym_key);\n\n    // |full_pt| = |pt_length| + |pt|\n    // |pt_aes_padding| = 16 - (|full_pt| % 16)\n    // or... since a % b is the same as a - b * (a // b) (integer division), so:\n    // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    // |ct| = |full_pt| + |pt_aes_padding|\n    //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n    //      = 16 + 16 * (|full_pt| // 16)\n    //      = 16 * (1 + |full_pt| // 16)\n    assert(ciphertext_bytes.len() == 16 * (1 + ((N * 32) + 64) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address = context.this_address();\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = 32;\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 =\n        get_arr_of_size__log_bytes_padding__from_PT::<(N * 32) + 64>();\n    /// Safety: this randomness won't be constrained to be random. It's in the\n    /// interest of the executor of this fn to encrypt with random bytes.\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<(N * 32) + 64>();\n\n    assert(\n        log_bytes.len() % 31 == 0,\n        \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n    );\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    assert(\n        offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n        \"Something has gone wrong\",\n    );\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // In this strategy, we prepend [tag, eph_pk.x]\n\n    // We assume that the sender wants for the recipient to find the tagged note,\n    // and therefore that they will cooperate and use the correct tag. Usage of a bad\n    // tag will result in the recipient not being able to find the note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut final_log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS] = [0; PRIVATE_LOG_SIZE_IN_FIELDS];\n\n    final_log[0] = tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n    offset += log_bytes_as_fields.len();\n\n    for i in offset..PRIVATE_LOG_SIZE_IN_FIELDS {\n        /// Safety: randomness cannot be constrained.\n        final_log[i] = unsafe { random() };\n    }\n\n    final_log\n}\n\nunconstrained fn compute_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteInterface<N>,\n{\n    compute_log(context, note, recipient, sender)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        let encrypted_log = compute_log(*context, note, recipient, sender);\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\n// Important note: this function -- although called \"unconstrained\" -- the\n// function is not labelled as `unconstrained`, because we pass a reference to the\n// context.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        assert_note_exists(*context, note);\n\n        let note_hash_counter = note.get_header().note_hash_counter;\n\n        //   Unconstrained logs have both their content and encryption unconstrained - it could occur that the\n        // recipient is unable to decrypt the payload.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        //   It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let encrypted_log = unsafe { compute_log_unconstrained(*context, note, recipient, sender) };\n        context.emit_raw_note_log(encrypted_log, note_hash_counter);\n    }\n}\n\nmod test {\n    use crate::test::{helpers::test_environment::TestEnvironment, mocks::mock_note::MockNote};\n    use dep::protocol_types::address::AztecAddress;\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n        let mut context = env.private();\n\n        // I'm not sure how to initialise an `env` or `context` with a consistent contract address for every run of this test; the value kept changing each time. So I'm going to overwrite it now:\n        context.inputs.call_context.contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        ); // This is an address copied to match the typescript one.\n\n        let storage_slot = 42;\n        let note = MockNote::new(1234)\n            .contract_address(context.this_address())\n            .storage_slot(storage_slot)\n            .build();\n        let contract_address = context.this_address();\n\n        // All the values in this test were copied over from `encrypted_log_payload.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n\n        let plaintext = super::compute_note_plaintext_for_this_strategy(note);\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let sender = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns([69420, 1337]);\n\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let payload = super::compute_log(context, note, recipient, sender);\n\n        // The following value was generated by `encrypted_log_payload.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let private_log_payload_from_typescript = [\n            0x0e9cffc3ddd746affb02410d8f0a823e89939785bcc8e88ee4f3cae05e737c36,\n            0x0d460c0e434d846ec1ea286e4090eb56376ff27bddc1aacae1d856549f701fa7,\n            0x00010577790aeabcc2d81ec8d0c99e7f5d2bf2f1452025dc777a178404f851d9,\n            0x003de81cde78411f27a921e16ebbfba71a5570d3f62f1134c90daced33663ba0,\n            0x00856cb19c7d563da183a40a6f8bd4988d1696ad6bf0c717c8fb8f6294bd0366,\n            0x001ed04e4f77a111c7090fcd34c61cfae744e8589a42defba4d0d927dd4679fe,\n            0x00ec09b49d8d4cf548ea62d44c8839b2fd14664e9d1439b199a8d5166e362348,\n            0x004a69de2d410e01010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n            0x0101010101010101010101010101010101010101010101010101010101010101,\n        ];\n\n        assert_eq(payload, private_log_payload_from_typescript);\n    }\n}\n"
    },
    "103": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/encrypted_logs/log_assembly_strategies/default_aes128/partial_note.nr",
      "source": "// THIS FILE WILL GO AWAY WHEN WE REFACTOR PARTIAL NOTES, SO I DON'T FEEL TOO\n// GUILTY ABOUT THE OBVIOUS CODE DUPLICATION VS note.nr & event.nr.\n\nuse crate::{\n    encrypted_logs::{\n        encrypt::aes128::derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256,\n        log_assembly_strategies::default_aes128::note::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES,\n        },\n    },\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    utils::{bytes::{be_bytes_31_to_fields, get_random_bytes}, point::get_sign_of_point},\n};\nuse dep::protocol_types::{address::{aztec_address::ToField, AztecAddress}, hash::poseidon2_hash};\nuse std::aes128::aes128_encrypt;\n\npub fn compute_partial_public_log_payload<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    plaintext: [u8; N],\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; M] {\n    // *****************************************************************************\n    // Compute the shared secret\n    // *****************************************************************************\n\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n    let ciphertext_shared_secret = derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient); // not to be confused with the tagging shared secret\n\n    // TODO: also use this shared secret for deriving note randomness.\n\n    // *****************************************************************************\n    // Prepend/append extra bytes\n    // *****************************************************************************\n\n    // \"Proper\" meaning the main meaty stuff that we care about.\n    let proper_plaintext: [u8; N] = plaintext;\n    let final_plaintext = proper_plaintext;\n\n    // *****************************************************************************\n    // Convert the plaintext into whatever format the encryption function expects\n    // *****************************************************************************\n\n    // Already done for this strategy: AES expects bytes.\n\n    // *****************************************************************************\n    // Encrypt\n    // *****************************************************************************\n\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    let ciphertext_bytes = aes128_encrypt(final_plaintext, iv, sym_key);\n\n    assert(ciphertext_bytes.len() == 16 * (1 + (2 + N) / 16));\n\n    // *****************************************************************************\n    // Compute the header ciphertext\n    // *****************************************************************************\n\n    let contract_address_bytes = contract_address.to_field().to_be_bytes::<32>();\n\n    let mut header_plaintext: [u8; 32 + 2] = [0; 32 + 2];\n    for i in 0..32 {\n        header_plaintext[i] = contract_address_bytes[i];\n    }\n    let offset = contract_address_bytes.len();\n\n    let ciphertext_bytes_length = ciphertext_bytes.len();\n    header_plaintext[offset] = (ciphertext_bytes_length >> 8) as u8;\n    header_plaintext[offset + 1] = ciphertext_bytes_length as u8;\n\n    // TODO: this is insecure and wasteful:\n    // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n    // and again for the proper ciphertext) (at least, I never got the\n    // \"go ahead\" that this would be safe, unfortunately).\n    // \"Wasteful\", because the exact same computation is happening further down.\n    // I'm leaving that 2nd computation where it is, because this 1st computation\n    // will be imminently deleted, when the header logic is deleted.\n    let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n        ciphertext_shared_secret,\n    );\n\n    // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n    // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n    // bytes larger than the input in this case.\n    let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n    // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n    assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n    // *****************************************************************************\n    // Prepend / append more bytes of data to the ciphertext, before converting back\n    // to fields.\n    // *****************************************************************************\n\n    let mut log_bytes_padding_to_mult_31 = get_arr_of_size__log_bytes_padding__from_PT::<2 + N>();\n    log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n    let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<2 + N>();\n\n    log_bytes[0] = eph_pk_sign_byte;\n    let mut offset = 1;\n    for i in 0..header_ciphertext_bytes.len() {\n        log_bytes[offset + i] = header_ciphertext_bytes[i];\n    }\n    offset += header_ciphertext_bytes.len();\n\n    for i in 0..ciphertext_bytes.len() {\n        log_bytes[offset + i] = ciphertext_bytes[i];\n    }\n    offset += ciphertext_bytes.len();\n\n    for i in 0..log_bytes_padding_to_mult_31.len() {\n        log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n    }\n\n    // *****************************************************************************\n    // Convert bytes back to fields\n    // *****************************************************************************\n\n    let log_bytes_as_fields = be_bytes_31_to_fields(log_bytes);\n\n    // *****************************************************************************\n    // Prepend / append fields, to create the final log\n    // *****************************************************************************\n\n    // We don't add any extra random padding.\n    // Whilst we do this in note.nr, we won't do it for this partial_note log, because it's going to get stored in public, and so:\n    // - The nature of the tx is going to be leaked.\n    // - We therefore don't care if it's padded to obscure the length of the actual ciphertext.\n    // Note: partial logs are going to be greatly refactored, soon.\n\n    // We assume that the sender wants for the recipient to find the tagged note, and therefore that they will cooperate\n    // and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the note\n    // automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    // Silo the tag with contract address.\n    // This is done by the kernel circuit to the private logs, but since the partial log will be finalized and emitted\n    // in public as unencrypted log, its tag is not siloed at the moment.\n    // To avoid querying logs using two types of tags, we silo the tag manually here.\n    // TODO(#10273) This should be done by the AVM when it's processing the raw logs instead of their hashes.\n    let siloed_tag = poseidon2_hash([contract_address.to_field(), tag]);\n\n    // Temporary hack so that the partial public log remains the same format.\n    // It should return field array and make the tag the first field as compute_private_log_payload does.\n\n    let mut final_log: [Field; M] = [0; M];\n\n    final_log[0] = siloed_tag;\n    final_log[1] = eph_pk.x;\n\n    let mut offset = 2;\n    for i in 0..log_bytes_as_fields.len() {\n        final_log[offset + i] = log_bytes_as_fields[i];\n    }\n\n    final_log\n}\n"
    },
    "109": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/hash.nr",
      "source": "use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"
    },
    "116": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/history/public_storage.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n    hash::poseidon2_hash_with_separator, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: BlockHeader,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for BlockHeader {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        /// Safety: The witness is only used as a \"magical value\" that makes the proof below pass. Hence it's safe.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert_eq(\n            self.state.partial.public_data_tree.root,\n            root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path),\n            \"Proving public value inclusion failed\",\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(\n                preimage.slot,\n                public_data_tree_index,\n                \"Public data tree index doesn't match witness\",\n            );\n            preimage.value\n        };\n\n        value\n    }\n}\n"
    },
    "118": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr",
      "source": "use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::embedded_curve_ops::multi_scalar_mul;\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n"
    },
    "119": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr",
      "source": "use std::{\n    embedded_curve_ops::fixed_base_scalar_mul, field::bn254::decompose,\n    hash::from_field_unsafe as fr_to_fq_unsafe,\n};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n"
    },
    "120": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr",
      "source": "use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    /// Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n"
    },
    "126": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"
    },
    "135": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/note/discovery/mod.nr",
      "source": "use std::static_assert;\n\nuse crate::{\n    context::unconstrained_context::UnconstrainedContext, note::note_header::NoteHeader,\n    oracle::note_discovery::deliver_note, utils::array,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PRIVATE_LOG_SIZE_IN_FIELDS},\n    hash::compute_note_hash_nonce,\n};\n\n// We reserve two fields in the note log that are not part of the note content: one for the storage slot, and one for\n// the note type id.\nglobal NOTE_LOG_RESERVED_FIELDS: u32 = 2;\npub global MAX_NOTE_SERIALIZED_LEN: u32 = PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_LOG_RESERVED_FIELDS;\n\npub struct NoteHashesAndNullifier {\n    pub note_hash: Field,\n    pub unique_note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Processes a log given its plaintext by trying to find notes encoded in it. This process involves the discovery of\n/// the nonce of any such notes, which requires knowledge of the transaction hash in which the notes would've been\n/// created, along with the list of unique note hashes in said transaction.\n///\n/// Additionally, this requires a `compute_note_hash_and_nullifier` lambda that is able to compute these values for any\n/// note in the contract given their contents. A typical implementation of such a function would look like this:\n///\n/// ```\n/// |packed_note_content, note_header, note_type_id| {\n///     let hashes = if note_type_id == MyNoteType::get_note_type_id() {\n///         assert(packed_note_content.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///         dep::aztec::note::utils::compute_note_hash_and_optionally_a_nullifier(\n///             MyNoteType::unpack_content,\n///             note_header,\n///             true,\n///             packed_note_content.storage(),\n///         )\n///     } else {\n///         panic(f\"Unknown note type id {note_type_id}\")\n///     };\n///\n///     Option::some(dep::aztec::oracle::management::NoteHashesAndNullifier {\n///         note_hash: hashes[0],\n///         unique_note_hash: hashes[1],\n///         inner_nullifier: hashes[3],\n///     })\n/// }\n/// ```\npub unconstrained fn do_process_log<Env>(\n    context: UnconstrainedContext,\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: fn[Env](BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>, NoteHeader, Field) -> Option<NoteHashesAndNullifier>,\n) {\n    let (storage_slot, note_type_id, packed_note_content) =\n        destructure_log_plaintext(log_plaintext);\n\n    // We need to find the note's nonce, which is the one that results in one of the unique note hashes from tx_hash\n    for_each_in_bounded_vec(\n        unique_note_hashes_in_tx,\n        |expected_unique_note_hash, i| {\n            let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n            let header = NoteHeader::new(context.this_address(), candidate_nonce, storage_slot);\n\n            // TODO(#11157): handle failed note_hash_and_nullifier computation\n            let hashes =\n                compute_note_hash_and_nullifier(packed_note_content, header, note_type_id).unwrap();\n\n            if hashes.unique_note_hash == expected_unique_note_hash {\n                // TODO(#10726): push these into a vec to deliver all at once instead of having one oracle call per note\n\n                assert(\n                    deliver_note(\n                        context.this_address(), // TODO(#10727): allow other contracts to deliver notes\n                        storage_slot,\n                        candidate_nonce,\n                        packed_note_content,\n                        hashes.note_hash,\n                        hashes.inner_nullifier,\n                        tx_hash,\n                        recipient,\n                    ),\n                    \"Failed to deliver note\",\n                );\n\n                // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n                // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n                // notes containing random values in order to hide their contents.\n            }\n        },\n    );\n}\n\nunconstrained fn destructure_log_plaintext(\n    log_plaintext: BoundedVec<Field, PRIVATE_LOG_SIZE_IN_FIELDS>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>) {\n    assert(log_plaintext.len() >= NOTE_LOG_RESERVED_FIELDS);\n\n    // If NOTE_LOG_RESERVED_FIELDS is changed, causing the assertion below to fail, then the declarations for\n    // `storage_slot` and `note_type_id` must be updated as well.\n    static_assert(\n        NOTE_LOG_RESERVED_FIELDS == 2,\n        \"unepxected value for NOTE_LOG_RESERVED_FIELDS\",\n    );\n    let storage_slot = log_plaintext.get(0);\n    let note_type_id = log_plaintext.get(1);\n\n    let packed_note_content = array::subbvec(log_plaintext, NOTE_LOG_RESERVED_FIELDS);\n\n    (storage_slot, note_type_id, packed_note_content)\n}\n\nfn for_each_in_bounded_vec<T, let MaxLen: u32, Env>(\n    vec: BoundedVec<T, MaxLen>,\n    f: fn[Env](T, u32) -> (),\n) {\n    for i in 0..MaxLen {\n        if i < vec.len() {\n            f(vec.get_unchecked(i), i);\n        }\n    }\n}\n"
    },
    "136": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr",
      "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_header::NoteHeader,\n    note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_nullify_internal, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let packed_note_content = Note::pack_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        packed_note_content,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"
    },
    "138": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/note/note_emission.nr",
      "source": "/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"
    },
    "140": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr",
      "source": "use crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder},\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\nuse dep::protocol_types::constants::{\n    GET_NOTES_ORACLE_RETURN_LENGTH, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note_content: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note_content[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_content<let N: u32>(\n    packed_note_content: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note_content, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    /// Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    /// is check that the metadata is correct, and that the note exists.\n    let note = unsafe { get_note_internal(storage_slot) };\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    /// Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::array::collapse(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.pack_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_content(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"
    },
    "145": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr",
      "source": "use crate::note::constants::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{NoteStatus, PropertySelector, Select, Sort};\nuse crate::note::note_interface::NoteInterface;\nuse dep::protocol_types::traits::ToField;\nuse std::option::Option;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    pub selects: BoundedVec<Option<Select>, N>,\n    pub sorts: BoundedVec<Option<Sort>, N>,\n    pub limit: u32,\n    pub offset: u32,\n    pub status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N>\n    where\n        Note: NoteInterface<N>,\n    {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE,\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T,\n    ) -> Self\n    where\n        T: ToField,\n    {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        if !dep::std::runtime::is_unconstrained() {\n            assert_constant(limit);\n        }\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"
    },
    "146": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/note/utils.nr",
      "source": "use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n    utils::array,\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    compute_unique_note_hash,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let header = note.get_header();\n    let nonce = header.nonce;\n    let counter = header.note_hash_counter;\n\n    // If same tx note, read request always uses the normal note hash\n    if counter != 0 {\n        note_hash\n    } else {\n        // If the note comes from a different tx, we need to compute the note hash that reached the tree\n        compute_unique_note_hash(\n            nonce,\n            compute_siloed_note_hash(header.contract_address, note_hash),\n        )\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if (header.note_hash_counter != 0) & (header.nonce != 0) {\n        // Non-revertible note, nullified by a revertible nullifier, we need to nullify the note hash that will reach the tree\n        let siloed_note_hash =\n            compute_siloed_note_hash(header.contract_address, note_hash_for_read_request);\n\n        compute_unique_note_hash(header.nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    unpack_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    packed_note_content: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = unpack_content(array::subarray(packed_note_content, 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, note_hash);\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"
    },
    "148": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"
    },
    "149": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr",
      "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"
    },
    "150": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/execution.nr",
      "source": "use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"
    },
    "151": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr",
      "source": "/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values) };\n}\n\npub unconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field]) {\n    let _ = store_in_execution_cache_oracle(values);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field]) -> Field {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n"
    },
    "152": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr",
      "source": "use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"
    },
    "156": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr",
      "source": "use crate::utils::array;\nuse dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    pub index: Field,\n    pub leaf_preimage: PublicDataTreeLeafPreimage,\n    pub path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: array::subarray(fields, 1 + LEAF_PREIMAGE_LENGTH),\n    }\n}\n"
    },
    "157": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr",
      "source": "use dep::protocol_types::abis::validation_requests::{\n    key_validation_request::KEY_VALIDATION_REQUEST_LENGTH, KeyValidationRequest,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"
    },
    "158": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/keys.nr",
      "source": "use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"
    },
    "161": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr",
      "source": "use crate::note::discovery::MAX_NOTE_SERIALIZED_LEN;\nuse dep::protocol_types::address::AztecAddress;\n\n/// Informs PXE of a note's existence so that it can later retrieved by the `getNotes` oracle. The note will be scoped\n/// to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The note's `content` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value is\n/// typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are the\n/// inner hashes, i.e. the raw hashes returned by `NoteInterface::compute_note_hash` and\n/// `NullifiableNote::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree at\n/// `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was sucessfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        content,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    content: BoundedVec<Field, MAX_NOTE_SERIALIZED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n"
    },
    "162": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/notes.nr",
      "source": "use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"
    },
    "164": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/random.nr",
      "source": "/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"
    },
    "165": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/oracle/storage.nr",
      "source": "use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"
    },
    "168": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/map.nr",
      "source": "use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"
    },
    "17": {
      "path": "std/embedded_curve_ops.nr",
      "source": "use crate::cmp::Eq;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"
    },
    "173": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr",
      "source": "use crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context, let N: u32> Storage<N> for PrivateSet<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // TODO: This function is still around because of a stale blacklist token. It should most likely be nuked. If you\n    // need this functionality use partial notes instead.\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"
    },
    "175": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr",
      "source": "use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: U128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"
    },
    "176": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr",
      "source": "use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"
    },
    "18": {
      "path": "std/field/bn254.nr",
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    /// Safety: borrow is enforced to be boolean due to its type.\n    /// if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    /// if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        /// Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            /// Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        /// Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"
    },
    "19": {
      "path": "std/field/mod.nr",
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        /// Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n"
    },
    "195": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr",
      "source": "/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    /// Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n"
    },
    "197": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr",
      "source": "/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n"
    },
    "198": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr",
      "source": "use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    vec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(vec.storage(), offset), vec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n"
    },
    "199": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/utils/bytes.nr",
      "source": "use crate::oracle::random::random;\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole bytes.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted into a Field. If the last chunk\n/// is less than 31 bytes long, then only the relevant bytes are considered.\n/// For example, [1, 10, 3] is encoded as [1 * 256^2 + 10 * 256 + 3]\n/// Note: ceil(N / 31) = (N + 30) / 31\npub fn be_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + j] as Field;\n        }\n\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\npub fn le_bytes_31_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = [0; (N + 30) / 31];\n\n    // There are N / 31 whole fields that can be populated.\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            let k = 31 - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + k] as Field;\n        }\n        fields[i] = field;\n    }\n\n    // Note: if 31 divides N, then this loop does not execute.\n    // ceil(N/31) - floor(N/31) = 1, unless 31 divides N, in which case it's 0.\n    for _ in 0..((N + 30) / 31) - (N / 31) {\n        let mut final_field = 0;\n        let final_field_idx = fields.len() - 1;\n        let final_offset = final_field_idx * 31;\n        // N - ((N / 31) * 31) = N - floor(N/31) * 31 = the number of bytes to go in the final field.\n        for j in 0..N - ((N / 31) * 31) {\n            let k = (N - ((N / 31) * 31)) - j - 1; // iterate in reverse.\n            // Shift the existing value left by 8 bits and add the new byte\n            final_field = final_field * 256 + bytes[final_offset + k] as Field;\n        }\n        fields[final_field_idx] = final_field;\n    }\n\n    fields\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields.\n///\n/// It appears that the original author of this function wants to give the caller some control\n/// over the number of bytes that are returned: the final field can be mapped to fewer than 31 bytes,\n/// based on the caller's choice of M.\n/// Given the input is N fields, and each field (except the last) is mapped to 31 bytes,\n/// we definitely need M > (N - 1) * 31 to cover those first (N - 1) fields. Hence the static assertion.\n/// TODO: this is the same as the \"le\" version of this function, save for the `field.to_be_bytes()` calls. I tried passing the conversion function in as a parameter, to reduce code duplication, but couldn't get it to work.\npub fn fields_to_be_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_be_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each input field must contain only 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 little-endian bytes, and the resulting 31-byte\n/// chunks are concatenated back together in the order of the original fields. You'll\n/// end up with quite a strange ordering of bytes if you use this particular function.\npub fn fields_to_le_bytes_31<let N: u32, let M: u32>(fields: [Field; N]) -> [u8; M] {\n    let mut bytes = [0; M];\n\n    std::static_assert(M > (N - 1) * 31, \"Not enough output bytes specified\");\n    // We make this assertion to keep the logic simpler:\n    std::static_assert(N * 31 >= M, \"Too many output bytes specified.\");\n\n    for i in 0..N - 1 {\n        let field = fields[i];\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_le_bytes();\n\n        for j in 0..31 {\n            bytes[i * 31 + j] = field_as_bytes[j];\n        }\n    }\n\n    let final_field = fields[N - 1];\n    final_field.assert_max_bit_size::<8 * (M - ((N - 1) * 31))>();\n\n    let final_field_as_bytes: [u8; M - ((N - 1) * 31)] = final_field.to_le_bytes();\n\n    let start_index = (N - 1) * 31;\n    for j in 0..M - ((N - 1) * 31) {\n        bytes[start_index + j] = final_field_as_bytes[j];\n    }\n\n    bytes\n}\n\n/// Converts an input array of fields into a single array of bytes.\n/// Each field is converted to a 32-byte big-endian array.\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end,\n/// every 32 bytes. Be careful that such a gap doesn't leak information!\npub fn fields_to_be_bytes_32<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field = fields[i];\n        let field_as_bytes: [u8; 32] = field.to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\nunconstrained fn byte_to_bits(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n\n/// Returns as many random bits as specified through N.\nunconstrained fn get_random_bits<let N: u32>() -> [u1; N] {\n    // Note: (N + 7) / 8 = ceil(N / 8)\n    let bytes = get_random_bytes::<(N + 7) / 8>();\n    let mut bits: [u1; N] = [0; N];\n    for i in 0..bytes.len() - 1 {\n        let mut byte = bytes[i];\n        for j in 0..8 {\n            let bit_idx = i * 8 + j;\n            bits[bit_idx] = (byte & 1) as u1;\n            byte >>= 1;\n        }\n    }\n\n    // N - ((N / 8) * 8) = N - floor(N/8) * 8 = the number of bits remaining.\n    let byte_idx = bytes.len() - 1;\n    let mut byte = bytes[byte_idx];\n    for j in 0..N - ((N / 8) * 8) {\n        let bit_idx = (byte_idx) * 8 + j;\n        bits[bit_idx] = (byte & 1) as u1;\n        byte >>= 1;\n    }\n\n    bits\n}\n\n/// Returns random bits, in chunks, according to the provided numeric generics.\nunconstrained fn get_chunks_of_random_bits<let NUM_CHUNKS: u32, let NUM_BITS: u32>() -> [[u1; NUM_BITS]; NUM_CHUNKS] {\n    let random_bits = get_random_bits::<NUM_CHUNKS * NUM_BITS>();\n    let mut chunks: [[u1; NUM_BITS]; NUM_CHUNKS] = [[0; NUM_BITS]; NUM_CHUNKS];\n    for i in 0..NUM_CHUNKS {\n        let mut chunk: [u1; NUM_BITS] = [0; NUM_BITS];\n        for j in 0..NUM_BITS {\n            chunk[j] = random_bits[i * NUM_BITS + j];\n        }\n        chunks[i] = chunk;\n    }\n    chunks\n}\n\n/**\n * Helper fn for be/le_bytes_to_padded_fields() fns.\n */\nfn pad_31_byte_fields_with_random_bits<let N: u32>(input: [Field; N]) -> [Field; N] {\n    /// Safety: we can't constrain whether or not the returned bits are actually random;\n    /// we can only rely on it being in the caller's best interest.\n    let chunks_of_random_bits = unsafe { get_chunks_of_random_bits::<((N + 30) / 31), 6>() };\n    let mut fields = input;\n    // We push the random bits to the \"big end\" of each field\n    let TWO_POW_248 = 0x100000000000000000000000000000000000000000000000000000000000000;\n    for i in 0..fields.len() {\n        let mut shift = TWO_POW_248;\n        for j in 0..5 {\n            fields[i] += shift * chunks_of_random_bits[i][j] as Field;\n            shift *= 2;\n        }\n\n        // This might overflow the field modulus, so we need to be careful.\n        // By this point, shift = 2 ^ 253, so will populate the 254th bit (counting from 1)\n        let field_with_254th_bit = fields[i] + shift * chunks_of_random_bits[i][6 - 1] as Field;\n\n        // Expensive comparison (one for each field), but it's important -- if we want to hide that we were\n        // working with bytes -- that we include the 254th random bit when it fits.\n        fields[i] = if (fields[i].lt(field_with_254th_bit)) {\n            field_with_254th_bit\n        } else {\n            fields[i]\n        };\n    }\n    fields\n}\n\n/**\n * The above functions be_bytes_31_to_fields and le_bytes_31_to_fields have a privacy-leakage problem:\n * they result in fields which are all 248-bits instead of 254-bits.\n * That means if the above functions are used to convert a ciphertext from bytes to\n * fields, it leaks (with very high probability) to all observers of the log that the\n * ciphertext was created with a \"bit twiddly\" encryption scheme like AES.\n * This reduces privacy sets for all apps.\n *\n * This function seeks to \"pad\" those remaining 6 bits with randomness, so that all\n * encrypted logs look even more similar (full fields of 254-bits of random-looking\n * information). Of course, this adds some extra constraints, unfortunately.\n */\npub fn le_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = le_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\npub fn be_bytes_to_padded_fields<let N: u32>(input: [u8; N]) -> [Field; (N + 30) / 31] {\n    let mut fields = be_bytes_31_to_fields(input);\n    pad_31_byte_fields_with_random_bits(fields)\n}\n\nmod test {\n    use crate::utils::bytes::{\n        be_bytes_31_to_fields, fields_to_be_bytes_31, fields_to_le_bytes_31, le_bytes_31_to_fields,\n    };\n\n    // BE BYTES\n\n    #[test]\n    fn test_be_bytes_31_to_1_field() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_be_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_be_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_be_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_be_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_be_bytes_31(input);\n        println(f\"output: {output}\");\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 2, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_be_bytes_31_to_2_fields() {\n        let input = [\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\n            47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        ];\n        let output = be_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n        assert_eq(output[1], 0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n    }\n\n    #[test]\n    fn test_2_fields_to_be_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_be_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n                24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n                43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_be_bytes_31_input_to_fields_and_back(input: [u8; 128]) {\n        let output = be_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_be_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_be_bytes_31_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_be_bytes_31(input);\n        let input_back = be_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_be_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_be_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_be_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)]; // this number is 1 bit larger than 31 bytes.\n        let _ignored_result: [u8; 31] = fields_to_be_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_be_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_be_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n\n    // LE BYTES\n\n    #[test]\n    fn test_le_bytes_31_to_1_field() {\n        let input = [\n            31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,\n            9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f);\n    }\n\n    #[test]\n    fn test_1_field_to_le_bytes_31() {\n        let input = [0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f];\n        let output: [u8; 31] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_le_bytes_31() {\n        let input = [1, 2, 3];\n        let output: [u8; 93] = fields_to_le_bytes_31(input);\n\n        // Each field should occupy 31 bytes with the non-zero value being placed in the last one.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_3_small_fields_to_fewer_le_bytes() {\n        let input = [1, 2, 3];\n        let output: [u8; 63] = fields_to_le_bytes_31(input);\n\n        // First 2 fields should occupy 31 bytes with the non-zero value being placed in the last one while the last\n        // field should occupy 1 byte. There is not information destruction here because the last field fits into\n        // 1 byte.\n        assert_eq(\n            output,\n            [\n                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 3,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_le_bytes_31_to_2_fields() {\n        let input = [\n            59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,\n            37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,\n            15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,\n        ];\n        let output = le_bytes_31_to_fields(input);\n\n        assert_eq(output[0], 0x1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b);\n        assert_eq(output[1], 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c);\n    }\n\n    #[test]\n    fn test_2_fields_to_le_bytes_31() {\n        let input = [\n            0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f,\n            0x202122232425262728292a2b2c2d2e2f303132333435363738393a3b,\n        ];\n        let output: [u8; 62] = fields_to_le_bytes_31(input);\n\n        assert_eq(\n            output,\n            [\n                31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11,\n                10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47,\n                46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 0, 0, 0,\n            ],\n        );\n    }\n\n    #[test]\n    fn test_large_random_le_bytes_input_to_fields_and_back(input: [u8; 128]) {\n        let output = le_bytes_31_to_fields(input);\n        let input_back: [u8; 128] = fields_to_le_bytes_31(output);\n\n        assert_eq(input, input_back);\n    }\n\n    // I need to get an array of random values lower than 2^248 on input and since there is no u248 type and modulo\n    // operation is not supported on a Field (to do field % 2^248), I will take multiple smaller values and combine\n    // them to get a value lower than 2^248.\n    #[test]\n    fn test_large_random_input_to_le_bytes_and_back(\n        input1: [u64; 5],\n        input2: [u64; 5],\n        input3: [u64; 5],\n        input4: [u32; 5],\n        input5: [u16; 5],\n        input6: [u8; 5],\n    ) {\n        let mut input = [0; 5];\n        for i in 0..5 {\n            input[i] = (input1[i] as Field * 2.pow_32(184))\n                + (input2[i] as Field * 2.pow_32(120))\n                + (input3[i] as Field * 2.pow_32(56))\n                + (input4[i] as Field * 2.pow_32(24))\n                + (input5[i] as Field * 2.pow_32(8))\n                + input6[i] as Field;\n        }\n\n        let output: [u8; 155] = fields_to_le_bytes_31(input);\n        let input_back = le_bytes_31_to_fields(output);\n\n        assert_eq(input, input_back);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_too_few_destination_le_bytes() {\n        // We should get an error here because first field gets converted to 31 bytes and the second field needs\n        // at least 2 bytes but we provide it with 1.\n        let input = [1, 256];\n        let _ignored_result: [u8; 32] = fields_to_le_bytes_31(input);\n    }\n\n    #[test(should_fail_with = \"call to assert_max_bit_size\")]\n    fn test_fields_to_le_bytes_31_value_too_large() {\n        let input = [2.pow_32(248)];\n        let _ignored_result: [u8; 31] = fields_to_le_bytes_31(input);\n    }\n\n    #[test]\n    fn test_fields_to_le_bytes_31_max_value() {\n        let input = [2.pow_32(248) - 1];\n        let result: [u8; 31] = fields_to_le_bytes_31(input);\n\n        // We check that all the bytes were set to max value (255)\n        for i in 0..31 {\n            assert_eq(result[i], 255);\n        }\n    }\n}\n"
    },
    "203": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/utils/point.nr",
      "source": "use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::point_to_bytes;\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"
    },
    "206": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr",
      "source": "use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            /// Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"
    },
    "21": {
      "path": "std/hash/mod.nr",
      "source": "pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    /// Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"
    },
    "221": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"
    },
    "223": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr",
      "source": "use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"
    },
    "258": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr",
      "source": "use crate::{point::Point, traits::{Deserialize, Empty, Serialize}};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pub pk_m: Point,\n    pub sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"
    },
    "26": {
      "path": "std/hash/poseidon2.nr",
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"
    },
    "265": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr",
      "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"
    },
    "27": {
      "path": "std/hash/sha256.nr",
      "source": "use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE: u32 = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR: u32 = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE: u32 = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE: u32 = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR: u32 = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8: u32 = 256;\nglobal TWO_POW_16: u32 = TWO_POW_8 * 256;\nglobal TWO_POW_24: u32 = TWO_POW_16 * 256;\nglobal TWO_POW_32: u64 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        /// Safety: the msg_block is checked below in verify_msg_block\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    /// Safety: the msg_len is checked below in verify_msg_len\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n\n        /// Safety: testing context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        /// Safety: test context\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        /// Safety: testing context\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n"
    },
    "280": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr",
      "source": "use crate::{\n    data::public_data_tree_leaf::PublicDataTreeLeaf,\n    merkle_tree::leaf_preimage::{IndexedTreeLeafPreimage, LeafPreimage},\n    traits::{Empty, Hash},\n};\n\npub struct PublicDataTreeLeafPreimage {\n    pub slot: Field,\n    pub value: Field,\n    pub next_slot: Field,\n    pub next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Eq for PublicDataTreeLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.slot == other.slot)\n            & (self.value == other.value)\n            & (self.next_slot == other.next_slot)\n            & (self.next_index == other.next_index)\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl LeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage<PublicDataTreeLeaf> for PublicDataTreeLeafPreimage {\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn points_to_infinity(self) -> bool {\n        (self.next_slot == 0) & (self.next_index == 0)\n    }\n\n    fn update_pointers(self, next_slot: Field, next_index: u32) -> Self {\n        Self { slot: self.slot, value: self.value, next_slot, next_index }\n    }\n\n    fn update_value(self, write: PublicDataTreeLeaf) -> Self {\n        Self {\n            slot: self.slot,\n            value: write.value,\n            next_slot: self.next_slot,\n            next_index: self.next_index,\n        }\n    }\n\n    fn build_insertion_leaf(write: PublicDataTreeLeaf, low_leaf: Self) -> Self {\n        Self {\n            slot: write.slot,\n            value: write.value,\n            next_slot: low_leaf.next_slot,\n            next_index: low_leaf.next_index,\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"
    },
    "281": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr",
      "source": "/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"
    },
    "282": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr",
      "source": "use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"
    },
    "283": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr",
      "source": "use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n"
    },
    "292": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr",
      "source": "use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"
    },
    "298": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/point.nr",
      "source": "pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n"
    },
    "299": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr",
      "source": "use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n"
    },
    "3": {
      "path": "std/array/mod.nr",
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        /// Safety: `sorted` array is checked to be:\n        /// a. a permutation of `input`'s elements\n        /// b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"
    },
    "308": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr",
      "source": "use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"
    },
    "311": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr",
      "source": "use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"
    },
    "324": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr",
      "source": "use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"
    },
    "328": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr",
      "source": "use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n"
    },
    "329": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr",
      "source": "use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"
    },
    "345": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr",
      "source": "pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"
    },
    "346": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr",
      "source": "pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"
    },
    "348": {
      "path": "/build-volume/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr",
      "source": "pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"
    },
    "353": {
      "path": "/root/nargo/github.com/noir-lang/ec/v0.1.2/src/lib.nr",
      "source": "// Elliptic curve implementation\n// Overview\n// ========\n// The following three elliptic curve representations are admissible:\npub mod tecurve; // Twisted Edwards curves\npub mod swcurve; // Elliptic curves in Short Weierstrass form\npub mod montcurve; // Montgomery curves\npub mod consts; // Commonly used curve presets\n//\n// Note that Twisted Edwards and Montgomery curves are (birationally) equivalent, so that\n// they may be freely converted between one another, whereas Short Weierstrass curves are\n// more general. Diagramatically:\n//\n// tecurve == montcurve `subset` swcurve\n//\n// Each module is further divided into two submodules, 'affine' and 'curvegroup', depending\n// on the preferred coordinate representation. Affine coordinates are none other than the usual\n// two-dimensional Cartesian coordinates used in the definitions of these curves, whereas\n// 'CurveGroup' coordinates (terminology borrowed from Arkworks, whose conventions we try\n// to follow) are special coordinate systems with respect to which the group operations may be\n// implemented more efficiently, usually by means of an appropriate choice of projective coordinates.\n//\n// In each of these submodules, there is a Point struct and a Curve struct, the former\n// representing a point in the coordinate system and the latter a curve configuration.\n//\n// Points\n// ======\n// Points may be instantiated using the associated function `new`, which takes coordinates\n// as its arguments. For instance,\n//\n// `let p = swcurve::Point::new(1,1);`\n//\n// The additive identity may be constructed by a call to the associated function `zero` of no\n// arguments:\n//\n// `let zero = swcurve::Point::zero();`\n//\n// Points may be tested for equality by calling the method `eq`:\n//\n// `let pred = p.eq(zero);`\n//\n// There is also the method `is_zero` to explicitly check whether a point is the additive identity:\n//\n// `constrain pred == p.is_zero();`\n//\n// Points may be negated by calling the `negate` method and converted to CurveGroup (or affine)\n// coordinates by calling the `into_group` (resp. `into_affine`) method on them. Finally,\n// Points may be freely mapped between their respective Twisted Edwards and Montgomery\n// representations by calling the `into_montcurve` or `into_tecurve` methods. For mappings\n// between Twisted Edwards/Montgomery curves and Short Weierstrass curves, see the Curve section\n// below, as the underlying mappings are those of curves rather than ambient spaces.\n// As a rule, Points in affine (or CurveGroup) coordinates are mapped to Points in affine\n// (resp. CurveGroup) coordinates.\n//\n// Curves\n// ======\n// A curve configuration (Curve) is completely determined by the Field coefficients of its defining\n// equation (a and b in the case of swcurve, a and d in the case of tecurve, and j and k in\n// the case of montcurve) together with a generator (`gen`) in the corresponding coordinate system.\n// For example, the Baby Jubjub curve configuration as defined in ERC-2494 may be instantiated as a Twisted\n// Edwards curve in affine coordinates as follows:\n//\n// `let bjj_affine = tecurve::Curve::new(168700, 168696, tecurve::Point::new(995203441582195749578291179787384436505546430278305826713579947235728471134,5472060717959818805561601436314318772137091100104008585924551046643952123905));`\n//\n// The `contains` method may be used to check whether a Point lies on a given curve:\n//\n// `constrain bjj_affine.contains(tecurve::Point::zero());`\n//\n// The elliptic curve group's addition operation is exposed as the `add` method, e.g.\n//\n// `let p = bjj_affine.add(bjj_affine.gen, bjj_affine.gen);`\n//\n// subtraction as the `subtract` method, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.subtract(bjj_affine.gen, bjj_affine.gen));`\n//\n// scalar multiplication as the `mul` method, where the scalar is assumed to be a Field* element, e.g.\n//\n// `constrain tecurve::Point::zero().eq(bjj_affine.mul(2, tecurve::Point::zero());`\n//\n// There is a scalar multiplication method (`bit_mul`) provided where the scalar input is expected to be\n// an array of bits (little-endian convention), as well as a multi-scalar multiplication method** (`msm`)\n// which takes an array of Field elements and an array of elliptic curve points as arguments, both assumed\n// to be of the same length.\n//\n// Curve configurations may be converted between different coordinate representations by calling the `into_group`\n// and `into_affine` methods on them, e.g.\n//\n// `let bjj_curvegroup = bjj_affine.into_group();`\n//\n// Curve configurations may also be converted between different curve representations by calling the `into_swcurve`,\n// `into_montcurve` and `into_tecurve` methods subject to the relation between the curve representations mentioned\n// above. Note that it is possible to map Points from a Twisted Edwards/Montgomery curve to the corresponding\n// Short Weierstrass representation and back, and the methods to do so are exposed as `map_into_swcurve` and\n// `map_from_swcurve`, which each take one argument, the point to be mapped.\n//\n// Curve maps\n// ==========\n// There are a few different ways of mapping Field elements to elliptic curves. Here we provide the simplified\n// Shallue-van de Woestijne-Ulas and Elligator 2 methods, the former being applicable to all curve types\n// provided above subject to the constraint that the coefficients of the corresponding Short Weierstrass curve satisfies\n// a*b != 0 and the latter being applicable to Montgomery and Twisted Edwards curves subject to the constraint that\n// the coefficients of the corresponding Montgomery curve satisfy j*k != 0 and (j^2 - 4)/k^2 is non-square.\n//\n// The simplified Shallue-van de Woestijne-Ulas method is exposed as the method `swu_map` on the Curve configuration and\n// depends on two parameters, a Field element z != -1 for which g(x) - z is irreducible over Field and g(b/(z*a)) is\n// square, where g(x) = x^3 + a*x + b is the right-hand side of the defining equation of the corresponding Short\n// Weierstrass curve, and a Field element u to be mapped onto the curve. For example, in the case of bjj_affine above,\n// it may be determined using the scripts provided at <https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve> that z = 5.\n//\n// The Elligator 2 method is exposed as the method `elligator2_map` on the Curve configurations of Montgomery and\n// Twisted Edwards curves. Like the simplified SWU method above, it depends on a certain non-square element of Field,\n// but this element need not satisfy any further conditions, so it is included as the (Field-dependent) constant\n//`ZETA` below. Thus, the `elligator2_map` method depends only on one parameter, the Field element to be mapped onto\n// the curve.\n//\n// For details on all of the above in the context of hashing to elliptic curves, see <https://datatracker.ietf.org/doc/id/draft-irtf-cfrg-hash-to-curve-06.html>.\n//\n//\n// *TODO: Replace Field with Bigint.\n// **TODO: Support arrays of structs to make this work.\n// Field-dependent constant ZETA = a non-square element of Field\n// Required for Elligator 2 map\n// TODO: Replace with built-in constant.\nglobal ZETA: Field = 5;\n// Field-dependent constants for Tonelli-Shanks algorithm (see sqrt function below)\n// TODO: Possibly make this built-in.\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n// Higher-order version of scalar multiplication\n// TODO: Make this work so that the submodules' bit_mul may be defined in terms of it.\n//fn bit_mul<T,N>(add: fn(T,T) -> T, e: T, bits: [u1; N], p: T) -> T {\n//    let mut out = e;\n//    let n = bits.len();\n//\n//    for i in 0..n {\n//        out = add(\n//            add(out, out),\n//            if(bits[n - i - 1] == 0) {e} else {p});\n//    }\n//\n//    out\n//}\n// TODO: Make this built-in.\npub fn safe_inverse(x: Field) -> Field {\n    if x == 0 {\n        0\n    } else {\n        1 / x\n    }\n}\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\npub fn is_square(x: Field) -> bool {\n    let v = pow(x, 0 - 1 / 2);\n\n    v * (v - 1) == 0\n}\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\nmod tests {\n    use crate::montcurve::affine::Point as MGaffine;\n    use crate::montcurve::curvegroup::Point as MG;\n    use crate::swcurve::affine::Point as SWGaffine;\n    use crate::swcurve::curvegroup::Point as SWG;\n    use crate::tecurve::affine::Curve as AffineCurve;\n    use crate::tecurve::affine::Point as Gaffine;\n    use crate::tecurve::curvegroup::Point as G;\n\n    #[test]\n    fn smoke_test() {\n        // Tests may be checked against https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/tree/main/poc\n        // Define Baby Jubjub (ERC-2494) parameters in affine representation\n        let bjj_affine = AffineCurve::new(\n            168700,\n            168696,\n            Gaffine::new(\n                995203441582195749578291179787384436505546430278305826713579947235728471134,\n                5472060717959818805561601436314318772137091100104008585924551046643952123905,\n            ),\n        );\n        // Test addition\n        let p1_affine = Gaffine::new(\n            17777552123799933955779906779655732241715742912184938656739573121738514868268,\n            2626589144620713026669568689430873010625803728049924121243784502389097019475,\n        );\n        let p2_affine = Gaffine::new(\n            16540640123574156134436876038791482806971768689494387082833631921987005038935,\n            20819045374670962167435360035096875258406992893633759881276124905556507972311,\n        );\n\n        let p3_affine = bjj_affine.add(p1_affine, p2_affine);\n        assert(p3_affine.eq(Gaffine::new(\n            7916061937171219682591368294088513039687205273691143098332585753343424131937,\n            14035240266687799601661095864649209771790948434046947201833777492504781204499,\n        )));\n        // Test scalar multiplication\n        let p4_affine = bjj_affine.mul(2, p1_affine);\n        assert(p4_affine.eq(Gaffine::new(\n            6890855772600357754907169075114257697580319025794532037257385534741338397365,\n            4338620300185947561074059802482547481416142213883829469920100239455078257889,\n        )));\n        assert(p4_affine.eq(bjj_affine.bit_mul([0, 1], p1_affine)));\n        // Test subtraction\n        let p5_affine = bjj_affine.subtract(p3_affine, p3_affine);\n        assert(p5_affine.eq(Gaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_affine.contains(bjj_affine.gen)\n                & bjj_affine.contains(p1_affine)\n                & bjj_affine.contains(p2_affine)\n                & bjj_affine.contains(p3_affine)\n                & bjj_affine.contains(p4_affine)\n                & bjj_affine.contains(p5_affine),\n        );\n        // Test CurveGroup equivalents\n        let bjj = bjj_affine.into_group(); // Baby Jubjub\n        let p1 = p1_affine.into_group();\n        let p2 = p2_affine.into_group();\n        let p3 = p3_affine.into_group();\n        let p4 = p4_affine.into_group();\n        let p5 = p5_affine.into_group();\n        // Test addition\n        assert(p3.eq(bjj.add(p1, p2)));\n        // Test scalar multiplication\n        assert(p4.eq(bjj.mul(2, p1)));\n        assert(p4.eq(bjj.bit_mul([0, 1], p1)));\n        // Test subtraction\n        assert(G::zero().eq(bjj.subtract(p3, p3)));\n        assert(p5.eq(G::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj.contains(bjj.gen)\n                & bjj.contains(p1)\n                & bjj.contains(p2)\n                & bjj.contains(p3)\n                & bjj.contains(p4)\n                & bjj.contains(p5),\n        );\n        // Test SWCurve equivalents of the above\n        // First the affine representation\n        let bjj_swcurve_affine = bjj_affine.into_swcurve();\n\n        let p1_swcurve_affine = bjj_affine.map_into_swcurve(p1_affine);\n        let p2_swcurve_affine = bjj_affine.map_into_swcurve(p2_affine);\n        let p3_swcurve_affine = bjj_affine.map_into_swcurve(p3_affine);\n        let p4_swcurve_affine = bjj_affine.map_into_swcurve(p4_affine);\n        let p5_swcurve_affine = bjj_affine.map_into_swcurve(p5_affine);\n        // Addition\n        assert(p3_swcurve_affine.eq(bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine)));\n        // Doubling\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.mul(2, p1_swcurve_affine)));\n        assert(p4_swcurve_affine.eq(bjj_swcurve_affine.bit_mul([0, 1], p1_swcurve_affine)));\n        // Subtraction\n        assert(SWGaffine::zero().eq(bjj_swcurve_affine.subtract(\n            p3_swcurve_affine,\n            p3_swcurve_affine,\n        )));\n        assert(p5_swcurve_affine.eq(SWGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve_affine.contains(bjj_swcurve_affine.gen)\n                & bjj_swcurve_affine.contains(p1_swcurve_affine)\n                & bjj_swcurve_affine.contains(p2_swcurve_affine)\n                & bjj_swcurve_affine.contains(p3_swcurve_affine)\n                & bjj_swcurve_affine.contains(p4_swcurve_affine)\n                & bjj_swcurve_affine.contains(p5_swcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_swcurve = bjj.into_swcurve();\n\n        let p1_swcurve = bjj.map_into_swcurve(p1);\n        let p2_swcurve = bjj.map_into_swcurve(p2);\n        let p3_swcurve = bjj.map_into_swcurve(p3);\n        let p4_swcurve = bjj.map_into_swcurve(p4);\n        let p5_swcurve = bjj.map_into_swcurve(p5);\n        // Addition\n        assert(p3_swcurve.eq(bjj_swcurve.add(p1_swcurve, p2_swcurve)));\n        // Doubling\n        assert(p4_swcurve.eq(bjj_swcurve.mul(2, p1_swcurve)));\n        assert(p4_swcurve.eq(bjj_swcurve.bit_mul([0, 1], p1_swcurve)));\n        // Subtraction\n        assert(SWG::zero().eq(bjj_swcurve.subtract(p3_swcurve, p3_swcurve)));\n        assert(p5_swcurve.eq(SWG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_swcurve.contains(bjj_swcurve.gen)\n                & bjj_swcurve.contains(p1_swcurve)\n                & bjj_swcurve.contains(p2_swcurve)\n                & bjj_swcurve.contains(p3_swcurve)\n                & bjj_swcurve.contains(p4_swcurve)\n                & bjj_swcurve.contains(p5_swcurve),\n        );\n        // Test MontCurve conversions\n        // First the affine representation\n        let bjj_montcurve_affine = bjj_affine.into_montcurve();\n\n        let p1_montcurve_affine = p1_affine.into_montcurve();\n        let p2_montcurve_affine = p2_affine.into_montcurve();\n        let p3_montcurve_affine = p3_affine.into_montcurve();\n        let p4_montcurve_affine = p4_affine.into_montcurve();\n        let p5_montcurve_affine = p5_affine.into_montcurve();\n        // Addition\n        assert(p3_montcurve_affine.eq(bjj_montcurve_affine.add(\n            p1_montcurve_affine,\n            p2_montcurve_affine,\n        )));\n        // Doubling\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.mul(2, p1_montcurve_affine)));\n        assert(p4_montcurve_affine.eq(bjj_montcurve_affine.bit_mul([0, 1], p1_montcurve_affine)));\n        // Subtraction\n        assert(MGaffine::zero().eq(bjj_montcurve_affine.subtract(\n            p3_montcurve_affine,\n            p3_montcurve_affine,\n        )));\n        assert(p5_montcurve_affine.eq(MGaffine::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve_affine.contains(bjj_montcurve_affine.gen)\n                & bjj_montcurve_affine.contains(p1_montcurve_affine)\n                & bjj_montcurve_affine.contains(p2_montcurve_affine)\n                & bjj_montcurve_affine.contains(p3_montcurve_affine)\n                & bjj_montcurve_affine.contains(p4_montcurve_affine)\n                & bjj_montcurve_affine.contains(p5_montcurve_affine),\n        );\n        // Then the CurveGroup representation\n        let bjj_montcurve = bjj.into_montcurve();\n\n        let p1_montcurve = p1_montcurve_affine.into_group();\n        let p2_montcurve = p2_montcurve_affine.into_group();\n        let p3_montcurve = p3_montcurve_affine.into_group();\n        let p4_montcurve = p4_montcurve_affine.into_group();\n        let p5_montcurve = p5_montcurve_affine.into_group();\n        // Addition\n        assert(p3_montcurve.eq(bjj_montcurve.add(p1_montcurve, p2_montcurve)));\n        // Doubling\n        assert(p4_montcurve.eq(bjj_montcurve.mul(2, p1_montcurve)));\n        assert(p4_montcurve.eq(bjj_montcurve.bit_mul([0, 1], p1_montcurve)));\n        // Subtraction\n        assert(MG::zero().eq(bjj_montcurve.subtract(p3_montcurve, p3_montcurve)));\n        assert(p5_montcurve.eq(MG::zero()));\n        // Check that these points are on the curve\n        assert(\n            bjj_montcurve.contains(bjj_montcurve.gen)\n                & bjj_montcurve.contains(p1_montcurve)\n                & bjj_montcurve.contains(p2_montcurve)\n                & bjj_montcurve.contains(p3_montcurve)\n                & bjj_montcurve.contains(p4_montcurve)\n                & bjj_montcurve.contains(p5_montcurve),\n        );\n        // Elligator 2 map-to-curve\n        let ell2_pt_map = bjj_affine.elligator2_map(27);\n\n        assert(ell2_pt_map.eq(MGaffine::new(\n            7972459279704486422145701269802978968072470631857513331988813812334797879121,\n            8142420778878030219043334189293412482212146646099536952861607542822144507872,\n        )\n            .into_tecurve()));\n        // SWU map-to-curve\n        let swu_pt_map = bjj_affine.swu_map(5, 27);\n\n        assert(swu_pt_map.eq(bjj_affine.map_from_swcurve(SWGaffine::new(\n            2162719247815120009132293839392097468339661471129795280520343931405114293888,\n            5341392251743377373758788728206293080122949448990104760111875914082289313973,\n        ))));\n    }\n\n}\n"
    },
    "361": {
      "path": "/build-volume/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr",
      "source": "use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"
    },
    "364": {
      "path": "/build-volume/noir-projects/aztec-nr/uint-note/src/uint_note.nr",
      "source": "use dep::aztec::{\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::partial_note,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::random::random,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n        traits::{Packable, Serialize},\n    },\n};\n\n// docs:start:UintNote\n#[partial_note(quote {value})]\n#[derive(Serialize)]\npub struct UintNote {\n    // The amount of tokens in the note\n    value: U128,\n    owner: AztecAddress,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:UintNote\n\nimpl NullifiableNote for UintNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let owner_npk_m_hash = get_public_keys(self.owner).npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.owner == other.owner)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: U128, owner: AztecAddress) -> Self {\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_value(self) -> U128 {\n        self.value\n    }\n}\n"
    },
    "51": {
      "path": "std/option.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"
    },
    "52": {
      "path": "std/panic.nr",
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"
    },
    "6": {
      "path": "std/cmp.nr",
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"
    },
    "60": {
      "path": "std/uint128.nr",
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::ops::{Add, BitAnd, BitOr, BitXor, Div, Mul, Not, Rem, Shl, Shr, Sub};\nuse crate::static_assert;\nuse super::{convert::AsPrimitive, default::Default};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        static_assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn unconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                /// Safety: optionally adds 32 and then check (below) the result is in 'a..f' range\n                let ascii =\n                    ascii + 32 * (unsafe { U128::unconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128\n    where\n        T: AsPrimitive<Field>,\n    {\n        let f = i.as_();\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T\n    where\n        Field: AsPrimitive<T>,\n    {\n        AsPrimitive::as_(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        /// Safety: euclidian division is asserted to be correct: assert(a == b * q + r); and assert(r < b);\n        /// Furthermore, U128 addition and multiplication ensures that b * q + r does not overflow\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        /// Safety: cf div() above\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nimpl Default for U128 {\n    fn default() -> Self {\n        U128::zero()\n    }\n}\n\nmod tests {\n    use crate::default::Default;\n    use crate::ops::Not;\n    use crate::uint128::{pow63, pow64, U128};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        /// Safety: testing context\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        /// Safety: testing context\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n\n    #[test]\n    fn test_default() {\n        assert_eq(U128::default(), U128::zero());\n    }\n}\n"
    },
    "62": {
      "path": "/build-volume/noir-projects/noir-contracts/contracts/token_contract/src/main.nr",
      "source": "// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n#[aztec]\npub contract Token {\n    // Libs\n    use std::meta::derive;\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateCallInterface, PrivateContext},\n        encrypted_logs::log_assembly_strategies::default_aes128::{\n            event::encode_and_encrypt_event_unconstrained,\n            note::{encode_and_encrypt_note, encode_and_encrypt_note_unconstrained},\n        },\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, view},\n            storage::storage,\n        },\n        oracle::random::random,\n        prelude::{\n            AztecAddress, FunctionSelector, Map, PublicContext, PublicImmutable, PublicMutable,\n        },\n        protocol_types::{point::Point, traits::Serialize},\n    };\n\n    use dep::uint_note::uint_note::UintNote;\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    // docs:end:import_authwit\n\n    use crate::types::balance_set::BalanceSet;\n\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[derive(Serialize)]\n    #[event]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: U128,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress, Context>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: Map<AztecAddress, BalanceSet<Context>, Context>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<U128, Context>, Context>,\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        // docs:start:storage_decimals\n        decimals: PublicImmutable<u8, Context>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    // docs:start:admin\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[public]\n    #[view]\n    fn total_supply() -> U128 {\n        storage.total_supply.read()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> U128 {\n        storage.public_balances.at(owner).read()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_to_public\n    #[public]\n    fn mint_to_public(to: AztecAddress, amount: U128) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_to_public\n\n    // docs:start:transfer_in_public\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_in_public\n\n    // docs:start:burn_public\n    #[public]\n    fn burn_public(from: AztecAddress, amount: U128, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:transfer_to_public\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:transfer_to_public\n\n    // docs:start:transfer\n    #[private]\n    fn transfer(to: AztecAddress, amount: U128) {\n        let from = context.msg_sender();\n\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(from).add(from, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_in_private`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount }.emit(encode_and_encrypt_event_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n    }\n    // docs:end:transfer\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32,\n    ) -> U128 {\n        let subtracted = storage.balances.at(account).try_sub(amount, max_notes);\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::zero(), \"Balance too low\");\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128,\n    ) -> PrivateCallInterface<25, U128> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining)\n    }\n\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: U128) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            amount,\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_in_private\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, amount: U128, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note(&mut context, to, from));\n    }\n    // docs:end:transfer_in_private\n\n    // docs:start:burn_private\n    #[private]\n    fn burn_private(from: AztecAddress, amount: U128, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn_private\n\n    // docs:start:transfer_to_private\n    // Transfers token `amount` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, amount: U128) {\n        // `from` is the owner of the public balance from which we'll subtract the `amount`.\n        let from = context.msg_sender();\n        let token = Token::at(context.this_address());\n\n        // We prepare the private balance increase (the partial note).\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the transfer. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own tokens.\n        token._finalize_transfer_to_private_unsafe(from, amount, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n    // docs:end:transfer_to_private\n\n    // docs:start:prepare_private_balance_increase\n    /// Prepares an increase of private balance of `to` (partial note). The increase needs to be finalized by calling\n    /// some of the finalization functions (`finalize_transfer_to_private`, `finalize_mint_to_private`).\n    /// Returns a hiding point slot.\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress, from: AztecAddress) -> Field {\n        // TODO(#9887): ideally we'd not have `from` here, but we do need a `from` address to produce a tagging secret\n        // with `to`.\n        _prepare_private_balance_increase(from, to, &mut context, storage)\n    }\n    // docs:end:prepare_private_balance_increase\n\n    /// This function exists separately from `prepare_private_balance_increase` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_note_slot = storage.balances.at(to).set.storage_slot;\n\n        // We create a setup payload with unpopulated/zero `amount` for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n\n        /// Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        /// so a malicious sender could use non-random values to make the note less private. But they already know\n        /// the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        /// information. We can therefore assume that the sender will cooperate in the random value generation.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload = UintNote::setup_payload().new(to, note_randomness, to_note_slot);\n\n        // We get the keys and encrypt the log of the note\n        let setup_log = note_setup_payload.encrypt_log(context, to, from);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        Token::at(context.this_address())\n            ._store_payload_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n                setup_log,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    // docs:start:finalize_transfer_to_private\n    /// Finalizes a transfer of token `amount` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(amount: U128, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private\n\n    // docs:start:finalize_transfer_to_private_unsafe\n    /// This is a wrapper around `_finalize_transfer_to_private` placed here so that a call\n    /// to `_finalize_transfer_to_private` can be enqueued. Called unsafe as it does not check `from` (this has to be\n    /// done in the calling function).\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_transfer_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // First we subtract the `amount` from the public balance of `from`\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // docs:start:mint_to_private\n    /// Mints token `amount` to a private balance of `to`. Message sender has to have minter permissions (checked\n    /// in the enqueued call).\n    #[private]\n    fn mint_to_private(\n        from: AztecAddress, // sender of the tag: TODO(#9887): this is not great?\n        to: AztecAddress,\n        amount: U128,\n    ) {\n        let token = Token::at(context.this_address());\n\n        // We prepare the partial note to which we'll \"send\" the minted amount.\n        let hiding_point_slot = _prepare_private_balance_increase(from, to, &mut context, storage);\n\n        // At last we finalize the mint. Usage of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that only a message sender with minter permissions\n        // can successfully execute the function.\n        token\n            ._finalize_mint_to_private_unsafe(context.msg_sender(), amount, hiding_point_slot)\n            .enqueue(&mut context);\n    }\n    // docs:end:mint_to_private\n\n    // docs:start:finalize_mint_to_private\n    /// Finalizes a mint of token `amount` to a private balance of `to`. The mint must be prepared by calling\n    /// `prepare_private_balance_increase` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    ///\n    /// Note: This function is only an optimization as it could be replaced by a combination of `mint_to_public`\n    /// and `finalize_transfer_to_private`. It is however used very commonly so it makes sense to optimize it\n    /// (e.g. used during token bridging, in AMM liquidity token etc.).\n    #[public]\n    fn finalize_mint_to_private(amount: U128, hiding_point_slot: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private\n\n    // docs:start:finalize_mint_to_private_unsafe\n    #[public]\n    #[internal]\n    fn _finalize_mint_to_private_unsafe(\n        from: AztecAddress,\n        amount: U128,\n        hiding_point_slot: Field,\n    ) {\n        // We check the minter permissions as it was not done in `mint_to_private` function.\n        assert(storage.minters.at(from).read(), \"caller is not minter\");\n        _finalize_mint_to_private(amount, hiding_point_slot, &mut context, storage);\n    }\n    // docs:end:finalize_mint_to_private_unsafe\n\n    #[contract_library_method]\n    fn _finalize_mint_to_private(\n        amount: U128,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        // First we increase the total supply by the `amount`\n        let supply = storage.total_supply.read().add(amount);\n        storage.total_supply.write(supply);\n\n        // Then we finalize the partial note with the `amount`\n        let finalization_payload =\n            UintNote::finalization_payload().new(context, hiding_point_slot, amount);\n\n        // At last we emit the note hash and the final log\n        finalization_payload.emit();\n    }\n\n    // TODO(#9375): Having to define the note log length here is very unfortunate as it's basically impossible for\n    // users to derive manually. This will however go away once we have a real transient storage since we will not need\n    // the public call and instead we would do something like `context.transient_storage_write(slot, payload)` and that\n    // will allow us to use generics and hence user will not need to define it explicitly. We cannot use generics here\n    // as it is an entrypoint function.\n    #[public]\n    #[internal]\n    fn _store_payload_in_transient_storage_unsafe(\n        slot: Field,\n        point: Point,\n        setup_log: [Field; 9],\n    ) {\n        context.storage_write(slot, point);\n        context.storage_write(slot + aztec::protocol_types::point::POINT_LENGTH as Field, setup_log);\n    }\n\n    /// Internal ///\n    // docs:start:increase_public_balance\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: U128) {\n        _increase_public_balance_inner(to, amount, storage);\n    }\n    // docs:end:increase_public_balance\n\n    #[contract_library_method]\n    fn _increase_public_balance_inner(\n        to: AztecAddress,\n        amount: U128,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n    }\n\n    // docs:start:reduce_total_supply\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: U128) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n    // docs:start:balance_of_private\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub U128 {\n        storage.balances.at(owner).balance_of()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n"
    },
    "7": {
      "path": "std/collections/bounded_vec.nr",
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n"
    },
    "75": {
      "path": "/build-volume/noir-projects/noir-contracts/contracts/token_contract/src/types/balance_set.nr",
      "source": "use dep::aztec::{\n    context::{PrivateContext, UnconstrainedContext},\n    note::note_emission::OuterNoteEmission,\n    protocol_types::{address::AztecAddress, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n};\nuse dep::aztec::prelude::{NoteGetterOptions, NoteViewerOptions, PrivateSet};\nuse dep::uint_note::uint_note::UintNote;\n\npub struct BalanceSet<Context> {\n    pub set: PrivateSet<UintNote, Context>,\n}\n\nimpl<Context> BalanceSet<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { set: PrivateSet::new(context, storage_slot) }\n    }\n}\n\nimpl BalanceSet<UnconstrainedContext> {\n    pub unconstrained fn balance_of(self: Self) -> U128 {\n        self.balance_of_with_offset(0)\n    }\n\n    pub unconstrained fn balance_of_with_offset(self: Self, offset: u32) -> U128 {\n        let mut balance = U128::from_integer(0);\n        // docs:start:view_notes\n        let mut options = NoteViewerOptions::new();\n        let notes = self.set.view_notes(options.set_offset(offset));\n        // docs:end:view_notes\n        for i in 0..options.limit {\n            if i < notes.len() {\n                balance = balance + notes.get_unchecked(i).get_value();\n            }\n        }\n        if (notes.len() == options.limit) {\n            balance = balance + self.balance_of_with_offset(offset + options.limit);\n        }\n\n        balance\n    }\n}\n\nimpl BalanceSet<&mut PrivateContext> {\n    pub fn add(self: Self, owner: AztecAddress, addend: U128) -> OuterNoteEmission<UintNote> {\n        if addend == U128::from_integer(0) {\n            OuterNoteEmission::new(Option::none())\n        } else {\n            // We fetch the nullifier public key hash from the registry / from our PXE\n            let mut addend_note = UintNote::new(addend, owner);\n\n            // docs:start:insert\n            OuterNoteEmission::new(Option::some(self.set.insert(&mut addend_note)))\n            // docs:end:insert\n        }\n    }\n\n    pub fn sub(self: Self, owner: AztecAddress, amount: U128) -> OuterNoteEmission<UintNote> {\n        let subtracted = self.try_sub(amount, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL);\n\n        // try_sub may have substracted more or less than amount. We must ensure that we subtracted at least as much as\n        // we needed, and then create a new note for the owner for the change (if any).\n        assert(subtracted >= amount, \"Balance too low\");\n        self.add(owner, subtracted - amount)\n    }\n\n    // Attempts to remove 'target_amount' from the owner's balance. try_sub returns how much was actually subtracted\n    // (i.e. the sum of the value of nullified notes), but this subtracted amount may be more or less than the target\n    // amount.\n    // This may seem odd, but is unfortunately unavoidable due to the number of notes available and their amounts being\n    // unknown. What try_sub does is a best-effort attempt to consume as few notes as possible that add up to more than\n    // `target_amount`.\n    // The `max_notes` parameter is used to fine-tune the number of constraints created by this function. The gate count\n    // scales relatively linearly with `max_notes`, but a lower `max_notes` parameter increases the likelihood of\n    // `try_sub` subtracting an amount smaller than `target_amount`.\n    pub fn try_sub(self: Self, target_amount: U128, max_notes: u32) -> U128 {\n        // We are using a preprocessor here (filter applied in an unconstrained context) instead of a filter because\n        // we do not need to prove correct execution of the preprocessor.\n        // Because the `min_sum` notes is not constrained, users could choose to e.g. not call it. However, all this\n        // might result in is simply higher DA costs due to more nullifiers being emitted. Since we don't care\n        // about proving optimal note usage, we can save these constraints and make the circuit smaller.\n        let options = NoteGetterOptions::with_preprocessor(preprocess_notes_min_sum, target_amount)\n            .set_limit(max_notes);\n        let notes = self.set.pop_notes(options);\n\n        let mut subtracted = U128::from_integer(0);\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                subtracted = subtracted + note.get_value();\n            }\n        }\n\n        subtracted\n    }\n}\n\n// Computes the partial sum of the notes array, stopping once 'min_sum' is reached. This can be used to minimize the\n// number of notes read that add to some value, e.g. when transferring some amount of tokens.\n// The preprocessor (a filter applied in an unconstrained context) does not check if total sum is larger or equal to\n// 'min_sum' - all it does is remove extra notes if it does reach that value.\n// Note that proper usage of this preprocessor requires for notes to be sorted in descending order.\npub fn preprocess_notes_min_sum(\n    notes: [Option<UintNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: U128,\n) -> [Option<UintNote>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let mut sum = U128::from_integer(0);\n    for i in 0..notes.len() {\n        // Because we process notes in retrieved order, notes need to be sorted in descending amount order for this\n        // filter to be useful. Consider a 'min_sum' of 4, and a set of notes with amounts [3, 2, 1, 1, 1, 1, 1]. If\n        // sorted in descending order, the filter will only choose the notes with values 3 and 2, but if sorted in\n        // ascending order it will choose 4 notes of value 1.\n        if notes[i].is_some() & sum < min_sum {\n            let note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(note);\n            sum = sum.add(note.get_value());\n        }\n    }\n    selected\n}\n"
    },
    "78": {
      "path": "/build-volume/noir-projects/aztec-nr/authwit/src/auth.nr",
      "source": "use dep::aztec::{context::{gas::GasOpts, PrivateContext, PublicContext}, hash::hash_args_array};\nuse dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n"
    },
    "86": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr",
      "source": "use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{gas::GasOpts, private_context::PrivateContext, public_context::PublicContext};\n\nuse crate::hash::hash_args;\nuse crate::oracle::execution_cache;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        execution_cache::store(self.args);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args_hash: Field,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub gas_opts: GasOpts,\n    pub return_type: T,\n    pub is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: (),\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    pub target_contract: AztecAddress,\n    pub selector: FunctionSelector,\n    pub name: str<N>,\n    pub args: [Field],\n    pub return_type: T,\n    pub is_static: bool,\n    pub gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<M>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        execution_cache::store(self.args);\n        context.call_public_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"
    },
    "93": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/context/private_context.nr",
      "source": "use dep::protocol_types::debug_log::debug_log_format;\n\nuse crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        log::Log,\n        log_hash::LogHash,\n        max_block_number::MaxBlockNumber,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::PrivateLogData,\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS, PUBLIC_DISPATCH_SELECTOR,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub max_block_number: MaxBlockNumber,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<LogHash, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n\n        // WARNING(https://github.com/AztecProtocol/aztec-packages/issues/10558): if you delete this debug_log_format line, some tests fail.\n        debug_log_format(\n            \"Context.note_hashes, after pushing new note hash: {0}\",\n            self.note_hashes.storage().map(|nh: NoteHash| nh.value),\n        );\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        execution_cache::store(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            /// Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            /// for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index],\n                },\n            );\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS]) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log = PrivateLogData { log: Log::new(log), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        /// Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        /// execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        /// the number of side effects that took place), along with the hash of the return values. We validate these\n        /// by requesting a private kernel iteration in which the return values are constrained to hash\n        /// to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.call_public_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            enqueue_public_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args);\n        self.set_public_teardown_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        /// Safety: TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        /// WARNING: This is insecure and should be temporary!\n        /// The oracle hashes the arguments and returns a new args_hash.\n        /// new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        /// We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        /// b) this is only temporary.\n        let args_hash = unsafe {\n            set_public_teardown_function_call_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                counter,\n                is_static_call,\n            )\n        };\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n            args_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"
    },
    "94": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/context/public_context.nr",
      "source": "use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"
    },
    "95": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr",
      "source": "use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        /// Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n}\n"
    },
    "96": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr",
      "source": "use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n"
    },
    "98": {
      "path": "/build-volume/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypt/aes128.nr",
      "source": "use std::hash::{from_field_unsafe as fr_to_fq_unsafe, sha256};\n\nuse dep::protocol_types::{\n    constants::{GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2},\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::utils::point::point_to_bytes;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n"
    }
  }
}
