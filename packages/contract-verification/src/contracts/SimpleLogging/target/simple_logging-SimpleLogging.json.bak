{"noir_version":"1.0.0-beta.1+4144a8dce4789d85","name":"SimpleLogging","functions":[{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10176877060487216746":{"error_kind":"string","string":"Function add_to_counter_public can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1d3WtkSRW/N/2RpJNOMjM74+7qCuIKgrDc/ki689Yyu+ji16LI7otoT7p7NjCbDElmcEQk4sKCsuDqi8L61/jmq+C7KIggCis++eLc8Z7uX379u9X3pqsy40dBuH3r1D3n1KlTp6pOnarE0SzF2bNK75EoM8ieyXKp5RFXIhl1JSvzoPLv53r2vgLwisfKrhNdn/j7SXd3XdTPI/+d9QxnSPkYzgD4k9UMz6vnM/xclzQ1s3fUIftm7fHfZjT7vZX9XqdvQrRtQNknNwT/K1C3NN0+D0K7s5HJ8n58UZZGP/JAq9WbtNr9fh/5T1NtQb3T92ogmRv+ehj8HatXDeRYEXUy+k0h9zjnabgYZrQaUVhb4aob8m+/d6g8yyAPV60krnUBC9GmVUe9kf62qOsK1VvhqjrqveKod6i+Uosu9ttPZ89Ud1vEQ6DxY7cZzetEBLQ4VUQZy0vt3cPso6YoZ2lb1Inbr0I0Oc/VfhXCVRe4VH8yvlDP7Vtrh1WiM8jek+VS21VvtKVGfzPjN03Dh+987f7B8Wj89fHZg5OjiBKbvirks7hqOd9UoDwml6pGHsSz3+7st7ujPeZPDXGVHD48z+/nhjiPuPcCq9l0Orrmn/epObM22o9mOvJB9luZm5jabT1M3dtFh3uj34iCDnvT4X6d+MkbotMufzP7Pe3yt4f37o2GZ8Pbx/cfYSVYkPzkjhwTMctbzXlXBgJ/bwseajn8RdGs4pjnmptYuab4Ls55Gh3OYzqKZ5fiXpaOa661ATCPSndg9diM5pPBmkCb5bzlkM02wHDM4qTmEFbf1DBVVmZ4uRzz2gBYk2Ch2orX1KF0b43obHigY/qF7T/InslSqT3cieZ1dzOHrme9HrHuYiqru6zzOwDDunFSeo1+lVsF9FrO674xPhqNT+Ic1IqViFDuMMrPj0Yn49NTxtksiNPKmEhrgqcmwazs29kzFcknM5GEU8vZnKfpHXdr33Bfh3r7U+tWx1TwRjSfDPYc0Ga1vgkwVutbANsg2McAtkmw5wHGJvcFgKFp5qS6iskw1YtPlRgCsFs/RzDs1jcJht36FsGuAcxksQn4Z13z7PhkePfxyms4inPqEzvqwLQiUfaaAy+bV2xTj3rYY73ApPSC9RD1gvXwRYCxHn5c1NVgnwAY6+FLACurhybDsnqI7fI8wW4A7AWCYf99kWDYf00Wch2Q6eGbJ4dn44gSz9Vv0vs1US6iMijINBXxo+Bcxr4NPL+d+lGU3xMVweh79KOo5UkZP8oHJCKswiBaTjzDyeignXTuMH/Kj1IjPhAWR76aam+i3Mr+8LenfppGGP4PaiTLX0BbPpcJzTV1DzwlLuzvMPqNKGjXnPo7Nokfls+l/R2bonIIxxQTMctb1t+BPGzk8BdFs4pjHq8F1TpKrd/jnKfR4Tymo3j2ueZU9WF/B07iPCrdhCeCmNREkOV8zSEbHPDL+jusvmX9HbhA2yFYXXx72bbi/VukE0on2N/hQ8dZv9I0yJ7JcumO6j9bOXSftl7zfnhRvXY5GRbpdRF/h4oX8DhIt9V80yP+nhrE/eHvJUqPPOLfVXrEExTUI4863C/Sl5F+g3gNNUHZIX5YPmZbVF+yb3cEjHXkmqBzTdBRuLY84qp7xFXziKvhEVfsERfbSzXuBl7nFu47Rr8R6XF94Iefad/ZEHKtC7nyGI/fqnF1DX4jDOm45tL/x/Vs4WrSu8HV0+hwHtNBPjluJ5De93gPMP1ta5uU5keQjzpei+b3vJHPGpV/K57h/EeWZ2tODBZZo3oHsj+9mOhVIvdinjdhPPPTcekmyoAdxZfdu0VajWi+Ha/KceKKl/Dpi1C4nmaboqybVLemKL8q6mblKufzuOxZBdgmwWrn8zJJ+8OjlYv8FG237Wi+rXiDJ5Csp37zVcGr2tRN82xDYuqce+2dw7NvHo2PDk4e3T8bj758fDeixG60OuSzKdvI+SbPh15mn9vlromoLJu0slsf3F1C+nvzmlCplMetD2y2y2x9mLtcnQiJvYlorxPW29DrqfBNf/h3dzl80zP/XRWC6RF/J7A3ZhzYG9NWVtgj/7thvT17d56et6fVKjqr+m/x9rAN8OFx8IHLp+fIJ1+xR1w+PVo+6+jTO7buEVfTIy6fXjuffK14xLXmEZdPvefVAuJO0yB7Jsulqe00XviEHNetRuXfjC/yGeaIRatdxEO7Gog2yz6K9Hhn9JuCH+O7IWDVJXgd7/Yn+/3d/cdTstZeez+JCb/xynnch9ZEeTV2hj3a00rUSh49jWmqAmyVYDWAGY+4klfzbp/8F5E/0t+JtD7Y7zJteT26qGvYH9OxT3kl2MsYyCsx9TJimLnLA8Sh5t/KOlrK77vklVFeIqW7zAOWVydlVCTQluM79A4FjhqYynMH5KXkyWH9Vn4s5Kn6Hro80lQ9D1KffsrHe8AHyxP7dV4bKq8nywnLY9tY/XaoPLax2p3g9alyL2F78Bih3Eu42xBS7r1+ksTGa4bf9IhTFeBY/kGGgEOzlx3XJr1ha9IZToa7w9GoezBUIfjWxnxDRxn3odqNUinF+TLj/ML47Pbx0dnJ8ODs9aPTs+HRwfjV8f17x4/GJ3l+NntXx7MRjs9FvCpfWJoG2TNZLrXU/Moj/uQqjzL/MGM+ldUPst98o47qp2hPjM8Ux7sOHHUHjqrAwSHc72U/Ah+nTrhvIa1U71/Jfrv0/vWjw7PD4b3D7w3PDo+Pvjg8fZt7AGuz8i5HgpOIas35KDnD+T608o+phXB2xa2Mqxds5Z86cNQdOGKBo0Y4fk6tzPHIg+w9WTKpVjZagWm3Qt+/wisurOezehlBqIshYqJn/LB8Lh2cvy4qh3BMMRGzPB4OKznlWCGNRqNg5VzTsobgx7Xrp75jpVJLPeR12WAFrNtVBSsoWatN79KKhIgtH+Eq5SmIvVcXlLPffKQoTYPsmSyXRk/xqFC3qDV6Vo8KqdMR9u2OgLGPWvkCmoKOwrXqEZfNHlRkF+9DFPXvqJMWVm5dfDfInkm51OEMwx1m/66V8CkHTGqvjtchEckPE/KdtsmvyNcRCVzqRpJrBMP+e51gqAc3CKaOuCsdYb0uqyP4fZ5f2uDqaXQ4j+konrcFD+wnUYNKw0FnU9Bpiu+WrY/iOfRJPY5kbHqkg7q4RXQQJ65HfxvP8hGGPkakaTev8srmL/EM5++y34FXGmPuZ5g4ZkL1DfT7sZ6p/Tl10gplzknZJ8tL7dOvS9gnbL/tHJzs/8Dv+NbKP8QzPn6/chEff6P8ISVuvCnqdrMyVQd53qY0GG/tLsL1Z6j+H1dmVSrqSlRdVKUU5y3GmQZcfvXBvXuHk8PxCX9RlNJGNN8J/wqdMKJNsEArh2m4r9rsQd757gIr/xG0BG/2qGWtmkgyD1ieAy7SpK6i5SOggeT1TBktdc+J6859ZdBw4/VPBQwa6iYPOkaDdadC/C4azHCDQLU16wEaTN78Du26McuF/Qb5WQU4lm+szOrK/UZNINU1yswDlsd68xXOuPmw9pTkFS2QF9uQek55lD+Wvw7y/UymgDtRvv6pK4352BR+ZzJcZkPL1VcxlcFZK4HzecY5HdVe++7h6Vmh+H37vcwmWpqU2zlNg+yZLJdaNarDS6Afn830I21L35uj/VHnTr930N1rtfd7471Sm6Ou43pXMS9gPou4ysME67hd5WtClsoxwIEDyqscEwzpuBa9iIuPQWJfGFxOHm3OeNau9iw778ArOss4etAG8SIZ+8I2wbB9+AoXdNLZHEzNOzjAuey/O8Dvq8QD20v1NDqcx3QUz2rs57m1urK/7qCjjtC6gj8vWx/Fs8/dGVWfq3Jc8Tm1QM790PaiFfqopArUxSCsr9AcGv9ngZoTc/Cilb+zMsP5Bq3BA82N76hNKEvKic22A2XO/VAFzql1atn7Ok0WZR1hOD/lwHkP4+Rcikguysnm+tczPnmJSXZ5Ywt7vaz8d2DO+rnKRbkiLgwk5vqOQL8fkn6Hvh5U+ZhUf567u9qxVlbRAmo+yDxgebVJp3wL7GMKJK/SPia2B0WvIGN7gGsTHv/Qx+RaYypbgcf0i/qYHubYc6PBusP+MuX/4HEiTavnF/E+eUJe7XyG90kdsDzB1gFWPb9Ip5G9V4EO4jI+alT+Rxm/1t51+Ma+3xH060T/At8iD/sJ46qIPCufyvT72UuI9fO4vz9K9ifjYavVao+S8aL1s5ITBsmnyWSNbVEXdatR+Z+A7Xyf9Lgm6KXlPnSUi3OeT3CIvOr5xTzVRqi7Vt5oN87neTTYBsBqRGcze0d5IS7jo0blf0m6i/pm3+8I+mtE/wLfIo91d0OU3xDl0/b5WfZieot19+2/eEKT8GMe8/Yh9KvQ/9bSUpN4M16RbqDQ0MIBUUa/QbyGaDOkZ/ywfNjnpOaW6l/a8NxkmX8bGQKX8oHwDm5ZHwh+X8QHEvawarJbVOf435EG6gPOf0eq5Kr8YjWSOcJYT8r6fP4TcLHuYDuG8Knw+OMLv7InrnaPCYZ85fU1xN/MkRfCsG/k7YGptROvsQMdgHKusdW/GOU19m9oTRxoP0Me8eC92EA2b0/5aC2p9RPrFcqE9ZH3oxCWt9/CSa0hTRYp7VfA98HlLCkdjAmm7I8K8DR+1P4x21rsc3WCYd/hYGAehwbZM1kutdSewFXZx5jqHUVuW+6aU1QE/9vRYjuHdcN1ovdDsN3+Y2kP93b3R512r9tetE71Tb81eTyZSVrtbtLuttvjcZl9ZtUfKiRjdemBspFR5F9/pgergY66oIFjQP5GtrxB9Rt44lPZ8rygcFtDcx+wwFw1PvqcX/J4t5E1dErv77BezxsDtqP8MUCdyGI9UmNA4L2paYwj7vmo+MJNgGP5fwr/s7qAAW16mqrnQerTVRcwoB+8BnSxXlFULA5THabBtuE4Ctx/4vFWrWPUvjH3k3pOedzXu1A+U7RF8V583bmK91LjNY/zaIsawPPL2UeB9wz7KjbIUlPILSYY9kOew/G+BsLUPmQseFi0Z1hmDufDDrGtCTUW/C/bBZOpyy747JM8v0Z9xLjRlwPG93V3h72DYa/V2u+2xt3W7lXP++6MW+POZDLpjIfdyd5keNX0k/boYG/c7vWTXhriOCoz7ww91wlsg6V/BsevTmWWjzAVK54mPpxl5b8Ec7S97HeI9a2yqWw3A8Wbdl1xVoH32wv7gPnfugQaQ0r/W5erOKieZ/9VTGwaY7AVzbeZOkipbLbSX15PlfUPq/jcsv4cHt+UP0eNRdaf8GI/1f9iKr/oTAnblSinPPs6Df8bYFdOya6oE3lqXsV2hfsEwlz/ijJQ3OBUd7cWyJTjAa38W7CuKHKZobptg3nA8mqO5LrMMPBlhdO18vYCefFlhVb+2w55qfq7YrW2Rfkth7xQlnzIdovelS26Kl1cJFvWRSt/V8hWrTfWoT5pqp4Hqc9u2YsgXeuHNBVpf9eaAmPitgiGNp7XFEiXLzBB28z2H208xiKfUmzmovnhvwAbDiiFPJkAAA==","debug_symbols":"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","brillig_names":["public_dispatch"]},{"name":"add_to_counter_public","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10176877060487216746":{"error_kind":"string","string":"Function add_to_counter_public can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_to_counter_public"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"log_plaintext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/92c927bMBDG5URKIieOndG9927leHeme+/W/dsdfosWAtqHSPu09Zfw7DPDAilCovkqQJCto+9+PFHUiTy6EG1s3cFeMJ9jc5w2R5xfjMY3Kbtqjtn2tqpHXVkoxgIB4wQB4yQBY0zAmBAwThEwThMwzhAwpgSMRQLGWQLGOQLGEgHjPAFjmYCxQsC4EIAxBOciCeeSR04d24fiXY52fhvdRcC4m4BxDwHjXgLGfQSM+wkYDxAwHiRgPETAeJiA8QgB41ECxmMEjMcJGE8QMJ4kYDxFwHiagPEMAeNZAsZzBIznCRgvEDBeJGC8RMB4mYDxCgFjRsBYJWBcIWCsETDWCRgbBIxNAsYWAWObgLFDwHiVgPEaAeN1AsYbBIw3CRhvETCuEjDeJmC8Q8B4l4DxHgHjfQLGBwSMDwkYHxEwPiZgfELA+JSA8RkB43MCxhcEjC8JGF8RML4mYHxDwPg2AGMIzncknO9JOLuBOKMPFvTEYMfCLSyMwsIjLOzBwhksTMHCDyyswMIFLAxA4j0S25E4XhnsSHxGUjESdpEEiyRTJHEiSRJJiEjyQxIdktSQBIYkKyQxIUno6GA/NtiRRIIkDSRBIMkAk/iYJMckNCZ5MYmKSUpMAmKSDZNYmCRCrTDJgUkEDNJjEByDzBjExSApBiExyIdBNAxSYRAIgywYxJBBArzk4iUSL2l4CcJLBoJ4BMkIQhHkIYhCkIIgAA9ZPMTwkEAnjE4OnQhuUtwAaFzd6M+bNJIf5pia44SSe1xEV00tuz71t7POx9RRP4/8tdTonAmiv9ES/WkY/kwW2t7LR/p1XcTupDl285Evu/k4k5RZU2XWrDJSnzDXu14P66/qSsnyUaTqIraLYWzXCpY9fV20TOwXo5Btc2NRsrYnPLZ/pO8oSZl8xFOwZHG+uR4iS5RMri/snFfl7LY1Y8mEBZu035LyjWwfjEyuaax0+muvjXbY9lrP/l17rVf/x/YaW7I431yPv22vum3Z7TWJRpv0pSKbUrKflmxayX7lI9sNxdE0n8P2yRvPYH3v+X6GLTn4tS1s0/nIH9IGJ9W5RPlv3T+6vCVLlSzOx+0UzfdY2dG6hCOxytfN97I5TqnfyO8rDvtTlv0xbsc52y+po3zqKI+2dsl8njU72tA3+U20+d7Fvmq+Z9vamh1XP+lPf6vm6gs98n8R/bNB9NeH+ufC8A/jqlIY/w/1z4fh74v+chj9TdFfCaO/IfoXguhfGcYJ+s927DhhSZ33GNduOU4Q+0WLNVScsGTx2P7RcQJkyw7WikNm9wHLDjvLDjsuXfMedS141FXcoXUsedRV8agr9ajL53Wc86jLp7/KHnXNeNTls9379Jdcx7DjVVnmitOiAPqLYfQP+37po/W7ma6T2E+s8l8tP88F8fNoHEr6M+0LVyzl0/ZWn9div+TgEe6iQ7adP0D70mj3O+1GZxDSV5srnaxg6RdW+5x+L9L9iy7veva74j6Pvs5cYxBl5VdssZLNW7JEyYRRj0G44mKf/Fvxv7Zfccjs/nmr13IxGm9r+n6cjUb3c5z7r3urvfHHLuuMRn8SjY8xRpb9xCr/3Xy3+7rt3iP9Vq/ar/X6vUbv8+f6p96ipV/7EH76DXVGL3ipUwAA","debug_symbols":"tZbLCoMwEEX/ZdZZOOOr9VdKKVFjCYQoUQtF/PfG0oe067sJTJg5QxYn3IVaU8/Xi/VdP1J1Wsj1jZ5s72O1rIrqYJ2z18v+mpLt4ESeA+Og/VaPkw4TVakoMr6lKkvieGedoaqQVf01lu/Gsvw05rKeVSSnMHIGI+cwcgEjlzDyAUY+osicwMgMI8McZJiDDHOQYQ4yzEGGOcgwBxnmoMAcFJiDAnNQYA4KxsE1VjcdrK6deQWIbvbNLk9M98H8RIsh9I1p52C2kPHNF9vbM1G5PH/9WLAUilOOS+KiBw==","brillig_names":["process_log"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"packed_note_content","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"16541607464495309456":{"error_kind":"fmtstring","length":16,"item_types":[]},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VZy67aQAwdSEJIuAEKn3Cl7tomXJ47Fn3c30AFPqHrrLppP7qMGCcH46siYVfFEpoknhyfOXZmJqHjztY//TrhOA5tz10b9dmGtrzPKkWs0pJn50F4dh+EZ/QgPGNFnh2Bp2/peUvc+ZlL3fl5bC7iTT7BEdzk/gYAwX6HNgttF/yKCakyYZBa+Otyvs/cpSnzf8kCZmqDvyD8vg1+Sbw/1y0+joXiRqF9rVstX+Eeb0U4xuIlXPJ1wfeF+SLwfWU+rOFvzId1T5xIN1qYlOtqY50XGlsKY+u80TrXaofXSOvcmdZoRTnPGB/On/gU1Kdu+fSYLwZfxnwJ+Eh/3z5DP577FPp9hONP0IfXZ+Su65n8lH/U3aK+YgP8k82lHPD8xPVlbPRhDmLQ85npY7FuoD4W+nt9pm/wp2Nvae0ai5ieqBFp1sf+zJeBL64v4+ThPIY4iEU8Etb/QzgfhbYH99D9YyF+j8W/4C1cQ404ViRco/7++Xwfjgfh52voJ93jructvc31ci7N4Xr4qwY/s+F/JPzcBn9J+AMb/GZv82SCPysJv7Dh38xBQ5v6afaWIxv+B8Ifm+DPD7QOv3OtNXNEOJ7Adb35u6pu2SNh/JxxtdojTRgfrg+uwd43FbiOBR/P4VSIMxXiSFiZItaTItboPx1jXxFroIg1VMTSzGOqiKWpV66IVShiada9pl6UR2mf5m0b2vJOk/ZpiviVtE/TfJcnram+YkFDHF/C+v9gOg9MeFYzWnPoWacYGLswin3rek3xC4EP8c4F3z0fZw+L9XGzXmxOW7JqOds0+SwYV34N34twPsb+0tov7fsUtS6ld/8h6OotBl/BfAn4iKP07j804n+L/hh/LPj4+n9rLifuej0csHHjN6+typjb74HSt3rj+Wtx67NJ8XN3PV//q++NqA/fS+cC17Hg4/uTXIiTC3EeEYt/s0cNfV2TTnHd+rVyuVq3f3TRXJS4y/8BHIufsP6/wjmOjdp75vzjalcdX3bH3WK338+/7yYM31sXdPoDg5oBSR0fAAA=","debug_symbols":"tdfNaoQwFIbhe8k6i5z8mIm3UsoQNQ6BECVqoYj33jhM26GzLN9GiBwfN77g2dkQuu12jXmcFta+7SxNvV/jlOtpPzjrSkwp3q7Pt5k4L87c55fZ5/O4rL6srFWSs5AH1mpRnx5jCqxt5MFfBu33oLU/g0Ye75y5BgVbFHxBwQ4EkxAwmWCyhMkKJmuYbGByA5MtTL7AZFiDBGuQYA0SrEGCNUiwBgnWIMEaJFiD9L8GnXoM1k/hhXYwWgocTTha4miFozWONji6wdEWR+NqlLgaFa5GBarxqKcPX6LvUnhsTeOW+6clav2cw599ai5TH4athHOz+l2qzvSU4drc/zzqgZTmpFx9SX3RFw==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_counter_value","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_counter_value"]},{"name":"increase_counter_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"counter_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1ZS2/TQBBex3YSJ40awQWJCz/BTkqT3oJEbwhOlbiGxEaR+lJaXid85gISEjeQOCAu3JDg78FWO8nn8cRNlV0KEiNV+5jZb167k13XU0vyTBuwsRJkRqaNN6PEIlYsGlpFJPPTtJFpa8D3LTobMb028Yfxzt1I8M+i/f3IYLqMD2E6wI8bBud+vsTnvmjqmDHuIVrT/P23pZb9julHbI2L3DqMfXxTsJ90tY2vb1h8fIiPt6JVqphPohqLGy86I0t+dVV5TwV/wI9/2YfQvg89yQfSo89T1/THz48enU5Opum96XSenp15zC/JfomughleAfMWx3z47PBwls3S+f7L2dl5CbsuYFO/pmTfuF0ohyTVS00j08abURIyH+6YVteCdxU2eNZs2O3xPWkZfxCpcp7s4fdiwm84wR8s8Jtu4jMh/MiN/YvftZYb+zOqj221JI/t3S2Yt/ibOlyn/qL+FrPV9v3KY/rIHh4fqjcUu45ga1fg8T3eEfR0BD0SVmQRy7eIVbeI1bSI1bKIRbW26m4h1eXrODukv6XKuXZxdkIhrr4QV4pdXbC1K/Dw/os81FMX9PzH+juxOmxMfKklPXyO60E7Sd7xm3ng+Jwn0v3L5ruW8oDvZtKl2wOYpz9l/PWFtT7wUX4OmI9Nf5vJYA4dx3XgMdt98AdrGH/7NdzY0686WxgD0r/p+UFdLSWfn5Ed35Iq3wIh1lLd4O+bTWoQYV1nTjHW/F7YEOSlukd3Ej8vYxEvAF6d8cK8HBN953rP7Fk3b9uqnCta6zjWPV6f0FbMPenX9/Tbpr/4VrF/NDs/OE6PJ/NXp+fp9MHJU8Vo1SeJmiqXsrBiTU0VTSWT1v0kIx1xifSzZZ0y6ygtizJLV/lVPxsN4KP8C9Pq8Sfmv3RMpGcatwHl0W++jXHbNCvW4fGQPje4iGcE8ZLiifFG+demxXhKZcQDfzQFuRN/htqOz2AHj2fIbJJyKJV9HieUx9zwnwl8VjcYD0s2f+ZKZQdt4U9GbqdSxeuWy7gPhnFMOinntI84BcBH+bdmjM9qaoMN7MwG4yTrj7Px3fF0ujMZ32D4ShX/7WJb/5M0SftZlvXT8U62m12qn+Yb+ZLvs1hdxM/06aw1UZ7xIuAFeVF/y4wD0INYZEfI5D+a8bZp67CG1ncF/XWmv2C3MIf7mmP5whzJ673/wfRd5DUd7k3jvSwdJ0nSm8bpZXmV4oT1URPFGnNRF3wLmfwX8Pmr6fMrGerTcj8q5LwV7QWGMBfkxTkpR7h3SZ50t/KyjcRrAw9rt6YtM8Z4IRbZETL572ZMOcH9Ruu7gv4m01+wW5jje7ctyLcFeZ2fb4RnWvTd9lPqQifDxzluG+0dva9/Abt1inzQIgAA","debug_symbols":"zZrbbuJADIbfJde5GI/t8QyvslpVHEIVCQHisNIK8e47QU3KEkRVL8P6piKt/ecr+fM7hzlVi2Z2fH9r18vNvpr8OFWrzXx6aDfrvHU619Vs165W7fvb9a8r1/0AutTvt9N1t7k/THeHagIh+Lpq1ovuo/issGxXTTUJ/vyzroAVPUHRI4qeqOhJ3+/xTtEDih6v6EFFj8IHXuED/10f1ONi57gvdp6HYnB4p5qI5KOaiMNQLXCnOOIgHdHDdXHHLk9gj0Nxhn8he3wCO8HwvYevvnfgMFQHkMfsCVNfnAjplj09lR3c3+x5D+iK7wGK70GRFKhIClQkBSqSAhUTAxUTAxUTAxUTgxQTgxQTgxQ+IIUPSOEDUviAFD4ghQ9I4QNS+IAVPmCFD1jhA1b4gBU+YIUPWOEDVviA7/pAoG8R5Mc5HUM/tGPyj+ceRelndv74OeDRuQtKMoMSnB0UsIPi7aCgHRSyg8J2UIIdFLGDYidtg520FTtpK3bSVuykrdhJW7GTtmInbcVO2oqdtBU7aSt20ja+0rbJ9bKUAEcorzxAyccBBWWE8rwDlNzt48jkSopDSXFfUhxLilNJcS4pHkqKS0nxWFK85Bma37IUVYei6r6oOhZVp6LqXFQ9FFX/5zOVh7dMjh4Px8Sxv2RIAcIIJdpBSWZQwNlBATso98No6InuC5QnvgYGIDPXugAvve4mN7BQHLMEQyxiiCUaYkl2WLwzxAKGWPx/YmEZs7zyId3jm2nwZIiFDbEEQyxiiMXOgyDwyQ4LOkMsYIjFG2IxlLtoKHfRSu6e8+av6a6dzlbNxwrx5XE9v1owfvi9bW7Wjm93m3mzOO6abhX55wLy7nyEADVEn//H7shDvlsBlsu9abeJsQbCywXc5a+UN0NmyBx/AA==","brillig_names":["increase_counter_public"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"parameters":[],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"bY/dCoMwDIXfJde9aOo2sK8iQ6pGKZRWah0M8d2Xjk26n5tDTvhyyNlgoG6dWuvHsIBuNnChN8kGz27bBXTROmentlyDzILVk19m47NdkokJdKUEkB9AnyRfj9YR6IvaxQ+IEuWb5VnVB45V/Z+v8eAVyg/+urO9mWhN5+j1+rj6vmiS7jN9lZpj6GlYI+V6RTPWBs9CSY7l6Ac=","brillig_names":["sync_notes"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]}],"outputs":{"structs":{"functions":[{"kind":"struct","path":"SimpleLogging::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLogging::constructor_parameters","fields":[]}}]},{"kind":"struct","path":"SimpleLogging::add_to_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLogging::add_to_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleLogging::increase_counter_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleLogging::increase_counter_public_parameters","fields":[{"name":"counter_id","type":{"kind":"field"}}]}}]}]},"globals":{"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"SimpleLogging"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"counters","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}}]}}]}]}},"file_map":{"26":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"51":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"52":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"62":{"source":"use dep::aztec::macros::aztec;\n\n#[aztec]\ncontract SimpleLogging {\n    use dep::aztec::prelude::{Map, PublicMutable};\n    use dep::aztec::{\n        macros::{storage::storage, functions::{public, initializer, internal}},\n    };\n    #[storage]\n    struct Storage<Context> {\n        counters: Map<Field, PublicMutable<Field, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor() {\n    }\n\n    #[public]\n    #[internal]\n    fn add_to_counter_public(counter_id: Field) {\n        let new_counter_value = storage.counters.at(counter_id).read() + 1;\n        storage.counters.at(counter_id).write(new_counter_value);\n    }\n\n    #[public]\n    fn increase_counter_public(counter_id: Field) {\n      context.emit_public_log(/*message=*/ \"pub log\");\n      SimpleLogging::at(context.this_address()).add_to_counter_public(counter_id);\n    }\n    unconstrained fn get_counter_value(counter_id: Field) -> pub Field {\n        storage.counters.at(counter_id).read()\n    }\n}\n","path":"/Users/wietze/Documents/aztec/chicmoz/packages/contract-verification/src/contracts/SimpleLogging/src/main.nr"},"71":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"73":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr"},"103":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"127":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"129":{"source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"139":{"source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note_content,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note_content: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        packed_note_content,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note_content: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::unpack_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"142":{"source":"use dep::protocol_types::{address::AztecAddress, traits::Packable};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<let N: u32>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field,\n) -> [Field; N] {}\n\npub unconstrained fn raw_storage_read<let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> [Field; N] {\n    storage_read_oracle(\n        address.to_field(),\n        storage_slot,\n        block_number as Field,\n        N as Field,\n    )\n}\n\npub unconstrained fn storage_read<T, let N: u32>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32,\n) -> T\nwhere\n    T: Packable<N>,\n{\n    T::unpack(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::{address::AztecAddress, traits::{FromField, Packable}};\n\n    use crate::test::mocks::mock_struct::MockStruct;\n    use std::test::OracleMock;\n\n    global address: AztecAddress = AztecAddress::from_field(29);\n    global slot: Field = 7;\n    global block_number: u32 = 17;\n\n    #[test]\n    unconstrained fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    unconstrained fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.pack());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"145":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"153":{"source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"199":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"241":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"258":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"287":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"300":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"304":{"source":"use crate::traits::{Packable, ToField};\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for U128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self.to_field()]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"321":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"324":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/wietze/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.75.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"}}}